<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giraffe&#39;s Home</title>
  <subtitle>A Stupid Giraffe</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yemengying.com/"/>
  <updated>2016-11-16T03:12:22.000Z</updated>
  <id>http://yemengying.com/</id>
  
  <author>
    <name>Mengying Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【转】EVE 早期成员面基</title>
    <link href="http://yemengying.com/2016/11/15/i-love-eve/"/>
    <id>http://yemengying.com/2016/11/15/i-love-eve/</id>
    <published>2016-11-15T05:12:46.000Z</published>
    <updated>2016-11-16T03:12:22.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;第一次转别人的博客，想看原文的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/11/13/with-sunshine-after-one-year/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三“观”茅庐&lt;/a&gt;，我才不会告诉你们原文有大神高清无码照的！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先说点自己想说的， EVE 是毕业后第一份工作做的第一个产品(也可以说第一份工作做得唯一的产品，后面的那个我实在不想承认是我写的🙄)，做 EVE 的那段日子是到目前为止毕业后最开心的时光，学习到了很多东西也认识了很多很棒的小伙伴，不过也就是因为那段时光太过美好，才导致在部门拆分，EVE 团队大换血之后萌生了离职的念头。唉，没有对比就没有伤害啊。不过还是很感谢前前司，老大还有磊哥收留技艺不精的我。&lt;/p&gt;
&lt;p&gt;上周和之前的 EVE 小伙伴搞了次聚餐，见到了一年多没见的 sunshine 大神，之前做 EVE 时，前期一直和大神联调，虽未看过大神的代码，但也在 API 文档评审时深刻感受到了大神的代码洁癖。嗯，有代码洁癖的人代码一定写的好。&lt;/p&gt;
&lt;p&gt;最后，希望下次聚餐可以听到大神讲段子😏。&lt;/p&gt;
&lt;p&gt;—————————————分割线，以下内容来自hongju’s blog—————————————————&lt;/p&gt;
&lt;p&gt;这次面基的成因主要还是因为前两天看微信通讯录，sunshine 大神的头像换成了一只狗。于是就聊了起来，然后就有了今晚的这次聚餐~ sunshine 大神去年离职后，大约在十月一之前聚过一次餐，当时住的也比较近，后来大神搬到浦东，于是一年未见。于是又约到阿姨，卢神，凑了一次烤肉。&lt;/p&gt;
&lt;p&gt;未经大神同意，先偷偷的放一张 sunshine 的照片吧~&lt;/p&gt;
&lt;p&gt;&amp;lt;此处应该有照片&amp;gt;&lt;/p&gt;
&lt;p&gt;大神，阿姨，卢神和我们当时一起做在 * 公司做 EVE 这款产品，阿姨和卢神是EVE的后端主力，sunshine 算是我的 mentor，带着我用 cordova 做客户端，说白了就是用 H5 技术来做客户端。那段日子学到了很多东西，sunshine 大神的代码一直很 clean，给我做了非常好的榜样。以至于这一年多来，没见过比大神更加干净的代码。也就说，当我看那些人代码的时候，抑制不住吐槽的情绪。在 sunshine 的良好影响下，我自己也尽量写最干净的代码。&lt;/p&gt;
&lt;p&gt;除了代码之外，sunshine 对技术的追求也给我树立了很好的榜样。其实，在公司就会感觉到很多人对技术仅限于表面，或者能用就行。一点点追求都没有，这点，很致命。&lt;/p&gt;
&lt;p&gt;说完技术，再说说 sunshine 大神的 RP，大神不仅技术也好，做朋友也很好。非常踏实，有追求，因此我觉得自己非常幸运，能在自己毕业正式签约的第一家公司就能遇到这么好的 mentor。可惜的是，sunshine 离职，丢下的 EVE 这款美丽的产品于不靠谱的 sjn 之手。这里不再吐槽了。最近得知，EVE 这款产品更名 **。靠！&lt;/p&gt;
&lt;p&gt;说完，sunshine ， 这篇文章基本就算完事了。&lt;/p&gt;
&lt;p&gt;EVE 的早期成员都是非常靠谱，小团队，又能成事，现在很多人离开了公司，一部分人也分布在不同的业务线上，并且都混得很不错。期待着，哪一天能再次聚在一起~也不枉一起为了 EVE 熬了许多夜。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一次转别人的博客，想看原文的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/11/13/with-sunshine-after-one-year/&quot;&gt;三“观”茅庐&lt;/a&gt;，我才不会告诉你们原文有大神高清无码照的！！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="转载" scheme="http://yemengying.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Something about Spring Transaction</title>
    <link href="http://yemengying.com/2016/11/14/something-about-spring-transaction/"/>
    <id>http://yemengying.com/2016/11/14/something-about-spring-transaction/</id>
    <published>2016-11-14T13:30:34.000Z</published>
    <updated>2016-11-14T16:56:14.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;记录一个上周遇到的小问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;后端开发免不了要和事务打交道，比较常用的就是利用 Spring 框架的声明式事务管理，简单的说就是在需要事务管理的类或方法上添加 &lt;code&gt;@Transactional&lt;/code&gt; 注解，然后在配置类上添加 &lt;code&gt;@EnableTransactionManagement&lt;/code&gt;注解(这里配置采用 JavaConfig 的方式，如果是 XML， 是要在 XML 文件中添加&lt;code&gt;&amp;lt;tx:annotation-driven/&amp;gt;&lt;/code&gt;)。然后 Spring 框架会利用 AOP 在相关方法调用的前后进行事务管理。&lt;/p&gt;
&lt;p&gt;一直以来也没出什么岔子，直到。。。。。。。。&lt;/p&gt;
&lt;p&gt;上周写了段大概长下面样纸的代码。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Giraffe&amp;gt; giraffes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Giraffe giraffe : giraffes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      B(giraffe);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Giraffe giraffe)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 1: update something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 2: insert something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 3: update something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大概就是 Service 中有一个方法 A，会内部调用方法 B， 方法 A 没有事务管理，方法 B 采用了声明式事务，通过在方法上声明 Transactional 的注解来做事务管理。&lt;/p&gt;
&lt;p&gt;然鹅，通过下面的 Junit 测试方法 A 的时候发现方法 B 的事务并没有开启， 而直接调用方法 B 事务是正常开启的。 &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeServiceTest&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; GiraffeService giraffeService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 没有开启事务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	giraffeService.A();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 正常开启事务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	giraffeService.B();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/lei.jpg&quot; alt=&quot;T^T&quot;&gt;&lt;/p&gt;
&lt;p&gt;问了下明佳和超哥之后，终于有点明白了🤔&lt;/p&gt;
&lt;p&gt;Spring 在加载目标 Bean 的时候，会为声明了 @Transactional 的 目标 Bean 创造一个代理类，而&lt;code&gt;目标类本身并不能感知到代理类的存在&lt;/code&gt;。调用通过 Spring 上下文注入的 Bean 的方法， 并不是直接调用目标类的方法。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/direct-call.png&quot; alt=&quot;不是&quot;&gt;&lt;br&gt;而是先调用代理类的方法，再调用目标类的。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/proxy-call.png?imageMogr2/thumbnail/400x350!&quot; alt=&quot;是&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于加了@Transactional注解的方法来说，在调用代理类的方法时，会先通过拦截器&lt;code&gt;TransactionInterceptor&lt;/code&gt;开启事务，然后在调用目标类的方法，最后在调用结束后，TransactionInterceptor 会提交或回滚事务，大致流程如下图。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/transaction.png?imageMogr2/thumbnail/800x400!&quot; alt=&quot;transaction manager&quot;&gt;&lt;/p&gt;
&lt;p&gt;而对于第一段的代码，我在方法 A 中调用方法 B，实际上是通过“this”的引用，也就是直接调用了目标类的方法，而非通过 Spring 上下文获得的代理类，所以。。。事务是不会开启滴。&lt;/p&gt;
&lt;p&gt;解决办法也蛮简单，通过实现ApplicationContextAware接口获得 Spring 的上下文，然后获得目标类的代理类，通过代理类的对象，调用方法 B，即可。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;ApplicationContextAware&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;@Setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ApplicationContext applicationContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Giraffe&amp;gt; giraffes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GiraffeService service = applicationContext.getBean(GiraffeService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Giraffe giraffe : giraffes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      service.B(giraffe);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Giraffe giraffe)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 1: update something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 2: insert something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 3: update something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;stackoverflow 上也有相关的问题:&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1099025/spring-transactional-what-happens-in-background&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Transactional - What happens in background?&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23931698/spring-transactional-annotation-self-invocation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Transactional Annotation : Self Invocation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;唉，都快写完了，还没等来 wuli 悦儿&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/72bace62ed926caa5fb52a9ecca08e61.png?imageMogr2/thumbnail/500x350!&quot; alt=&quot;wuli 悦儿&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录一个上周遇到的小问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Running Man 7012</title>
    <link href="http://yemengying.com/2016/10/27/runningman-7012/"/>
    <id>http://yemengying.com/2016/10/27/runningman-7012/</id>
    <published>2016-10-27T13:47:17.000Z</published>
    <updated>2016-11-15T02:29:51.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;前两天刷微博时突然看到 Gary 即将从 《Running Man》(以下简称 RM) 下车的消息，有点伤感，却并不惊讶。可能从2016年开始，就隐约感到节目到了瓶颈，收视率也一直上不来，作为一个铁杆粉丝也不得不承认 RM 没有以前好看了，很长时间没有一期看好几遍的情况了。不过追了 RM 四年，看 RM 早已不是为了娱乐搞笑，而变成了自己生活的一部分，只要看到他们七个就开心。也许在不久的将来连 RM 都会停播了，但现在只要 RM 更新一期，就会看一期，哪怕就是他们几个嗑瓜子闲聊天。即便有再火再好看的节目，自己也早没了当初的心境去追了。改编我前女神的一句歌词就是“有的综艺说不清哪里好，但就是谁都替代不了”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;好了，结束伤感的话题。&lt;/p&gt;
&lt;p&gt;本来想写篇 RM 科普文，但对 RM 不感冒估计怎么说也不会感兴趣吧。所以就简单写点，纪念下我爱的七只和第一次也是最后一次追了四年看过每一期的 RM。部分资料和图片来源于网络，权侵删。&lt;/p&gt;
&lt;h3 id=&quot;七只&quot;&gt;&lt;a href=&quot;#七只&quot; class=&quot;headerlink&quot; title=&quot;七只&quot;&gt;&lt;/a&gt;七只&lt;/h3&gt;&lt;p&gt;RM 能收获那么的喜爱和关注，虽然离不开制作组的精心制作和创意，但更重要的是七个 MC 的人格魅力。So…..就从介绍七只开始，聊聊 RM 吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;刘在石&lt;/strong&gt;:&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/1.jpeg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;刘大神&quot;&gt;&lt;br&gt;  外号：刘大神、刘鲁斯·威利斯、刘姆斯·邦德、蚂蚱/蚱蜢、刘赫&lt;/p&gt;
&lt;p&gt;  国民 MC，也应该是目前韩国地位最高的 MC 了。RM 的灵魂人物，美好的一塌糊涂(我是不是和驴得水里面的教育部长一样不会用词🤓)。会记住工作人员的名字，会在录制中去帮助路边的市民，会隐藏自己努力突出其他人，亲民，谦逊，幽默，温暖(此处省略10万字)。跑步很快，所以有个外号叫刘鲁斯·威利斯。如果硬要说一个缺点的话，那就是。。。。。恩，摘了眼睛颜值骤降。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/liu2.png?imageMogr2/thumbnail/300x600!&quot; alt=&quot;萌萌哒&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;池石镇&lt;/strong&gt;：&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2_1.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;池石镇&quot;&gt;&lt;br&gt;  外号：王鼻子、黑斑羚、Race Starter&lt;/p&gt;
&lt;p&gt;  王👃大叔，RM 中年龄最大的，擅长身体搞笑。是 RM 中的最弱体, 监狱三人组之一。几乎每次撕名牌都是最先去监狱的，所以也被称为“Race Starter”(比赛开始)。其实鼻子大叔对 RM 的贡献是很大的，在前期所有人的定位还不明确的时候，RM 的笑点都是靠大神和鼻子大叔扛起来的，鼻子叔是那种身体素质一般，但口才超棒的人，很会制造笑料。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;宋智孝&lt;/strong&gt;：&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/5_2.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;宋智孝&quot;&gt;&lt;br&gt;  外号：懵智、不良智孝、Ace、金智孝、周一情侣&lt;/p&gt;
&lt;p&gt;  RM 中唯一的女 MC。第一眼感觉就是漂亮，很耐看。但深入了解下去，才发现漂亮在智孝身上已经算不上什么闪光点了。第一次见到刚睡醒顶着一头乱乱的头发就去录影的女演员；第一次见到在车上张着嘴睡的女演员；能摔跤，能劈砖，能下泥潭，能蹦极，完全不输给男生；气急了还会爆两句粗口，瞬间变身不良智孝;很聪明，是 RM 中单独获胜次数最多的；这样的懵智怎么可能不喜欢😍&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/zhixiao_shaozi.png?imageMogr2/thumbnail/300x200!&quot; alt=&quot;宋智孝&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;金钟国&lt;/strong&gt;：&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/3.jpeg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;金钟国&quot;&gt;&lt;br&gt;  外号：能力者、老虎、钟淑、斯巴达国&lt;/p&gt;
&lt;p&gt;  很具有反转魅力的一个人。唱歌时嗓音很细腻温柔，撕名牌时却以一抵十；看身材很剽悍，实际却很爱卖萌。是 RM 中的能力者，撕遍天下无敌手，不过也因为太强，经常在撕名牌时被围剿😭。要说能力者有什么怕的，应该就是“背叛长颈鹿”（李光洙）了，就是本能坑害老虎。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/tumblr_mitpqwkvFE1qgnyjgo6_r1_250.gif&quot; alt=&quot;︿(￣︶￣)︿&quot;&gt;&lt;br&gt;  咳咳，只是为了节目效果，国儿和光洙还是很有爱的🙃。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/tumblr_mitpqwkvFE1qgnyjgo2_r2_250.gif&quot; alt=&quot;相亲相爱&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;姜gary&lt;/strong&gt;:&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/61.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;姜gary&quot;&gt;&lt;br&gt;  外号：狗哥、平和Gary、偶尔能力者、鱿鱼、周一情侣&lt;/p&gt;
&lt;p&gt;  本职工作是音乐人，但却因为综艺火了起来。在节目中，总是不经意的爆发一下，所以被称为偶尔能力者，前两期的最强者特辑， gary 都是最后的获胜者。gary 的诸多定位中，最火的应该就是和智孝的周一情侣了。虽然在2016年的节目中，制作组特意淡化了周一cp间的互动，但我一直觉得 gary 就是智孝的“姜盖里”，会偷偷放走她的“姜盖里”。多亏了周一情侣，让我在看综艺的同时，也看了部偶像剧🌚&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/gary_cp.jpg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;周一情侣&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;哈哈&lt;/strong&gt;：&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/4.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;哈哈&quot;&gt;&lt;br&gt;  外号：Haroro、企鹅、花心哈哈&lt;/p&gt;
&lt;p&gt;  哈哈，本名河东勋，不过还是更习惯哈哈这个名字。早期在 RM 的定位是“花心哈哈”，每次一来女嘉宾，就会说“成为我最后的爱吧 (｡♥‿♥｡)”。不过这些只是为了活跃气氛，结婚之后“花心哈哈”的定位就没有，变成了“顾家好男人”，最近听说哈哈马上要有第二个孩子了，在渡汉江那期说的愿望也要实现了。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/8643d6ee56de7eaa046af99a222f3060.gif&quot; alt=&quot;☆´∀｀☆&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;李光洙&lt;/strong&gt;:&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/7.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;李光洙&quot;&gt;&lt;br&gt;  外号：长颈鹿、亚洲王子、李光子、光凡达、光蟾蜍、情景剧发烧友&lt;/p&gt;
&lt;p&gt;  绝对的男神，我博客的标准结尾。其实在一开始，光洙可以说是最不起眼的，作为一个综艺新手，没有大神，国儿，haha从以前节目积累下的观众缘，没有王鼻子老练，没有 gary 有那么多的歌迷，也没有宋仲基那么明显的颜值优势。但在自己的努力和其他人的帮助下，一点点找到了自己的定位（陷害光洙，easy 兄弟，长颈鹿)。在节目中，光洙最明显的特质应该就是“背叛”了，每次都让人觉得好气啊，然后就又笑的肚子疼。。。。不知道为什么七个 MC 中，最最喜欢光洙，连带着把很多网站的用户名都换成了 giraffe，可能天生就对这种又努力又逗比的人没有抵抗力吧。&lt;br&gt;  放一下女装造型&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/liguangzi.jpeg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;李光子&quot;&gt;&lt;br&gt;  不过一开始的胡子造型真是亮瞎了我的卡姿兰大眼睛。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/huzi.jpg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;😱&quot;&gt;&lt;br&gt;  哈哈哈哈，原谅我，爱到深处自然黑啊。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;墙裂推荐&quot;&gt;&lt;a href=&quot;#墙裂推荐&quot; class=&quot;headerlink&quot; title=&quot;墙裂推荐&quot;&gt;&lt;/a&gt;墙裂推荐&lt;/h3&gt;&lt;p&gt;本来想按照好看程度排个最好看的十期，最后发现实在选不出来。每一期都敲好看，都值得看。就随便推几期吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/KwvzbxLDWls/C7eeyc6dRVI.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20130825 &lt;/a&gt;&lt;br&gt; 按照电影雪国列车为主题拍摄的一期，玩游戏整理排名，国儿和大神互打手掌那段简直笑屎我了。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/KwvzbxLDWls/_kGbJeh5ayM.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20130526&lt;/a&gt;&lt;br&gt; 嘉宾是金秀贤和李玹雨，全集高能，我大神叼着接力棒吃洋葱圈简直萌翻我。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/v9hwf_w5zyk/kDnxaOAcKsY.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141123&lt;/a&gt;&lt;br&gt; 这集造型极其哇撒，放张图，大家憋说话，用心感受&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/alien.jpg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;(￣▽￣)~*&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/v9hwf_w5zyk/RzktO2d9L1o.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141012&lt;/a&gt;&lt;br&gt; 七个成员都变成了超级英雄，高空测试胆量那段笑的我肚子疼。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/v9hwf_w5zyk/AKR3BwkXzV8.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141109&lt;/a&gt;&lt;br&gt; 女装特辑，最爱wuli光子和钟淑了。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/KwvzbxLDWls/JTRj3UG6Nsg.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20130915&lt;/a&gt;&lt;br&gt; 很多人应该冲着嘉宾是Bigbang看过这期了，但我推荐这期是因为这期有我周一情侣的荧屏初吻，我的少女心啊😍&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/v_19rrn6uwpg.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141214&lt;/a&gt;&lt;br&gt; 通过一张图就能知道大神为了赢有多拼。&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/u=288559190,3305279898&amp;amp;fm=21&amp;amp;gp=0.jpg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;&amp;lt;(￣︶￣)&amp;gt;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XMTUyMjI3MTEwNA==.html?from=y1.6-85.3.1.7712090c9d5a11e5a080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20160403&lt;/a&gt;&lt;br&gt; 2016年里的觉得最好看的一期。特别是wuli光洙被haha愚弄的那段。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/w_19rr63053t.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20111225&lt;/a&gt;&lt;br&gt; 第一期最强者特辑。RM 每年都会有一期是最强者特辑，遗憾的是国儿还从来没有赢过，希望下一期最强者战可以是国儿赢。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/zongyi/20130130/379d4aa0b603dec5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20120624&lt;/a&gt;&lt;br&gt; RM 第一百期特辑，诸神之战， 嘉宾是金喜善， 结局蛮不错的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/O8GDpd7v8RA/v3YuwBHAY4M.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20150125&lt;/a&gt;&lt;br&gt; 刘姆斯邦德 vs 光佛岩，结尾狗哥真是蠢萌的让人心疼&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/w_19rt38lku1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20110911&lt;/a&gt;&lt;br&gt; 狗哥做间谍🕵的一期，不应该说是狗哥以为他做间谍，但是其他成员其实都知道他是间谍，他并不知道其他成员知道他是间谍的一期。。。艾玛啊，说的好绕🙃&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;又到睡觉觉的时候了&quot;&gt;&lt;a href=&quot;#又到睡觉觉的时候了&quot; class=&quot;headerlink&quot; title=&quot;又到睡觉觉的时候了&quot;&gt;&lt;/a&gt;又到睡觉觉的时候了&lt;/h3&gt;&lt;p&gt;写的差不多了，这么点内容根本表达不出 RM 带给我的快乐。生活大爆炸也开始更新第十季了，很有可能是最后一季，说不定过两天又要写篇文章纪念下贱萌贱萌的 Sheldon, 总被压迫的 Leonard 和女汉纸 Penny 了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/42a98226cffc1e17bf5c71db4e90f603728de97d.jpg?imageMogr2/thumbnail/600x400!&quot; alt=&quot;7012&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前两天刷微博时突然看到 Gary 即将从 《Running Man》(以下简称 RM) 下车的消息，有点伤感，却并不惊讶。可能从2016年开始，就隐约感到节目到了瓶颈，收视率也一直上不来，作为一个铁杆粉丝也不得不承认 RM 没有以前好看了，很长时间没有一期看好几遍的情况了。不过追了 RM 四年，看 RM 早已不是为了娱乐搞笑，而变成了自己生活的一部分，只要看到他们七个就开心。也许在不久的将来连 RM 都会停播了，但现在只要 RM 更新一期，就会看一期，哪怕就是他们几个嗑瓜子闲聊天。即便有再火再好看的节目，自己也早没了当初的心境去追了。改编我前女神的一句歌词就是“有的综艺说不清哪里好，但就是谁都替代不了”。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>滚蛋吧~ XML 君</title>
    <link href="http://yemengying.com/2016/10/15/javaConfig-vs-XML/"/>
    <id>http://yemengying.com/2016/10/15/javaConfig-vs-XML/</id>
    <published>2016-10-15T07:20:20.000Z</published>
    <updated>2016-10-19T09:01:38.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Long long time ago, 在《Spring In Action》一书中看到这么一句话&lt;strong&gt; JavaConfig is the preferred option for explicit configuration because it’s more powerful, type-safe, and refactor-friendly &lt;/strong&gt;。不过当时并不知道 &lt;code&gt;JavaConfig&lt;/code&gt; 是神马东东就选择性忽略了。最近新的项目采用了 Spring Boot + JavaConfig ,接触了一个星期的 JavaConfig，感觉还不错，简单比较下它和 XML。由于接连看了 4 部韩国灾难片心情比较蓝瘦，就暂时不要指正错误了，错就错吧(づ｡◕‿‿◕｡)づ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/alibaba.jpg&quot; alt=&quot;lalala&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot; title=&quot;XML&quot;&gt;&lt;/a&gt;XML&lt;/h3&gt;&lt;p&gt;虽然早在 Spring 3 中就开始支持以 &lt;code&gt;JavaConfig&lt;/code&gt; 的方式配置项目，但感觉目前主流的还是以 &lt;code&gt;XML + Annotation&lt;/code&gt; 的方式，很少见到使用 JavaConfig 的。可能有点以偏概全了，但在前司和前前司接触到的项目都是以 XML + Annotation 混合的方式配置的，即在 XML 配置文件中开启注解扫描, 业务 bean 的配置注入采用注解( @Serivce, @Autowire 等等)，全局的一些配置(如 MyBatis 的 DataSource,SqlSessionFactory ，web.xml 等等)使用 XML。&lt;/p&gt;
&lt;p&gt;虽然 XML + Annotation 的方式比纯用 XML 配置的方式少写了很多 XML，但本质上还是基于 XML 的。&lt;/p&gt;
&lt;p&gt;XML 的配置文件比较冗长，不易书写，而且可读性也不高。不知道大家感觉怎么样，反正我看着是挺头疼的╥﹏╥…&lt;/p&gt;
&lt;h3 id=&quot;JavaConfig&quot;&gt;&lt;a href=&quot;#JavaConfig&quot; class=&quot;headerlink&quot; title=&quot;JavaConfig&quot;&gt;&lt;/a&gt;JavaConfig&lt;/h3&gt;&lt;p&gt;先简单介绍一下 JavaConfig，JavaConfig即Java Configuration, 即用纯 Java 的方式来配置 Spring&lt;br&gt; IoC 容器,允许开发者用代码来表示配置逻辑，不再需要 XML。粗略翻了两本关于 Spring Boot的书， JavaConfig 都是最推荐的配置方式。&lt;/p&gt;
&lt;p&gt;使用 JavaConfig 的好处，Spring 官方文档中说的很清楚：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JavaConfig 为依赖注入提供了一个真正面向对象的机制，这意味着开发者可以在配置代码中充分利用 Java 重用、继承和多态性等特性。&lt;/li&gt;
&lt;li&gt;开发者可以完全控制实例化和依赖注入，即使是最复杂的对象也可以很优雅地处理。&lt;/li&gt;
&lt;li&gt;因为使用 JavaConfig 只需要 Java，可以很容易的 refactor 代码，而无需再 IDE 之外使用特殊的工具或插件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JavaConfig 其实很简单，主要是通过 @Configuration 和 @Bean 来进行配置。@Configuration 注解的作用是声明当前类是一个配置类， 就相当于一个 XML 文件。 @Bean 注解声明当前方法返回的是一个 bean。&lt;/p&gt;
&lt;p&gt;可能这样说对于用惯了 XML 的人还是比较抽象的，下面看看这些注解与 XML 配置的对应关系。&lt;/p&gt;
&lt;h3 id=&quot;JavaConfig-与-XML&quot;&gt;&lt;a href=&quot;#JavaConfig-与-XML&quot; class=&quot;headerlink&quot; title=&quot;JavaConfig 与 XML&quot;&gt;&lt;/a&gt;JavaConfig 与 XML&lt;/h3&gt;&lt;p&gt;1.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;: @Configuration&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;:&lt;/p&gt;
  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:tx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:util&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/util&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:p&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	   http://www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      http://www.springframework.org/schema/tx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	   http://www.springframework.org/schema/tx/spring-tx.xsd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      http://www.springframework.org/schema/util&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      http://www.springframework.org/schema/util/spring-util.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;: @Bean&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;:&lt;/p&gt;
  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;jdbc:mysql://127.0.0.1:3307/giraffe&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ymy&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;666666&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;：@ComponentScan&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;：&lt;br&gt;  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;：@Import&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;：&lt;br&gt;   &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;resource&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;XXX.xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比如要配置一个 dataSource， 在 XML 中通常的做法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;drMainDataSource&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.url&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.username&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.password&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;maxActive&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;mysql.datasource.max-active&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对应的 JavaConfig 是酱紫的：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataAccessConfig&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConfigurationSupport&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSource &lt;span class=&quot;title&quot;&gt;mysqlDataSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Value(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.url&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String url,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.username&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String username,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.password&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String password,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.driverClass&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String driver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.max-active&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxActive) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DruidAbstractDataSource dataSource = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DruidDataSource();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataSource.setDriverClassName(driver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataSource.setUrl(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataSource.setUsername(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataSource.setPassword(password);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataSource.setMaxActive(maxActive);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataSource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;虽然才接触了一周的 JavaConfig, 但是相见恨晚啊, 个人还是更喜欢 JavaConfig 的配置方式的。JavaConfig 的配置文件可读性更高也更容易学习，记住简单的几个注解即可；借助 IDE 的力量，更不容易出错；而且脑袋再也不用在 Java 和 XML 间来回切换了，在搭配上 Gradle 简直破费科特！！！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/WechatIMG1.png&quot; alt=&quot;开森&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关文档&quot;&gt;&lt;a href=&quot;#相关文档&quot; class=&quot;headerlink&quot; title=&quot;相关文档&quot;&gt;&lt;/a&gt;相关文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring-javaconfig/docs/1.0.0.M4/reference/html/pr01.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring JavaConfig Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Spring Boot 揭秘》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;——————————————-片 尾 彩 蛋 🎉🎉🎉—————————————————&lt;br&gt;咳咳，预警预警！！！下面的部分与本文主旨无关。&lt;/p&gt;
&lt;p&gt;首先，换了个新锅，可以预约煮粥，再也不用早起煮粥了，幸福感提升 200%。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/guo.jpg&quot; alt=&quot;我是锅&quot;&gt;&lt;br&gt;其次，在匿名人士的帮助下上线了新版未翻墙模式下的评论，优化了样式。唉，这是谁的男朋友这么有才华，好羡慕她哦︿(￣︶￣)︿&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/envy.png&quot; alt=&quot;&amp;lt;(￣︶￣)&amp;gt;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，嘿嘿，关注个公众号再走吧(&lt;em&gt;^__^&lt;/em&gt;)&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/qrcode.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Long long time ago, 在《Spring In Action》一书中看到这么一句话&lt;strong&gt; JavaConfig is the preferred option for explicit configuration because it’s more powerful, type-safe, and refactor-friendly &lt;/strong&gt;。不过当时并不知道 &lt;code&gt;JavaConfig&lt;/code&gt; 是神马东东就选择性忽略了。最近新的项目采用了 Spring Boot + JavaConfig ,接触了一个星期的 JavaConfig，感觉还不错，简单比较下它和 XML。由于接连看了 4 部韩国灾难片心情比较蓝瘦，就暂时不要指正错误了，错就错吧(づ｡◕‿‿◕｡)づ&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>【译】S.O.L.I.D 原则在 Go 中的应用（上）</title>
    <link href="http://yemengying.com/2016/09/11/solid-go-design-1/"/>
    <id>http://yemengying.com/2016/09/11/solid-go-design-1/</id>
    <published>2016-09-11T07:09:18.000Z</published>
    <updated>2016-09-21T09:53:06.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近两个月没有好好的看书学习，导致博客也水了两个月没写什么正经的。上周收到仓鼠🐹君萌萌哒的邮件之后，又激起了我写博客的欲望。由于自己最近灵感枯竭，所以我决定翻译一篇别人的O(∩_∩)O~。作为一个一直想学 Go，但想了好久还没入门的人，我挑了篇写 Go 的，顺便帮自己熟悉一下 Go。原文是作者根据自己 GolangUK 的&lt;a href=&quot;https://www.youtube.com/watch?v=zzAdEt3xZ1M&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演讲&lt;/a&gt;所整理的，全文以 SOLID 原则为线路讲述了什么样的 Go 代码才算是好代码，当然 SOLID 原则也适用于其他语言。原文比较长，所以准备分成上下两部分，也有十分非常以及特别大的可能是上中下(捂脸)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咳咳，我果然是打脸体质，下翻译了一句就放弃了。不过，我把它交给了超靠谱的小伙伴。想看下的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/09/21/solid-go-design-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【译】S.O.L.I.D 原则在 Go 中的应用（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;捂。。。。。。。。还是不捂了，脸已经丢没了🙈&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://dave.cheney.net/2016/08/20/solid-go-design?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dave.cheney.net/2016/08/20/solid-go-design?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&lt;/a&gt;&lt;br&gt;原文作者：&lt;a href=&quot;http://dave.cheney.net/about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dave Cheney&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;世界上有多少个-Go-语言开发者？&quot;&gt;&lt;a href=&quot;#世界上有多少个-Go-语言开发者？&quot; class=&quot;headerlink&quot; title=&quot;世界上有多少个 Go 语言开发者？&quot;&gt;&lt;/a&gt;世界上有多少个 Go 语言开发者？&lt;/h4&gt;&lt;p&gt;介个世界上有多少 Go 开发者捏？在脑海中想一个数字，我们会在最后回到这个话题。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/think1.png&quot; alt=&quot;thinking&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Code-review&quot;&gt;&lt;a href=&quot;#Code-review&quot; class=&quot;headerlink&quot; title=&quot;Code review&quot;&gt;&lt;/a&gt;Code review&lt;/h4&gt;&lt;p&gt;有多少人将 code review 当做自己工作的一部分?[听演讲的人都举起了手]。为什么要做 code review？[一些人回答为了阻止不好的代码]&lt;/p&gt;
&lt;p&gt;如果 code review 是为了捕捉到不好的代码，那么问题来了，你怎么判断你正在 review 的代码是好还是不好呢？&lt;/p&gt;
&lt;p&gt;我们可以很容易的说出“这代码好辣眼睛”或者“这源码写的太吊了”，就像说“这画真美”，“这屋子真大气”一样。但是这些都是主观的，我希望找到一些客观的方法来衡量代码是好还是不好。&lt;/p&gt;
&lt;h4 id=&quot;Bad-code&quot;&gt;&lt;a href=&quot;#Bad-code&quot; class=&quot;headerlink&quot; title=&quot;Bad code&quot;&gt;&lt;/a&gt;Bad code&lt;/h4&gt;&lt;p&gt;下面看一下在 code review 中，一段代码有哪些特点会被认为是不好的代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rigid 代码是不是很僵硬？是否由于严格的类型和参数导致修改代码的成本提高&lt;/li&gt;
&lt;li&gt;Fragile 代码是不是很脆弱？是否一点小的改动就会造成巨大的破坏？&lt;/li&gt;
&lt;li&gt;Immobile 代码是否难以重构？&lt;/li&gt;
&lt;li&gt;Complex 代码是否是过度设计？&lt;/li&gt;
&lt;li&gt;Verbose 当你读这段代码时，能否清楚的知道它是做什么的？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👆这些都不是什么好听的词，没有人希望在别人 review 自己代码时听到这些词。&lt;/p&gt;
&lt;h4 id=&quot;Good-design&quot;&gt;&lt;a href=&quot;#Good-design&quot; class=&quot;headerlink&quot; title=&quot;Good design&quot;&gt;&lt;/a&gt;Good design&lt;/h4&gt;&lt;p&gt;了解了什么是不好的代码之后，我们可以说“我不喜欢这段代码因为它不易于修改”或者“这段代码并没有清晰的告诉我它要做什么”。但这些并没有带来积极的引导。&lt;/p&gt;
&lt;p&gt;如果我们不仅仅可以描述不好的设计，还可以客观的描述好的设计，是不是更有助于提高呢。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/excited.jpg&quot; alt=&quot;excited&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;SOLID&quot;&gt;&lt;a href=&quot;#SOLID&quot; class=&quot;headerlink&quot; title=&quot;SOLID&quot;&gt;&lt;/a&gt;SOLID&lt;/h4&gt;&lt;p&gt;2002年，&lt;code&gt;Robert Martin&lt;/code&gt; 出版了《敏捷软件开发:原则、模式与实践》一书，在书中他描述了可重用软件设计的五个原则，他称之为 &lt;strong&gt;SOLID&lt;/strong&gt; 原则(每个原则的首字母组合在一起)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一责任原则&lt;/li&gt;
&lt;li&gt;开放封闭原则&lt;/li&gt;
&lt;li&gt;里氏替换原则&lt;/li&gt;
&lt;li&gt;接口分离原则&lt;/li&gt;
&lt;li&gt;依赖倒置原则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这本书有点过时了，书中谈论的语言都已经超过了十年之久。尽管如此，在谈论什么样的 Go 代码才是好代码时，SOLID 的原则依然可以给我们一些启发。&lt;/p&gt;
&lt;p&gt;So，这也就是我花时间想在本文和大家一起讨论的。&lt;/p&gt;
&lt;h4 id=&quot;单一责任原则&quot;&gt;&lt;a href=&quot;#单一责任原则&quot; class=&quot;headerlink&quot; title=&quot;单一责任原则&quot;&gt;&lt;/a&gt;单一责任原则&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/single.png&quot; alt=&quot;忙成狗&quot;&gt;&lt;br&gt;SOLID 原则中的第一个原则就是&lt;code&gt;单一责任原则&lt;/code&gt;。&lt;code&gt;Robert C Martin&lt;/code&gt; 说过 A class should have one, and only one, reason to change(修改某个类的时候，原因有且只有一个)，说白了就是，一个类只负责一项职责。&lt;/p&gt;
&lt;p&gt;虽然 Go 语言中并没有类的概念–但我们有更鹅妹子嘤的 &lt;code&gt;composition&lt;/code&gt; (组合)的特性。&lt;/p&gt;
&lt;p&gt;为什么修改一段代码只负责一项职责如此重要呢？如果一个类有两个职责R1，R2，那么修改R1时，可能会导致也要修改R2。修改代码是痛苦的，但更痛苦的是修改代码的原因是由于修改其他代码引起的。&lt;/p&gt;
&lt;p&gt;所以当一个类只负责一个功能领域中的相应职责时，可以修改的它的原因也就最大限度的变少了。&lt;/p&gt;
&lt;h5 id=&quot;耦合-amp-内聚&quot;&gt;&lt;a href=&quot;#耦合-amp-内聚&quot; class=&quot;headerlink&quot; title=&quot;耦合 &amp;amp; 内聚&quot;&gt;&lt;/a&gt;耦合 &amp;amp; 内聚&lt;/h5&gt;&lt;p&gt;这两个词是用来形容一段代码是否易于修改的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;耦合&lt;/code&gt;是指两个东西需要一起修改—对其中一个的改动会影响到另一个。&lt;/p&gt;
&lt;p&gt;另一个相关但独立的概念是&lt;code&gt;内聚&lt;/code&gt;，一般指相互吸引的迷之力量。&lt;/p&gt;
&lt;p&gt;在软件开发领域中，内聚常常用来描述一段代码内各个元素彼此结合的紧密程度。&lt;/p&gt;
&lt;p&gt;下面我准备从 Go 的包模型开始，聊聊 Go 开发中的耦合与内聚。&lt;/p&gt;
&lt;h5 id=&quot;包名&quot;&gt;&lt;a href=&quot;#包名&quot; class=&quot;headerlink&quot; title=&quot;包名&quot;&gt;&lt;/a&gt;包名&lt;/h5&gt;&lt;p&gt;在Go中，所有代码都必须有一个所属的包。一个包名要描述它的用途，同时也是命名空间的前缀。下面是 Go 标准库中一些好的包名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;net/http，提供 http 的客户端和服务端。&lt;/li&gt;
&lt;li&gt;os/exec，可以运行运行外部命令。&lt;/li&gt;
&lt;li&gt;encoding/json，实现了 JSON 文件的编码和解码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;不好的包名&quot;&gt;&lt;a href=&quot;#不好的包名&quot; class=&quot;headerlink&quot; title=&quot;不好的包名&quot;&gt;&lt;/a&gt;不好的包名&lt;/h5&gt;&lt;p&gt;现在让我们来喷一些不好的包名。这些包名并没有很好的展现出它们的用途，当然了前提是它们有-_-|||。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;package server 是提供什么？。。。好吧就当是提供一个服务端吧，但是是什么协议呢?&lt;/li&gt;
&lt;li&gt;package private 是提供什么？一些我不应该看👀的东西？&lt;/li&gt;
&lt;li&gt;还有 package common， package utils，同样无法清楚的表达它们的用途，开发者也不易保持它们功能的专一性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面这些包很快就会变成堆放杂七杂八代码的垃圾堆，而且会由于功能太杂乱而频繁修改。&lt;/p&gt;
&lt;h5 id=&quot;Go-中的-UNIX-哲学&quot;&gt;&lt;a href=&quot;#Go-中的-UNIX-哲学&quot; class=&quot;headerlink&quot; title=&quot;Go 中的 UNIX 哲学&quot;&gt;&lt;/a&gt;Go 中的 UNIX 哲学&lt;/h5&gt;&lt;p&gt;在我看来，任何关于解耦设计的讨论如果没有提到 &lt;code&gt;Doug McIlroy&lt;/code&gt; 的 &lt;code&gt;UNIX 哲学&lt;/code&gt;都是不完整的。UNIX 哲学就是主张将若干简洁，清晰的模块组合起来完成复杂的任务，而且通常情况下这个任务都不是原作者所能预想到的。&lt;/p&gt;
&lt;p&gt;我想 Go 中的包正体现了 UNIX 哲学的精神。因为每一个包都是一个拥有单一责任的简洁的 Go 程序。&lt;/p&gt;
&lt;h4 id=&quot;开放封闭原则&quot;&gt;&lt;a href=&quot;#开放封闭原则&quot; class=&quot;headerlink&quot; title=&quot;开放封闭原则&quot;&gt;&lt;/a&gt;开放封闭原则&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/open.png&quot; alt=&quot;open or close&quot;&gt;&lt;br&gt;第二个原则，也就是 SOLID 当中的 O，是由 &lt;code&gt;Bertrand Meyer&lt;/code&gt; 提出的&lt;code&gt;开放封闭原则&lt;/code&gt;。1988年，Bertrand Mey 在他的著作《面向对象软件构造》一书中写道：Software entities should be open for extension,but closed for modification（软件实体应当对扩展开放，对修改关闭）。&lt;/p&gt;
&lt;p&gt;那么这个n年前的建议在 Go 语言中是如何应用的呢？&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; A &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	year &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (a A) Greet() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Hello GolangUK&quot;&lt;/span&gt;, a.year)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; B &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (b B) Greet() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Welcome to GolangUK&quot;&lt;/span&gt;, b.year)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a.year = &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.year = &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a.Greet()&lt;span class=&quot;comment&quot;&gt;//Hello GolangUK 2016&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.Greet()&lt;span class=&quot;comment&quot;&gt;//Welcome to GolangUK 2016&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码中，我们有类型A，包含属性 year 和一个方法 Greet。我们还有类型B，B中嵌入(embedding)了类型A，并且B提供了他自己的 Greet 方法，覆盖了A的。&lt;/p&gt;
&lt;p&gt;嵌入不仅仅是针对方法，还可以通过嵌入使用被嵌入类型的属性。我们可以看到，在上面的例子中，因为A和B定义在同一个包中，所以B可以像使用自己定义的属性一样使用A中的 private 的属性 year。&lt;/p&gt;
&lt;p&gt;所以，嵌入是实现 Go 类型对扩展开放非常鹅妹子嘤的手段。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Cat &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (c Cat) Legs() &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (c Cat) PrintLegs() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, c.Legs())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; OctoCat &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Cat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (c OctoCat) Legs() &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; octo OctoCat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, octo.Legs())&lt;span class=&quot;comment&quot;&gt;// I have 5 legs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	octo.PrintLegs()&lt;span class=&quot;comment&quot;&gt;// I have 4 legs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，我们有一个 Cat 类型，它拥有一个 Legs 方法可以获得腿的数目。我们将 Cat 类型嵌入到一个新类型 OctoCat 中，然后声明 Octocat 有5条腿。然而，尽管 OctoCat 定义了它自己的 Legs 方法返回5，在调用 PrintLegs 方法时依旧会打印“I have 4 legs”。&lt;/p&gt;
&lt;p&gt;这是因为 PrintLegs 方法是定义在 Cat 类型中的，它将 Cat 作为接收者，所以会调用 Cat 类型的 Legs 方法。Cat 类型并不会感知到它被嵌入到其他类型中，所以它的方法也不会被更改。&lt;/p&gt;
&lt;p&gt;所以，我们可以说 Go 的类型是对扩展开放，对修改关闭的。&lt;/p&gt;
&lt;p&gt;实际上，Go 类型中的方法比普通函数多了一点语法糖—-将接收者作为一个预先声明的形参。(译者注：这块理解了好久😖。。。，不懂得可以看这篇&lt;a href=&quot;https://tiancaiamao.gitbooks.io/go-internals/content/zh/07.3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文档&lt;/a&gt;)&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (c Cat) PrintLegs() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, c.Legs())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; PrintLegs(c Cat) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, c.Legs())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于 Go 并不支持函数重载，所以 OctoCat 类型并不能替代 Cat 类型。这也将引出下一个原则—里氏替换原则。&lt;/p&gt;
&lt;p&gt;且听下回分解。。。。。。。&lt;/p&gt;
&lt;p&gt;——————————————别看我，我只是个傲娇的分割线———————————————————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;终于完成了上的部分↖(^ω^)↗，尽量在下周完成下。由于并不了解 Go 难免会有错误或翻译生硬的地方，欢迎指正错误，欢迎一起讨论~(≧▽≦)/~。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;都看到这了，关注个公众号再走吧🙈&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/qrcode.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近两个月没有好好的看书学习，导致博客也水了两个月没写什么正经的。上周收到仓鼠🐹君萌萌哒的邮件之后，又激起了我写博客的欲望。由于自己最近灵感枯竭，所以我决定翻译一篇别人的O(∩_∩)O~。作为一个一直想学 Go，但想了好久还没入门的人，我挑了篇写 Go 的，顺便帮自己熟悉一下 Go。原文是作者根据自己 GolangUK 的&lt;a href=&quot;https://www.youtube.com/watch?v=zzAdEt3xZ1M&quot;&gt;演讲&lt;/a&gt;所整理的，全文以 SOLID 原则为线路讲述了什么样的 Go 代码才算是好代码，当然 SOLID 原则也适用于其他语言。原文比较长，所以准备分成上下两部分，也有十分非常以及特别大的可能是上中下(捂脸)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咳咳，我果然是打脸体质，下翻译了一句就放弃了。不过，我把它交给了超靠谱的小伙伴。想看下的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/09/21/solid-go-design-2/&quot;&gt;【译】S.O.L.I.D 原则在 Go 中的应用（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;捂。。。。。。。。还是不捂了，脸已经丢没了🙈&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yemengying.com/categories/go/"/>
    
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="go" scheme="http://yemengying.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>如何快速拥有产品的sense</title>
    <link href="http://yemengying.com/2016/08/23/how-to-get-pm-sense/"/>
    <id>http://yemengying.com/2016/08/23/how-to-get-pm-sense/</id>
    <published>2016-08-23T08:32:31.000Z</published>
    <updated>2016-09-21T08:32:49.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;趁着在家葛优躺的几天，培养培养自己在产品方面的技能，经过axure,sketch,xmind的重重磨炼，总结出来这篇文章，从三个方面讲讲如何才能在短时间内快速拥有产品的sense，画出高保真的原型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/no-dream.jpg&quot; alt=&quot;lalala&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;趁着在家葛优躺的几天，培养培养自己在产品方面的技能，经过axure,sketch,xmind的重重磨炼，总结出来这篇文章，从三个方面讲讲如何才能在短时间内快速拥有产品的sense，画出高保真的原型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【Spring】Xml解析相关</title>
    <link href="http://yemengying.com/2016/07/25/spring-xml/"/>
    <id>http://yemengying.com/2016/07/25/spring-xml/</id>
    <published>2016-07-25T14:37:18.000Z</published>
    <updated>2016-09-21T08:36:02.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;先请看下左上角，hiahia，新logo，si不si很漂酿，有个会设计的表哥就是好，又好又快，还不用钱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;总结下最近看的 Spring Xml 解析相关的一点点东东，还没有看完。。。。&lt;/p&gt;
&lt;h3 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-spring-resource/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring 资源访问剖析和策略模式应用&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h3&gt;&lt;p&gt;先说个在看源码时，发现的一个以前没有关注过的点。大神们在创建集合的时候，大多数都设置了一个预估的初始容量(2的幂数)，而不是直接采用默认的初始容量( HashMap 中是16)，就像下面这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map from dependency type to corresponding autowired value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt; resolvableDependencies = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map of bean definition objects, keyed by bean name */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, BeanDefinition&amp;gt; beanDefinitionMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;String, BeanDefinition&amp;gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map of singleton and non-singleton bean names, keyed by dependency type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt; allBeanNamesByType = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt;(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map of singleton-only bean names, keyed by dependency type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt; singletonBeanNamesByType = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt;(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** List of bean definition names, in registration order */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; List&amp;lt;String&amp;gt; beanDefinitionNames = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** List of names of manually registered singletons, in registration order */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; Set&amp;lt;String&amp;gt; manualSingletonNames = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;String&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大神们这样写肯定是有好处的。不太了解其它集合类的实现，就以 HashMap 为例看一下。HashMap 底层的存储结构是一个 Entry 对象的数组(Java 8中是 Node 对象的数组)，默认初始容量是16，负载因子是0.75。也就是说当元素个数超过16*0.75=12时，就要进行扩容，将数组大小扩大一倍，并计算元素在新数组中的位置，这个过程是比较耗费性能的。所以，个人觉得大神们这样写是因为如果直接采用默认的初始容量，那么在元素个数较少时，会浪费空间；元素个数较多时，又会造成频繁的扩容，耗费性能。&lt;/p&gt;
&lt;p&gt;想起上次的需求，明明确定一定以及肯定评分只有5个，还是new了个默认容量(16)的map。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/renxing.jpeg&quot; alt=&quot;ren xing&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关接口&quot;&gt;&lt;a href=&quot;#相关接口&quot; class=&quot;headerlink&quot; title=&quot;相关接口&quot;&gt;&lt;/a&gt;相关接口&lt;/h3&gt;&lt;p&gt;先理一理加载xml配置文件的相关接口&lt;br&gt;&lt;strong&gt;1.Resource&lt;/strong&gt;：采用了策略模式，是 Spring 资源访问策略的抽象，该接口有多种实现类，每个实现类代表一种资源访问策略，负责具体的资源访问。&lt;br&gt;&lt;strong&gt;2.ResourceLoader&lt;/strong&gt;：该接口的实现类可以获得一个 Resource 的实例。&lt;br&gt;&lt;strong&gt;3.BeanDefinitionReader&lt;/strong&gt;： 根据指定的 Resource 加载bean definition. &lt;/p&gt;
&lt;p&gt;未完待续。。。。。。&lt;/p&gt;
&lt;p&gt;本来是想多整理一点的，但是。。。听说新一期RM主角是wuli光洙，这还能忍，滚去看RM了。。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;先请看下左上角，hiahia，新logo，si不si很漂酿，有个会设计的表哥就是好，又好又快，还不用钱。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yemengying.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>【Spring】Bean的生命周期</title>
    <link href="http://yemengying.com/2016/07/14/spring-bean-life-cycle/"/>
    <id>http://yemengying.com/2016/07/14/spring-bean-life-cycle/</id>
    <published>2016-07-14T13:35:53.000Z</published>
    <updated>2016-09-21T08:35:54.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;智商捉鸡🐔，实在没办法一下子理解Spring IoC和AOP的实现原理，看的闹心也不太懂，所以。。。决定拆成小的不能在小的一个个问题，一点点啃。今天先来看看Spring中Bean的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Spring Bean是Spring应用中最最重要的部分了。所以来看看Spring容器在初始化一个bean的时候会做那些事情，顺序是怎样的，在容器关闭的时候，又会做哪些事情。&lt;/p&gt;
&lt;h3 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;p&gt;git地址：&lt;br&gt;&lt;div id=&quot;badge-container-giraffe0813-giraffeInSpring-giraffeInSpring&quot; class=&quot;hexo-github&quot; style=&quot;width: 100%&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;/hexo-github/badge.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  loadStyle(&quot;/hexo-github/style.css&quot;);
  loadStyle(&quot;/hexo-github/octicons/octicons.css&quot;);
  new Badge(&quot;#badge-container-giraffe0813-giraffeInSpring-giraffeInSpring&quot;, &quot;giraffe0813&quot;, &quot;giraffeInSpring&quot;, &quot;giraffeInSpring&quot;, false);
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;spring版本：4.2.3.RELEASE&lt;br&gt;鉴于Spring源码是用gradle构建的，我也决定舍弃我大maven，尝试下&lt;a href=&quot;http://kevin.doyeden.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;洪菊&lt;/a&gt;推荐过的gradle。运行beanLifeCycle模块下的junit test即可在控制台看到如下输出，可以清楚了解Spring容器在创建，初始化和销毁Bean的时候依次做了那些事情。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Spring容器初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=====================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用GiraffeService无参构造函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GiraffeService中利用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;方法设置属性值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanName:: Bean Name defined &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; context=giraffeService&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanClassLoader,ClassLoader Name = sun.misc.Launcher&lt;span class=&quot;variable&quot;&gt;$AppClassLoader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanFactory,&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanFactory:: giraffe bean singleton=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Environment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ResourceLoader:: Resource File Name=spring-beans.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ApplicationEventPublisher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ApplicationContext:: Bean Definition Names=[giraffeService, org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&lt;span class=&quot;comment&quot;&gt;#0, com.giraffe.spring.service.GiraffeServicePostProcessor#0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;执行BeanPostProcessor的postProcessBeforeInitialization方法,beanName=giraffeService&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用PostConstruct注解标注的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;执行InitializingBean接口的afterPropertiesSet方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;执行配置的init-method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;执行BeanPostProcessor的postProcessAfterInitialization方法,beanName=giraffeService&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Spring容器初始化完毕&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=====================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从容器中获取Bean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;giraffe Name=李光洙&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=====================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用preDestroy注解标注的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;执行DisposableBean接口的destroy方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;执行配置的destroy-method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Spring容器关闭&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.journaldev.com/2637/spring-bean-life-cycle#comment-35644&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;life cycle management of a spring bean&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javabeat.net/life-cycle-management-of-a-spring-bean/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Bean Life Cycle&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Spring-Bean的生命周期&quot;&gt;&lt;a href=&quot;#Spring-Bean的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean的生命周期&quot;&gt;&lt;/a&gt;Spring Bean的生命周期&lt;/h3&gt;&lt;p&gt;先来看看，Spring在Bean从创建到销毁的生命周期中可能做得事情。&lt;/p&gt;
&lt;h4 id=&quot;initialization-和-destroy&quot;&gt;&lt;a href=&quot;#initialization-和-destroy&quot; class=&quot;headerlink&quot; title=&quot;initialization 和 destroy&quot;&gt;&lt;/a&gt;initialization 和 destroy&lt;/h4&gt;&lt;p&gt;有时我们需要在Bean属性值set好之后和Bean销毁之前做一些事情，比如检查Bean中某个属性是否被正常的设置好值了。Spring框架提供了多种方法让我们可以在Spring Bean的生命周期中执行initialization和pre-destroy方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.实现InitializingBean和DisposableBean接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这两个接口都只包含一个方法。通过实现InitializingBean接口的afterPropertiesSet()方法可以在Bean属性值设置好之后做一些操作，实现DisposableBean接口的destroy()方法可以在销毁Bean之前做一些操作。&lt;/p&gt;
&lt;p&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InitializingBean&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;DisposableBean&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行InitializingBean接口的afterPropertiesSet方法&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行DisposableBean接口的destroy方法&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种方法比较简单，但是不建议使用。因为这样会将Bean的实现和Spring框架耦合在一起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.在bean的配置文件中指定init-method和destroy-method方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring允许我们创建自己的init方法和destroy方法，只要在Bean的配置文件中指定init-method和destroy-method的值就可以在Bean初始化时和销毁之前执行一些操作。&lt;br&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过&amp;lt;bean&amp;gt;的destroy-method属性指定的销毁方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroyMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行配置的destroy-method&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过&amp;lt;bean&amp;gt;的init-method属性指定的初始化方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行配置的init-method&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置文件中的配置：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;giraffeService&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.giraffe.spring.service.GiraffeService&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;init-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;initMethod&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;destroy-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;destroyMethod&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是自定义的init-method和post-method方法可以抛异常但是不能有参数。&lt;br&gt;这种方式比较推荐，因为可以自己创建方法，无需将Bean的实现直接依赖于spring的框架。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.使用@PostConstruct和@PreDestroy注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了xml配置的方式，Spring也支持用&lt;code&gt;@PostConstruct&lt;/code&gt;和 &lt;code&gt;@PreDestroy&lt;/code&gt;注解来指定init和destroy方法。这两个注解均在&lt;code&gt;javax.annotation&lt;/code&gt;包中。&lt;br&gt;为了注解可以生效，需要在配置文件中定义&lt;code&gt;org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&lt;/code&gt;或&lt;code&gt;context:annotation-config&lt;/code&gt;&lt;br&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@PostConstruct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initPostConstruct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行PostConstruct注解标注的方法&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@PreDestroy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;preDestroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行preDestroy注解标注的方法&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置文件:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;实现-Aware接口-在Bean中使用Spring框架的一些对象&quot;&gt;&lt;a href=&quot;#实现-Aware接口-在Bean中使用Spring框架的一些对象&quot; class=&quot;headerlink&quot; title=&quot;实现*Aware接口 在Bean中使用Spring框架的一些对象&quot;&gt;&lt;/a&gt;实现*Aware接口 在Bean中使用Spring框架的一些对象&lt;/h4&gt;&lt;p&gt;有些时候我们需要在Bean的初始化中使用Spring框架自身的一些对象来执行一些操作，比如获取ServletContext的一些参数，获取ApplicaitionContext中的BeanDefinition的名字，获取Bean在容器中的名字等等。为了让Bean可以获取到框架自身的一些对象，Spring提供了一组名为*Aware的接口。&lt;br&gt;这些接口均继承于&lt;code&gt;org.springframework.beans.factory.Aware&lt;/code&gt;标记接口，并提供一个将由Bean实现的set*方法,Spring通过基于setter的依赖注入方式使相应的对象可以被Bean使用。&lt;br&gt;网上说，这些接口是利用观察者模式实现的，类似于servlet listeners，目前还不明白，不过这也不在本文的讨论范围内。&lt;br&gt;介绍一些重要的Aware接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ApplicationContextAware: 获得ApplicationContext对象,可以用来获取所有Bean definition的名字。&lt;/li&gt;
&lt;li&gt;BeanFactoryAware:获得BeanFactory对象，可以用来检测Bean的作用域。&lt;/li&gt;
&lt;li&gt;BeanNameAware:获得Bean在配置文件中定义的名字。&lt;/li&gt;
&lt;li&gt;ResourceLoaderAware:获得ResourceLoader对象，可以获得classpath中某个文件。&lt;/li&gt;
&lt;li&gt;ServletContextAware:在一个MVC应用中可以获取ServletContext对象，可以读取context中的参数。&lt;/li&gt;
&lt;li&gt;ServletConfigAware在一个MVC应用中可以获取ServletConfig对象，可以读取config中的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🌰如下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt;   &lt;span class=&quot;title&quot;&gt;ApplicationContextAware&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;ApplicationEventPublisherAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;BeanClassLoaderAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;BeanFactoryAware&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;BeanNameAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;EnvironmentAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ImportAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ResourceLoaderAware&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBeanClassLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ClassLoader classLoader)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setBeanClassLoader,ClassLoader Name = &quot;&lt;/span&gt; + classLoader.getClass().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setBeanFactory,setBeanFactory:: giraffe bean singleton=&quot;&lt;/span&gt; +  beanFactory.isSingleton(&lt;span class=&quot;string&quot;&gt;&quot;giraffeService&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBeanName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setBeanName:: Bean Name defined in context=&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setApplicationContext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setApplicationContext:: Bean Definition Names=&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + Arrays.toString(applicationContext.getBeanDefinitionNames()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setApplicationEventPublisher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ApplicationEventPublisher applicationEventPublisher)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setApplicationEventPublisher&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setEnvironment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Environment environment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setEnvironment&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setResourceLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ResourceLoader resourceLoader)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Resource resource = resourceLoader.getResource(&lt;span class=&quot;string&quot;&gt;&quot;classpath:spring-beans.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setResourceLoader:: Resource File Name=&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + resource.getFilename());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setImportMetadata&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(AnnotationMetadata annotationMetadata)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setImportMetadata&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;BeanPostProcessor&quot;&gt;&lt;a href=&quot;#BeanPostProcessor&quot; class=&quot;headerlink&quot; title=&quot;BeanPostProcessor&quot;&gt;&lt;/a&gt;BeanPostProcessor&lt;/h4&gt;&lt;p&gt;上面的*Aware接口是针对某个实现这些接口的Bean定制初始化的过程，&lt;br&gt;Spring同样可以针对容器中的所有Bean，或者某些Bean定制初始化过程，只需提供一个实现BeanPostProcessor接口的类即可。 该接口中包含两个方法，postProcessBeforeInitialization和postProcessAfterInitialization。 postProcessBeforeInitialization方法会在容器中的Bean初始化之前执行， postProcessAfterInitialization方法在容器中的Bean初始化之后执行。&lt;br&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomerBeanPostProcessor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行BeanPostProcessor的postProcessBeforeInitialization方法,beanName=&quot;&lt;/span&gt; + beanName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行BeanPostProcessor的postProcessAfterInitialization方法,beanName=&quot;&lt;/span&gt; + beanName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要将BeanPostProcessor的Bean像其他Bean一样定义在配置文件中&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.giraffe.spring.service.CustomerBeanPostProcessor&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;所以。。。结合第一节控制台输出的内容，Spring Bean的生命周期是这样纸的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bean容器找到配置文件中Spring Bean的定义。&lt;/li&gt;
&lt;li&gt;Bean容器利用Java Reflection API创建一个Bean的实例。&lt;/li&gt;
&lt;li&gt;如果涉及到一些属性值 利用set方法设置一些属性值。&lt;/li&gt;
&lt;li&gt;如果Bean实现了BeanNameAware接口，调用setBeanName()方法，传入Bean的名字。&lt;/li&gt;
&lt;li&gt;如果Bean实现了BeanClassLoaderAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。&lt;/li&gt;
&lt;li&gt;如果Bean实现了BeanFactoryAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。&lt;/li&gt;
&lt;li&gt;与上面的类似，如果实现了其他*Aware接口，就调用相应的方法。&lt;/li&gt;
&lt;li&gt;如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessBeforeInitialization()方法&lt;/li&gt;
&lt;li&gt;如果Bean实现了InitializingBean接口，执行afterPropertiesSet()方法。&lt;/li&gt;
&lt;li&gt;如果Bean在配置文件中的定义包含&lt;code&gt;init-method&lt;/code&gt;属性，执行指定的方法。&lt;/li&gt;
&lt;li&gt;如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessAfterInitialization()方法&lt;/li&gt;
&lt;li&gt;当要销毁Bean的时候，如果Bean实现了DisposableBean接口，执行destroy()方法。&lt;/li&gt;
&lt;li&gt;当要销毁Bean的时候，如果Bean在配置文件中的定义包含&lt;code&gt;destroy-method&lt;/code&gt;属性，执行指定的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用图表示一下(&lt;a href=&quot;http://www.jianshu.com/p/d00539babca5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图来源&lt;/a&gt;)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/life.png&quot; alt=&quot;Spring BeanLifeCycle&quot;&gt;&lt;/p&gt;
&lt;p&gt;希望今晚能成功玩上pokemon go，好想抓精灵啊&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/li.jpg&quot; alt=&quot;啦啦啦&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论~~&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;智商捉鸡🐔，实在没办法一下子理解Spring IoC和AOP的实现原理，看的闹心也不太懂，所以。。。决定拆成小的不能在小的一个个问题，一点点啃。今天先来看看Spring中Bean的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yemengying.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Keep Going</title>
    <link href="http://yemengying.com/2016/07/03/keep-going/"/>
    <id>http://yemengying.com/2016/07/03/keep-going/</id>
    <published>2016-07-03T13:31:34.000Z</published>
    <updated>2016-09-21T08:41:01.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;睡前看了眼Analysis的数据，比以前进步太多，发上来纪念一下，为什么呢？因为我知道。。。。。。下周。。。。。它就会。。。。降下去了😱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;不说废话，直接上图。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/data.png&quot; alt=&quot;Analysis Data&quot;&gt;&lt;/p&gt;
&lt;p&gt;这些数据安抚了我因为中午火锅而受伤的弱小心灵。。。。。千万别吐槽这数据其实挺low的，我才不会告诉你们以前都超不过20的。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/sad.jpg&quot; alt=&quot;sad&quot;&gt;&lt;/p&gt;
&lt;p&gt;要是周六看到这个数据就好了，周末肯定会写写写，就不会荒废了。。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/cat.jpg&quot; alt=&quot;cat&quot;&gt;&lt;/p&gt;
&lt;p&gt;看到种说法，人分为自燃型，助燃型和阻燃型，嗯，我应该就属于助燃型的吧~~ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/liguangzhu09.jpg&quot; alt=&quot;wuli光洙&quot;&gt;&lt;/p&gt;
&lt;p&gt;Keep going &amp;amp; 碎觉。。。。😂&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;睡前看了眼Analysis的数据，比以前进步太多，发上来纪念一下，为什么呢？因为我知道。。。。。。下周。。。。。它就会。。。。降下去了😱。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【译】如何给变量取个简短且无歧义的名字</title>
    <link href="http://yemengying.com/2016/06/25/cleanCode4naming/"/>
    <id>http://yemengying.com/2016/06/25/cleanCode4naming/</id>
    <published>2016-06-25T08:23:39.000Z</published>
    <updated>2016-09-21T08:31:56.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;湾区日报上分享的一篇文章，文章的作者在Google设计Dart语言，就变量命名方面给了4点建议，文中也列出了好变量名、坏变量名的对比。不管作者的看法与你实际中的命名习惯是否一致，看完这篇文章，相信可以在变量命名方面有一些新的思考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;原文地址（康桑阿米达）：&lt;a href=&quot;http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;google做的最明智的规定之一就是严格执行code review。每一个改动在上线之前，都要经过两种形式的review。首先，团队中的人会进行常规的review，以确保代码完成了它应该完成的功能。&lt;/p&gt;
&lt;p&gt;接下来还会进行可读性层面的review。顾名思义，它是为了确保代码是可读性高的：是否利于理解和维护？是否符合该编程语言的一些惯例？是否有良好的文档？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dartlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dart&lt;/a&gt;已经开始google内部使用，所以我有幸参与了n次上面类型的code review。作为该语言的设计者，这是一项令人着迷的工作。我可以直接看到人们是如何使用Dart的，这对语言的进一步发展很有帮助。在reivew的同时，我也能够清晰的了解到那些比较常见的错误和使用最多的特性，我就好像是一个记录本地居民生活的人类学者。&lt;/p&gt;
&lt;p&gt;当然，上面说的与本文的主旨无关，这并不是一篇关于Dart的文章。本文主要是想讨论我看到过的一些令人抓狂的代码：&lt;strong&gt;这些代码的变量命名实在是太尼玛的长了。。。。。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的，变量的名称可以很短。回到当C语言中外部标识符仅需要由前六个字符来唯一的区分; 自动补全功能还没有发明; 每次按键盘都像在雪地上坡一样艰难的时候,长的命名就会带来很多问题。不过幸运的是，我们现在生活的世界太美好了，键盘操作变得如此简单。&lt;/p&gt;
&lt;p&gt;但我们现在似乎走上了另一个极端，我们不应该做海明威，但我们也无需成为田纳西·威廉斯。代码中使用了超长的命名会影响代码的清晰性。同时，超长的变量命名会造成换行，这会影响代码的结构，不易于阅读。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长的类名会使开发者不易声明该类型的变量。&lt;/li&gt;
&lt;li&gt;长的方法命名会使它变得晦涩难懂.&lt;/li&gt;
&lt;li&gt;长的变量命名不利于代码重用，导致过长的方法链。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我曾见过超过60个字符的变量命名,你甚至可以写首诗。别慌，下面我们来看看如何解决这一问题。&lt;/p&gt;
&lt;h3 id=&quot;选择一个好的命名&quot;&gt;&lt;a href=&quot;#选择一个好的命名&quot; class=&quot;headerlink&quot; title=&quot;选择一个好的命名&quot;&gt;&lt;/a&gt;选择一个好的命名&lt;/h3&gt;&lt;p&gt;命名有两个目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清晰：你要知道该命名与什么有关&lt;/li&gt;
&lt;li&gt;精确：你要知道该命名与什么无关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个命名完成上面两个目标之后，其余的字符就是多余的了。下面是我在开发时的一些命名原则：&lt;/p&gt;
&lt;h4 id=&quot;命名中无需含有表示变量或参数类型的单词&quot;&gt;&lt;a href=&quot;#命名中无需含有表示变量或参数类型的单词&quot; class=&quot;headerlink&quot; title=&quot;命名中无需含有表示变量或参数类型的单词&quot;&gt;&lt;/a&gt;命名中无需含有表示变量或参数类型的单词&lt;/h4&gt;&lt;p&gt;如果使用如Java之类的静态类型语言, 开发者通常知道变量的类型. 由于方法的实现一般都比较简短, 所以即便是在查看一个需要推断才知道类型的本地变量, 或者在code review等静态分析器不可用的情况下, 我们也可以通过多看很少的几行代码就能知道变量的类型.&lt;/p&gt;
&lt;p&gt;所以将类型说明加入到变量名中是多余的. 我们应该舍弃&lt;a href=&quot;https://en.wikipedia.org/wiki/Hungarian_notation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;匈牙利命名法&lt;/a&gt;，如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不好的:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String nameString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DockableModelessWindow dockableModelessWindow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改进:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DockableModelessWindow window;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;特别是对于集合来说，最好使用名词的复数形式来描述其内容, 而不是使用名词的单数形式来描述. 如果开发者更在乎集合中存储的内容, 那么变量命名应当反映这一点。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不好的:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;DateTime&amp;gt; holidayDateList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Map&amp;lt;Employee, Role&amp;gt; employeeRoleHashMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改进:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;DateTime&amp;gt; holidays;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Map&amp;lt;Employee, Role&amp;gt; employeeRoles;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一点也同样适用于方法的命名。方法名不需要描述它的参数及参数的类型–参数列表已经说明了这些。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不好的:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mergeTableCells(List&amp;lt;TableCell&amp;gt; cells)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sortEventsUsingComparator(List&amp;lt;Event&amp;gt; events,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Comparator&amp;lt;Event&amp;gt; comparator)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改进:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;merge(List&amp;lt;TableCell&amp;gt; cells)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sort(List&amp;lt;Event&amp;gt; events, Comparator&amp;lt;Event&amp;gt; comparator)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样可以帮助调用者更好的阅读：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mergeTableCells(tableCells);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sortEventsUsingComparator(events, comparator);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，这只是我个人的看法，欢迎大家一起讨论~~&lt;/p&gt;
&lt;h4 id=&quot;省略命名中不是用来消除歧义的单词&quot;&gt;&lt;a href=&quot;#省略命名中不是用来消除歧义的单词&quot; class=&quot;headerlink&quot; title=&quot;省略命名中不是用来消除歧义的单词&quot;&gt;&lt;/a&gt;省略命名中不是用来消除歧义的单词&lt;/h4&gt;&lt;p&gt;有些开发者倾向于将他们知道的有关这个变量的所有信息都塞到命名里。要记住，命名只是一个标识符：只是告诉你该变量是在哪定义的。并不是用来告诉阅读者所有他们想知道的有关这个对象的详细信息。这是定义应该做的事情的。 命名只是让你找到他的定义。&lt;/p&gt;
&lt;p&gt;当我看到一个叫&lt;code&gt;recentlyUpdatedAnnualSalesBid&lt;/code&gt;(最近更新的全年销售投标)的标识符时，我会问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在不是最近更新的全年销售投标么？&lt;/li&gt;
&lt;li&gt;存在没有被更新的最近的全年销售投标么？&lt;/li&gt;
&lt;li&gt;存在最近更新的非全年的销售投标么？&lt;/li&gt;
&lt;li&gt;存在最近更新的全年非销售的投标么？&lt;/li&gt;
&lt;li&gt;存在最近更新的全年销售非投标的东东吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面任何一个问题的回答是“不存在”，就意味着命名中引入了无用的单词。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不好的:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finalBattleMostDangerousBossMonster;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;weaklingFirstEncounterMonster;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改进:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boss;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;firstMonster;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，你可能会觉得这有一些过了。比如将第一个例子的标识符简化为&lt;code&gt;bid&lt;/code&gt;,会让人觉得有点模糊不清。但你可以放心大胆的这样做，如果在之后的开发中觉得该命名会造成冲突或不明确，可以添加些修饰词来完善它。反之，如果一开始就取了一个很长的命名，你是不可能在之后重新回来简化它的。&lt;/p&gt;
&lt;h4 id=&quot;省略命名中可以从上下文获取的单词&quot;&gt;&lt;a href=&quot;#省略命名中可以从上下文获取的单词&quot; class=&quot;headerlink&quot; title=&quot;省略命名中可以从上下文获取的单词&quot;&gt;&lt;/a&gt;省略命名中可以从上下文获取的单词&lt;/h4&gt;&lt;p&gt;我可以在文章中使用”我”，因为读者都知道这是一篇由Bob Nystrom所做的博客。我蠢萌的脸就挂在那，我无需不停的说我的名字。写代码也是一样，类中的方法/属性和方法中的变量，都是存在在上下文中的，无需重复。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _annualSaleRebate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;promoteHolidaySale&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Better:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _rebate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;promote&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上, 一个命名嵌套的层次越多, 它就有更多的相关的上下文，也就更简短。换句话说，一个变量的作用域越小，命名就越短。&lt;/p&gt;
&lt;h4 id=&quot;省略命名中无任何含义的单词&quot;&gt;&lt;a href=&quot;#省略命名中无任何含义的单词&quot; class=&quot;headerlink&quot; title=&quot;省略命名中无任何含义的单词&quot;&gt;&lt;/a&gt;省略命名中无任何含义的单词&lt;/h4&gt;&lt;p&gt;我常常在许多游戏开发中看到包含无任何含义的单词的命名，一些开发者喜欢在命名中添加一些看起来有点严肃的单词。我猜可能他们觉得这样做可以让他们的代码显得重要，或者说让他们觉得自己更重要。&lt;/p&gt;
&lt;p&gt;实际上，有一些词语并没有实际意义，只是一些套话。比如：data, state, amount, value, manager, engine, object, entity和instance。&lt;/p&gt;
&lt;p&gt;一个好的命名能够在阅读者的脑海中描画出一幅图画。而将某变量命名为”manager”并不能向读者传达任何有关该变量是做什么的信息. 它是用来做绩效评估的吗? 它是管理加薪的吗?&lt;/p&gt;
&lt;p&gt;在命名时可以问一下自己，把这个单词去掉含义是不是不变？如果是，那就果断把它剔除吧~~&lt;/p&gt;
&lt;h3 id=&quot;实际例子—华夫饼&quot;&gt;&lt;a href=&quot;#实际例子—华夫饼&quot; class=&quot;headerlink&quot; title=&quot;实际例子—华夫饼&quot;&gt;&lt;/a&gt;实际例子—华夫饼&lt;/h3&gt;&lt;p&gt;为了让大家了解以上的命名原则在实际中如何应用，这有个违法了以上所有原则的反例。这个例子和我实际上review过的一段代码一样令人心碎。。。。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 好吃的比利时华夫饼&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DeliciousBelgianWaffleObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnishDeliciousBelgianWaffleWithStrawberryList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      List&amp;lt;Strawberry&amp;gt; strawberryList)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先，通过参数列表我们可以知道方法是用来处理一个strawberry的列表，所以可以在方法命名中去掉：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DeliciousBelgianWaffleObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnishDeliciousBelgianWaffle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Strawberry&amp;gt; strawberries)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除非程序中还包含不好吃的比利时华夫饼或者其他国家的华夫饼，不然我们可以将这些无用的形容词去掉：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WaffleObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnishWaffle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Strawberry&amp;gt; strawberries)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;方法是包含在&lt;code&gt;WaffleObject&lt;/code&gt;类中的，所以方法名中无需Waffle的说明：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WaffleObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Strawberry&amp;gt; strawberries)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很明显它是一个对象，任何事物都是一个对象，这也就是传说中的“面向对象”的含义，所以命名中无需带有&lt;code&gt;Object&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Waffle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Strawberry&amp;gt; strawberries)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好了，这样看起来好多了。&lt;/p&gt;
&lt;p&gt;以上就是我总结的相当简洁的命名原则。可能有些人会觉得无需在命名上耗费太多的精力，但我认为命名是开发过程中最基本的任务之一。&lt;br&gt;————————————————–我是萌萌哒分界线—————————————————————-&lt;br&gt;感觉变量或者方法的命名，看似简单，实际很难，特别是想一个简洁明了可读性高的命名。自己也经常用什么&lt;code&gt;data&lt;/code&gt;,&lt;code&gt;xxxlist&lt;/code&gt;来命名，作者说的挺对的，前者没什么意义，后者又有点啰嗦。不过对于集合类型的变量，统一用名词复数命名容易混淆。举个例子对于Apple这个类来说，可能存在List&lt;apple&gt;和Map&lt;integer,apple&gt;两种集合类型的变量。个人觉得对List类型的变量可以采用名词复数来命名，Map类型的变量可以采用valueByKey格式来命名，比较容易区分。&lt;/integer,apple&gt;&lt;/apple&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论~~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;都看到这了，关注个公众号再走吧🙈&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/qrcode.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;湾区日报上分享的一篇文章，文章的作者在Google设计Dart语言，就变量命名方面给了4点建议，文中也列出了好变量名、坏变量名的对比。不管作者的看法与你实际中的命名习惯是否一致，看完这篇文章，相信可以在变量命名方面有一些新的思考。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Clean Code" scheme="http://yemengying.com/categories/Clean-Code/"/>
    
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>面试总结</title>
    <link href="http://yemengying.com/2016/06/05/interview/"/>
    <id>http://yemengying.com/2016/06/05/interview/</id>
    <published>2016-06-05T02:12:59.000Z</published>
    <updated>2016-09-21T08:33:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;从决定离职开始，前前后后面试了几家公司，把还能记得住的面试问题总结一下，帮小伙伴们查漏补缺吧，希望小伙伴们可以一举拿下offer。会简要写一下我觉得问题的关键点，不过有的可能并不是正确的答案，有的问题我到现在也还没明白。。。~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Java相关&quot;&gt;&lt;a href=&quot;#Java相关&quot; class=&quot;headerlink&quot; title=&quot;Java相关&quot;&gt;&lt;/a&gt;Java相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Java GC机制(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要从三个方面回答:GC是针对什么对象进行回收(可达性分析法)，什么时候开始GC(当新生代满了会进行Minor GC，升到老年代的对象大于老年代剩余空间时会进行Major GC)，GC做什么(新生代采用复制算法，老年代采用标记-清除或标记-整理算法)，感觉回答这些就差不多了，也可以补充一下可以调优的参数(-XX:newRatio,-Xms,-Xmx等等)。详细的可以看我另一篇博客(&lt;a href=&quot;http://yemengying.com/2016/05/13/jvm-GC/&quot;&gt;Java中的垃圾回收机制&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何线程安全的使用HashMap(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为Java程序员还是经常和HashMap打交道的，所以HashMap的一些原理还是搞搞清除比较好。这个问题感觉主要就是问HashMap，HashTable，ConcurrentHashMap，sychronizedMap的原理和区别。具体的可以看我另一篇博客(&lt;a href=&quot;http://yemengying.com/2016/05/07/threadsafe-hashmap/&quot;&gt;如何线程安全的使用HashMap&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashMap是如何解决冲突的(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实就是链接法，将索引值相同的元素存放到一个单链表里。但为了解决在频繁冲突时HashMap性能降低的问题，Java 8中做了一个小优化，在冲突的元素个数超过设定的值(默认为8)时，会使用平衡树来替代链表存储冲突的元素。具体的可以看我另一篇博客(&lt;a href=&quot;http://yemengying.com/2016/02/03/%E8%AF%91-Java%E4%B8%ADHashMap%E5%92%8CLinkedHashMap%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/&quot;&gt;Java 8中HashMap和LinkedHashMap如何解决冲突&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java创建对象有哪几种(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个问题还算好回答，大概有四种—new、工厂模式、反射和克隆，不过这个问题有可能衍生出关于设计模式，反射，深克隆，浅克隆等一系列问题。。。要做好准备~&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;https://www.gitbook.com/book/quanke/design-pattern-java/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计模式Java版&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/53eb4e16d00e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java反射详解&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/yxnchinahlj/archive/2010/09/20/1831615.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深克隆与浅克隆的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注解(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果简历中有提到过曾自定义过注解，还是了解清楚比较好。主要是了解在自定义注解时需要使用的两个主要的元注解@Retention和@Target。@Retention用来声明注解的保留策略，有CLASS，RUNTIME,SOURCE三种，分别表示注解保存在类文件，JVM运行时刻和源代码中。@Target用来声明注解可以被添加到哪些类型的元素上，如类型，方法和域等。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/cf-java-annotation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java注解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异常(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一道笔试题，代码如下，问返回值是什么。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Exception();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ret = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ret = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;主要的考点就是catch中的return在finally之后执行 但是会将return的值放到一个地方存起来，所以finally中的ret=2会执行，但返回值是1。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/hguisu/article/details/6155636&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Java异常处理机制&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.runoob.com/java/java-exceptions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java异常处理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;悲观锁和乐观锁区别，乐观锁适用于什么情况(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;悲观锁，就是总觉得有刁民想害朕，每次访问数据的时候都觉得会有别人修改它，所以每次拿数据时都会上锁，确保在自己使用的过程中不会被他人访问。乐观锁就是很单纯，心态好，所以每次拿数据的时候都不会上锁，只是在更新数据的时候去判断该数据是否被别人修改过。&lt;br&gt;大多数的关系数据库写入操作都是基于悲观锁，缺点在于如果持有锁的客户端运行的很慢，那么等待解锁的客户端被阻塞的时间就越长。Redis的事务是基于乐观锁的机制，不会在执行WATCH命令时对数据进行加锁，只是会在数据已经被其他客户端抢先修改了的情况下，通知执行WATCH命令的客户端。乐观锁适用于读多写少的情况，因为在写操作比较频繁的时候，会不断地retry，从而降低性能。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/1273&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于悲观锁和乐观锁的区别&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/guyufei/archive/2011/01/10/1931632.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;乐观锁和悲观锁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单例模式找错误(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;错误是没有将构造函数私有化，单例还是比较简单的，把它的饿汉式和懒汉式的两种实现方式看明白了就可以了。&lt;br&gt;&lt;a href=&quot;https://quanke.gitbooks.io/design-pattern-java/content/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-Singleton%20Pattern.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单例模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;__&lt;/p&gt;
&lt;h3 id=&quot;Spring相关&quot;&gt;&lt;a href=&quot;#Spring相关&quot; class=&quot;headerlink&quot; title=&quot;Spring相关&quot;&gt;&lt;/a&gt;Spring相关&lt;/h3&gt;&lt;p&gt;关于Spring的问题主要就是围绕着Ioc和AOP，它们真是Spring的核心啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring Bean的生命周期(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就不写我那么low的回答了，直接看参考资料吧。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/zrtqsk/p/3735273.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Bean的生命周期&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javarevisited.blogspot.jp/2011/09/spring-interview-questions-answers-j2ee.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Top 10 Spring Interview Questions Answers J2EE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring中用到的设计模式(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;工厂模式:IOC容器&lt;br&gt;代理模式:AOP&lt;br&gt;策略模式:在spring采取动态代理时，根据代理的类有无实现接口有JDK和CGLIB两种代理方式，就是采用策略模式实现的&lt;br&gt;单例模式:默认情况下spring中的bean只存在一个实例&lt;br&gt;只知道这四个。。。。&lt;br&gt;参考资料:&lt;br&gt;&lt;a href=&quot;https://premaseem.wordpress.com/2013/02/09/spring-design-patterns-used-in-java-spring-framework/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design Patterns Used in Java Spring Framework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲一讲Spring IoC和AOP(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IoC的核心是依赖反转，将创建对象和对象之间的依赖管理交给IoC容器来做，完成对象之间的解耦。&lt;br&gt;AOP主要是利用代理模式，把许多接口都要用的又和接口本身主要的业务逻辑无关的部分抽出来，写成一个切面，单独维护，比如权限验证。这样可以使接口符合“单一职责原则”，只关注主要的业务逻辑，也提高了代码的重用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AOP的应用场景(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;权限，日志，处理异常，事务等等，个人理解就是把许多接口都要用的又和接口本身主要的业务逻辑无关的部分抽出来，写成一个切面，单独维护，比如权限验证。这样可以使接口符合“单一职责原则”，只关注主要的业务逻辑，也提高了代码的重用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring中编码统一要如何做(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;配置一个拦截器就行了&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CharacterEncodingFilter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter-class&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;forceEncoding&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CharacterEncodingFilter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据库相关&quot;&gt;&lt;a href=&quot;#数据库相关&quot; class=&quot;headerlink&quot; title=&quot;数据库相关&quot;&gt;&lt;/a&gt;数据库相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Mysql索引的内部结构(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;B+树，三层，真实的数据存储在叶子节点&lt;br&gt;参考资料:&lt;br&gt;&lt;a href=&quot;http://tech.meituan.com/mysql-index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL索引原理及慢查询优化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果一个SQL执行时间比较长怎么办(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以利用pt-query-digest等工具分析慢查询日志，也可以用explain查看SQL的执行计划。具体可看我的另一篇博客&lt;a href=&quot;http://yemengying.com/2016/05/24/mysql-tuning/&quot;&gt;MySQL调优&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果一张表中有上千万条数据应该怎么做分页(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;肯定不能直接limit,offset，主要就是要想办法避免在数据量大时扫描过多的记录。具体可看我的另一篇博客&lt;a href=&quot;http://yemengying.com/2016/05/28/optimized-pagiantion-mysql/&quot;&gt;【译】优化MySQL中的分页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么样的列适合加索引，如果一个列的值只有1和2，那么它适合加索引么(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在where从句，group by从句，order by从句，on从句中出现的列&lt;/li&gt;
&lt;li&gt;索引的字段越小越好&lt;/li&gt;
&lt;li&gt;在建立联合索引时，离散度大的列放大联合索引的前面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有1和2不适合建索引&lt;/p&gt;
&lt;h3 id=&quot;Redis相关&quot;&gt;&lt;a href=&quot;#Redis相关&quot; class=&quot;headerlink&quot; title=&quot;Redis相关&quot;&gt;&lt;/a&gt;Redis相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Redis提供哪几种数据结构(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一共有5种，字符串，散列，列表，集合，有序集合。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.redis.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis中文官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis支持集群么，从哪个版本开始支持集群的(重要程度:★★☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持集群，从3.0版本开始。当然面试时我也没记住版本。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis集群中，如何将一个对象映射到对应的缓存服务器(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般就是hash%N,就是用对象的hash值对缓存服务器的个数取余&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接上个问题，缓存集群中如果新增一台服务器，怎么才能不影响大部分缓存数据的命中？(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实就是一致性Hash算法。以前有看过，可惜面试的时候脑袋就空了，只记得一个环，果然还是要实践啊。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://blog.plasmaconduit.com/consistent-hashing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Consistent Hashing&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/cywosp/article/details/23397179&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;五分钟理解一致性哈希算法(consistent hashing)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目中具体是怎样使用Redis的(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据实际情况回答吧。。。。我是主要做权限控制时用到了Redis，将用户Id和权限Code拼接在一起作为一个key，放到Redis的集合中，在验证某一用户是否有指定权限时，只需验证集合中是否有用户Id和权限Code拼接的key即可&lt;/p&gt;
&lt;h3 id=&quot;算法相关&quot;&gt;&lt;a href=&quot;#算法相关&quot; class=&quot;headerlink&quot; title=&quot;算法相关&quot;&gt;&lt;/a&gt;算法相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;判断一个数字是否为快乐数字(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;leetcode第202题&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/happy-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给定一个乱序数组和一个目标数字 找到和为这个数字的两个数字 时间复杂度是多少(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;leetcode第一题&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/two-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何判断一个链表有没有环(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用快慢指针&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除字符串中的空格 只留一个(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个比较简单。。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二叉树层序遍历(重要程度:★★☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用队列就可以了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地铁票价是如何计算的(重要程度:★★☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不知道正确答案，感觉是图的最短路径算法相关的。&lt;/p&gt;
&lt;h3 id=&quot;Elasticsearch相关&quot;&gt;&lt;a href=&quot;#Elasticsearch相关&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch相关&quot;&gt;&lt;/a&gt;Elasticsearch相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;为什么要用Elasticsearch(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实对Es的了解还是比较少的，因为没做多久就去写坑爹代理商了😖。个人觉得项目中用Es的原因一是可以做分词，二是Es中采用的是倒排索引所以性能比较好，三是Es是个分布式的搜索服务，对各个节点的配置还是很简单方便的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elasticsearch中的数据来源是什么，如何做同步(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据是来自其他部门的数据库，会在一开始写python脚本做全量更新，之后利用RabbitMQ做增量更新，就是数据更改之后，数据提供方将更改的数据插入到指定消息队列，由对应的消费者索引到Es中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接上个问题，利用消息队列是会对对方代码造成侵入的，还有没有别的方式(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还可以读MySQL的binlog&lt;/p&gt;
&lt;h3 id=&quot;发散思维的题&quot;&gt;&lt;a href=&quot;#发散思维的题&quot; class=&quot;headerlink&quot; title=&quot;发散思维的题&quot;&gt;&lt;/a&gt;发散思维的题&lt;/h3&gt;&lt;p&gt;以下题都是没有正确答案的，不知道是想考思维，还是压力面试，就只写题目，不写回答了。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;画一下心中房树人的关系(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;给你一块地建房如何规划(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;估计二号线有几辆车在运行(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Thrift通信协议(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个问题被问了两遍，然而现在还是不知道。。。什么东西都不能停留在只会用的阶段啊~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git相关(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一些git相关的问题，比如如何做分支管理(git flow)，rebase和merge的区别(&lt;a href=&quot;http://blog.isming.me/2014/09/26/git-rebase-merge/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;merge操作会生成一个新的节点&lt;/a&gt;)等等。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何学习一门新技术(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;google+官网+stackoverflow+github&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比较爱逛的网站和爱看的书(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据实际情况回答吧。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;了不了解微服务(重要程度:★★☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单了解过。。。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/546ef242b6a3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于微服务的软件架构模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;针对简历中的项目问一些问题(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是根据简历上的项目问一些东西，比如权限控制是怎么做的，有没有碰到过比较难解决的问题之类的，不具体列举了，只要简历上的内容是真实的基本都没啥问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要离职(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;被问了n遍，挺不好回答的一个问题，毕竟不算实习期工作还没满一年，这个时候跳槽很容易让人觉得不安稳。。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对公司还有什么问题(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本每轮面试结束都会问的一个问题，一开始也没当回事，直到有家公司居然挂在四面的这个问题上，我也是蛮醉的😂，果然言多必失啊🌝。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在***公司最大的收获是什么(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于我来说，觉得最大的收获就是对企业级的应用有了一个大致的了解，企业里的项目不像学校的课程作业，只要jdbc连接数据库完成功能就可以了，企业的项目要考虑很多东西，比如说为了提高可用性，要部署在多台服务器上，用nginx做负载均衡，还有就是用缓存，异步之类来提高接口性能。然后，也是第一次接触到SOA，这种面向服务的架构。也了解到一个好的应用，除了开发本身，一些自动化发布系统和监控系统也是必不可少的。当然，还认识了一群三观合的小伙伴~~~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试真真是件很心累的事情，每次面完都感觉被拔了层皮，希望两年内不要在面试了😂。后天就要入职了，想想还有点小紧张呢，去看学叔推荐的美剧压压惊。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;都看到这了，关注个公众号再走吧🙈&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/qrcode.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从决定离职开始，前前后后面试了几家公司，把还能记得住的面试问题总结一下，帮小伙伴们查漏补缺吧，希望小伙伴们可以一举拿下offer。会简要写一下我觉得问题的关键点，不过有的可能并不是正确的答案，有的问题我到现在也还没明白。。。~~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【译】优化MySQL中的分页</title>
    <link href="http://yemengying.com/2016/05/28/optimized-pagiantion-mysql/"/>
    <id>http://yemengying.com/2016/05/28/optimized-pagiantion-mysql/</id>
    <published>2016-05-28T01:45:42.000Z</published>
    <updated>2016-09-21T08:35:11.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;一道面试的问题，当MySQL表中有数据量很大的时候如何做分页。。。。当时只知道在数据量很大的时候可以分表，但不知道不分表时可以怎么做。。。。唉，谁让代理商就那么几条数据，一个简单的limit，offset就完全hold住了(捂脸🙈)。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;翻译一篇关于优化MySQL中的分页的文章，原文地址：&lt;a href=&quot;http://www.xarg.org/2011/10/optimized-pagination-using-mysql/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optimized Pagination using MySQL&lt;/a&gt;，谢谢，3Q，康桑阿米达~~~&lt;/p&gt;
&lt;p&gt;很多应用往往只展示最新或最热门的几条记录，但为了旧记录仍然可访问，所以就需要个分页的导航栏。然而，如何通过MySQL更好的实现分页，始终是比较令人头疼的问题。虽然没有拿来就能用的解决办法，但了解数据库的底层或多或少有助于优化分页查询。&lt;br&gt;我们先从一个常用但性能很差的查询来看一看。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个查询耗时0.00sec。So，这个查询有什么问题呢？实际上，这个查询语句和参数都没有问题，因为它用到了下面表的主键，而且只读取15条记录。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; city (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  city &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;真正的问题在于offset(分页偏移量)很大的时候，像下面这样：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的查询在有2M行记录时需要0.22sec，通过EXPLAIN查看SQL的执行计划可以发现该SQL检索了100015行，但最后只需要15行。大的分页偏移量会增加使用的数据，MySQL会将大量最终不会使用的数据加载到内存中。就算我们假设大部分网站的用户只访问前几页数据，但少量的大的分页偏移量的请求也会对整个系统造成危害。Facebook意识到了这一点，但Facebook并没有为了每秒可以处理更多的请求而去优化数据库，而是将重心放在将&lt;a href=&quot;http://highscalability.com/blog/2010/11/4/facebook-at-13-million-queries-per-second-recommends-minimiz.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;请求响应时间的方差变小&lt;/a&gt;。&lt;br&gt;对于分页请求，还有一个信息也很重要，就是总共的记录数。我们可以通过下面的查询很容易的获取总的记录数。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COUNT&lt;/span&gt;(*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而，上面的SQL在采用InnoDB为存储引擎时需要耗费9.28sec。一个不正确的优化是采用&lt;code&gt;SQL_CALC_FOUND_ROWS&lt;/code&gt;,&lt;code&gt;SQL_CALC_FOUND_ROWS&lt;/code&gt;可以在能够在分页查询时事先准备好符合条件的记录数，随后只要执行一句&lt;code&gt;select FOUND_ROWS();&lt;/code&gt; 就能获得总记录数。但是在大多数情况下，查询语句简短并不意味着性能的提高。不幸的是，这种分页查询方式在许多主流框架中都有用到，下面看看这个语句的查询性能。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SQL_CALC_FOUND_ROWS&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个语句耗时20.02sec，是上一个的两倍。事实证明使用&lt;code&gt;SQL_CALC_FOUND_ROWS&lt;/code&gt;做分页是很糟糕的想法。&lt;br&gt;下面来看看到底如何优化。文章分为两部分，第一部分是如何获取记录的总数目，第二部分是获取真正的记录。&lt;/p&gt;
&lt;h3 id=&quot;高效的计算行数&quot;&gt;&lt;a href=&quot;#高效的计算行数&quot; class=&quot;headerlink&quot; title=&quot;高效的计算行数&quot;&gt;&lt;/a&gt;高效的计算行数&lt;/h3&gt;&lt;p&gt;如果采用的引擎是MyISAM，可以直接执行COUNT(*)去获取行数即可。相似的，在堆表中也会将行数存储到表的元信息中。但如果引擎是InnoDB情况就会复杂一些，因为InnoDB不保存表的具体行数。&lt;br&gt;我们可以将行数缓存起来，然后可以通过一个守护进程定期更新或者用户的某些操作导致缓存失效时，执行下面的语句：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COUNT&lt;/span&gt;(*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt;(PRIMARY);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取记录&quot;&gt;&lt;a href=&quot;#获取记录&quot; class=&quot;headerlink&quot; title=&quot;获取记录&quot;&gt;&lt;/a&gt;获取记录&lt;/h3&gt;&lt;p&gt;下面进入这篇文章最重要的部分，获取分页要展示的记录。上面已经说过了，大的偏移量会影响性能，所以我们要重写查询语句。为了演示，我们创建一个新的表“news”，按照时事性排序(最新发布的在最前面)，实现一个高性能的分页。为了简单，我们就假设最新发布的新闻的Id也是最大的。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; news(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UNSIGNED&lt;/span&gt; PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   title &lt;span class=&quot;built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个比较高效的方式是基于用户展示的最后一个新闻Id。查询下一页的语句如下，需要传入当前页面展示的最后一个Id。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt; $last_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; $perpage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查询上一页的语句类似，只不过需要传入当前页的第一个Id，并且要逆序。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;gt; $last_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ASC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; $perpage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的查询方式适合实现简易的分页，即不显示具体的页数导航，只显示“上一页”和“下一页”，例如博客中页脚显示“上一页”，“下一页”的按钮。但如果要实现真正的页面导航还是很难的,下面看看另一种方式。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, ((@cnt:= @cnt + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + $perpage - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) % $perpage cnt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; @cnt:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)T&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt; $last_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; $perpage * $buttons&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过上面的语句可以为每一个分页的按钮计算出一个offset对应的id。这种方法还有一个好处。假设，网站上正在发布一片新的文章，那么所有文章的位置都会往后移一位，所以如果用户在发布文章时换页，那么他会看见一篇文章两次。如果固定了每个按钮的offset Id，这个问题就迎刃而解了。Mark Callaghan发表过一篇类似的&lt;a href=&quot;http://www.facebook.com/note.php?note_id=206034210932&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客&lt;/a&gt;，利用了组合索引和两个位置变量，但是基本思想是一致的。&lt;br&gt;如果表中的记录很少被删除、修改，还可以将记录对应的页码存储到表中，并在该列上创建合适的索引。采用这种方式，当新增一个记录的时候，需要执行下面的查询重新生成对应的页号。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; @p:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;UPDATE&lt;/span&gt; news &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; page=&lt;span class=&quot;keyword&quot;&gt;CEIL&lt;/span&gt;((@p:= @p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / $perpage) &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，也可以新增一个专用于分页的表，可以用个后台程序来维护。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;UPDATE&lt;/span&gt; pagination T&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;CEIL&lt;/span&gt;((@p:= @p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / $perpage) page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; C.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = T.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; T.page = C.page;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在想获取任意一页的元素就很简单了：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; pagination B &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; A.&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=B.&lt;span class=&quot;keyword&quot;&gt;ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; page=$&lt;span class=&quot;keyword&quot;&gt;offset&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有另外一种与上种方法比较相似的方法来做分页，这种方式比较试用于数据集相对小，并且没有可用的索引的情况下—比如处理搜索结果时。在一个普通的服务器上执行下面的查询，当有2M条记录时，要耗费2sec左右。这种方式比较简单，创建一个用来存储所有Id的临时表即可(这也是最耗费性能的地方)。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TEMPORARY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; _tmp (&lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SORT&lt;/span&gt;(random))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;FLOOR&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;RAND&lt;/span&gt;() * &lt;span class=&quot;number&quot;&gt;0x8000000&lt;/span&gt;) random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; _tmp &lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;OFFSET&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UNSIGNED&lt;/span&gt; PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; AUTO_INCREMENT, &lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SORT&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; random;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来就可以向下面一样执行分页查询了。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; _tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;OFFSET&lt;/span&gt; &amp;gt;= $&lt;span class=&quot;keyword&quot;&gt;offset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;OFFSET&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; $perpage;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;——————————————–俺只是个分割线———————————————————-&lt;br&gt;简单来说，对于分页的优化就是。。。避免数据量大时扫描过多的记录。&lt;br&gt;博客比较长，所以翻译的有些粗糙。。。，之后会在好好检查一遍的。在自己做测试时，有些查询时间与作者有点不一致，不过作者这篇博客是写于2011年的，so~不要在意具体数据，领会精神吧~~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;国际惯例，wuli光洙结尾~~&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/liguangzhu06.gif&quot; alt=&quot;李光洙&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一道面试的问题，当MySQL表中有数据量很大的时候如何做分页。。。。当时只知道在数据量很大的时候可以分表，但不知道不分表时可以怎么做。。。。唉，谁让代理商就那么几条数据，一个简单的limit，offset就完全hold住了(捂脸🙈)。。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yemengying.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yemengying.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL调优</title>
    <link href="http://yemengying.com/2016/05/24/mysql-tuning/"/>
    <id>http://yemengying.com/2016/05/24/mysql-tuning/</id>
    <published>2016-05-24T13:16:33.000Z</published>
    <updated>2016-09-21T08:34:58.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;啦啦啦，啦啦啦，我是卖报的小行家~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先分享个脑洞打开的mv，coldplay新单up&amp;amp;up，看看会飞的海龟🐢，一点也不精彩，就看了30多遍而已😂。&lt;/p&gt;
&lt;embed src=&quot;http://player.video.qiyi.com/977853bfe26ef11b25e524a983e72c30/0/0/w_19rt2btvq9.swf-albumId=5831552909-tvId=5831552909-isPurchase=0-cnId=5&quot; allowfullscreen=&quot;true&quot; quality=&quot;high&quot; width=&quot;480&quot; height=&quot;350&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot;&gt;


&lt;p&gt;———————————-我是预示画风转变分割线————————————————————————-&lt;br&gt;根据视频(&lt;a href=&quot;http://www.imooc.com/learn/194&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;)整理。&lt;/p&gt;
&lt;h3 id=&quot;为什么要进行优化？&quot;&gt;&lt;a href=&quot;#为什么要进行优化？&quot; class=&quot;headerlink&quot; title=&quot;为什么要进行优化？&quot;&gt;&lt;/a&gt;为什么要进行优化？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免由数据库链接timeout产生页面5xx的错误&lt;/li&gt;
&lt;li&gt;避免由于慢查询造成页面无法加载&lt;/li&gt;
&lt;li&gt;避免由于阻塞造成数据无法提交&lt;/li&gt;
&lt;li&gt;优化用户体验&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;可以从哪几个方面进行数据库优化？&quot;&gt;&lt;a href=&quot;#可以从哪几个方面进行数据库优化？&quot; class=&quot;headerlink&quot; title=&quot;可以从哪几个方面进行数据库优化？&quot;&gt;&lt;/a&gt;可以从哪几个方面进行数据库优化？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/mysql.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;从图中可以看出，SQL及索引的优化是最重要的，成本最低效果最好。&lt;br&gt;下面分别来看看如何优化SQL和索引。&lt;/p&gt;
&lt;h3 id=&quot;SQL优化&quot;&gt;&lt;a href=&quot;#SQL优化&quot; class=&quot;headerlink&quot; title=&quot;SQL优化&quot;&gt;&lt;/a&gt;SQL优化&lt;/h3&gt;&lt;h4 id=&quot;慢查询日志配置&quot;&gt;&lt;a href=&quot;#慢查询日志配置&quot; class=&quot;headerlink&quot; title=&quot;慢查询日志配置&quot;&gt;&lt;/a&gt;慢查询日志配置&lt;/h4&gt;&lt;p&gt;可以使用慢查询日志对有效率问题的SQL进行监控。下面是关于如何开启慢查询日志和慢查询日志的一些配置。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;show variables like &lt;span class=&quot;string&quot;&gt;&#39;slow_query_log&#39;&lt;/span&gt;; //查看是否开启了慢查询&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; global slow_query_&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;_file=&lt;span class=&quot;string&quot;&gt;&#39;/home/mysql/sql_log/mysql-slow.log&#39;&lt;/span&gt;; //设置慢查询日志的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; global &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;_queries_not_using_indexes=ON; //是否记录未使用索引的查询&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; global long_query_time=1;//设置记录超过多长时间的SQL语句&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; global slow_query_&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;=ON;//设置慢查询日志是否开启&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;慢查询日志的格式：&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/mysql2.png&quot; alt=&quot;慢查询日志的格式&quot;&gt;&lt;br&gt;详细看一下每一行都是什么意思。&lt;br&gt;查询的执行时间 Time:140606 12:30:17&lt;br&gt;执行SQL的主机信息 User@Host:root[root] @ localhost []&lt;br&gt;SQL的执行信息 Query_time: 0.000024 Lock_time:0.000000 Rows_sent:0 Rows_examined: 0&lt;br&gt;SQL执行时间 SET timestamp=1402389328&lt;br&gt;SQL的内容:show tables&lt;/p&gt;
&lt;h4 id=&quot;分析慢查日志的工具&quot;&gt;&lt;a href=&quot;#分析慢查日志的工具&quot; class=&quot;headerlink&quot; title=&quot;分析慢查日志的工具&quot;&gt;&lt;/a&gt;分析慢查日志的工具&lt;/h4&gt;&lt;p&gt;1.mysqldumpslow&lt;br&gt;可以使用MySQL自带的慢查询分析工具&lt;code&gt;mysqldumpslow&lt;/code&gt;，可以通过&lt;code&gt;mysqldumpslow -h&lt;/code&gt;来查看具体的使用方法。&lt;br&gt;eg:mysqldumpslow -t 3 /path/to/mysql-slow-query.log | more&lt;br&gt;上面的命令会列出查询时间top 3的SQL语句，具体格式如下图，会列出SQL执行的次数，SQL来执行的时间，锁定的时间，发送的函数，由谁在哪个服务器上执行的和具体的SQL内容。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/mysql3.png&quot; alt=&quot;mysqldumpslow格式&quot;&gt;&lt;br&gt;mysqldumpslow是比较常用的慢查询日志分析工具，但是分析结果包含的信息比较少，对于SQL优化来说可能还不太够。下面看看另一种分析工具。&lt;/p&gt;
&lt;p&gt;2.pt-query-digest&lt;br&gt;&lt;code&gt;pt-query-digest&lt;/code&gt;支持将分析结果保存到文件或数据表中。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输出到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pt-query-digest slow.log &amp;gt; slow_log.report&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出到数据库表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pt-query-digest slow.log -review \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h=127.0.0.1,D=test,p=root,P=3306,u=root,t=query_review \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--creat-reviewtable \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--review-history t=hostname_slow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;pt-query-digest --help&lt;/code&gt;可以查看具体的使用方式。&lt;br&gt;eg: pt-query-digest /home/mysql/data/mysql-slow.log | more&lt;br&gt;通过上面的命令，会列出慢查询日志的分析结果，分为三个部分。&lt;br&gt;第一部分中包含日志中有多少个SQL，多少个不同的SQL，SQL执行的时间范围，总的执行时间，最短的执行时间，最长的执行时间，平均执行时间，总锁定时间，总发送行数，总检索行数等等。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/pt1.png&quot; alt=&quot;pt-query-digest格式&quot;&gt;&lt;br&gt;第二部分包含关于  表和执行语句的统计，可以看到哪个表的哪个操作的实行时间是最多的，也可以看到对应的响应时间和调用次数。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/pt2.png&quot; alt=&quot;pt-query-digest格式&quot;&gt;&lt;br&gt;第三部分就是具体的SQL的分析，包括对应语句执行时间，锁定时间，发送行数，检索行数等等。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/pt3.png&quot; alt=&quot;pt-query-digest格式&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;定位有问题的SQL&quot;&gt;&lt;a href=&quot;#定位有问题的SQL&quot; class=&quot;headerlink&quot; title=&quot;定位有问题的SQL&quot;&gt;&lt;/a&gt;定位有问题的SQL&lt;/h4&gt;&lt;p&gt;通过上面的慢查询日志分析我们可以定位需要优化的SQL,通常有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询次数多且每次查询占用时间长的SQL：通常为pt-query-digest分析的前几个查询。&lt;/li&gt;
&lt;li&gt;IO大的SQL：注意pt-query-digest分析中的Rows examine项&lt;/li&gt;
&lt;li&gt;未命中索引的SQL： 注意pt-query-digest分析中Rows examine和Rows Send的对比。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;通过Explain查询和分析SQL的执行计划&quot;&gt;&lt;a href=&quot;#通过Explain查询和分析SQL的执行计划&quot; class=&quot;headerlink&quot; title=&quot;通过Explain查询和分析SQL的执行计划&quot;&gt;&lt;/a&gt;通过Explain查询和分析SQL的执行计划&lt;/h4&gt;&lt;p&gt;可以通过Explain查询SQL的执行计划，例子如下：&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/explain.png&quot; alt=&quot;Explain&quot;&gt;&lt;br&gt;explain返回的各列的含义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;列&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;table&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;显示查询是关于哪个表的&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;type&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;很重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index和ALL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;possible_keys&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;显示可能应用在这张表中的索引。如果为空，没有可能应用的索引&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;key&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;实际使用的索引。如果为NULL，则没有使用索引&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;key_len&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;使用的索引的长度。在不损失精确性的情况下，长度越短越好&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ref&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;显示索引的哪一列被使用了&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;rows&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MYSQL认为必须检查的用来返回请求的行数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;extra&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;当这一列的值是Using filesort或Using temporary时，说明查询需要优化了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;索引优化&quot;&gt;&lt;a href=&quot;#索引优化&quot; class=&quot;headerlink&quot; title=&quot;索引优化&quot;&gt;&lt;/a&gt;索引优化&lt;/h3&gt;&lt;h4 id=&quot;如何选择合适的列来建立索引&quot;&gt;&lt;a href=&quot;#如何选择合适的列来建立索引&quot; class=&quot;headerlink&quot; title=&quot;如何选择合适的列来建立索引&quot;&gt;&lt;/a&gt;如何选择合适的列来建立索引&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在where从句，group by从句，order by从句，on从句中出现的列&lt;/li&gt;
&lt;li&gt;索引的字段越小越好&lt;/li&gt;
&lt;li&gt;在建立联合索引时，离散度大的列放大联合索引的前面&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;如何维护和优化索引&quot;&gt;&lt;a href=&quot;#如何维护和优化索引&quot; class=&quot;headerlink&quot; title=&quot;如何维护和优化索引&quot;&gt;&lt;/a&gt;如何维护和优化索引&lt;/h4&gt;&lt;p&gt;要避免重复及冗余索引，重复索引是指相同的列以相同的顺序建立的同类型的索引。冗余索引是指多个索引的前缀列相同，或是在联合索引中包含了主键的索引。&lt;br&gt;可以使用&lt;code&gt;pt-duplicate-key-checker&lt;/code&gt;工具可以检查重复及冗余索引。&lt;br&gt;同时还要注意及时删除由于业务变更不再使用的索引。目前MySQL中还没有记录索引的使用情况，但在PerconMuSQL和MariaDB中可以通过INDEX_STATISTICS表来查看哪些索引未使用，在MySQL中目前只能通过慢查询日志配合pt-index-usage工具来进行索引的使用情况的分析。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论~~&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;啦啦啦，啦啦啦，我是卖报的小行家~~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yemengying.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yemengying.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>谈谈破窗理论</title>
    <link href="http://yemengying.com/2016/05/15/broken-window-theory/"/>
    <id>http://yemengying.com/2016/05/15/broken-window-theory/</id>
    <published>2016-05-15T06:02:14.000Z</published>
    <updated>2016-09-21T08:31:27.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在湾区日报上看到篇关于破窗理论(Broken Window Theory)的&lt;a href=&quot;http://blog.codinghorror.com/the-broken-window-theory/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=ios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;，真是颇有感触，所以决定写篇博客，结合这几个月开发代理商网站的心(keng)路(die)历程,谈谈为何不能忽视一点点糟糕的代码或者不好的设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;破窗理论&quot;&gt;&lt;a href=&quot;#破窗理论&quot; class=&quot;headerlink&quot; title=&quot;破窗理论&quot;&gt;&lt;/a&gt;破窗理论&lt;/h3&gt;&lt;p&gt;先简单解释下什么是“破窗理论”，“破窗理论”是指：如果有人打坏了一幢建筑物的窗户玻璃，而这扇窗户又得不到及时的维修，别人就可能受到某些暗示性的纵容去打烂更多的窗户。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/broken-window.jpg&quot; alt=&quot;破窗理论&quot;&gt;&lt;br&gt;湾区日报上的文章中是这样描述破窗理论的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t leave “broken windows” (bad designs, wrong decisions, or poor code) unrepaired. Fix each one as soon as it is discovered. If there is insufficient time to fix it properly, then board it up. Perhaps you can comment out the offending code, or display a “Not Implemented” message, or substitute dummy data instead. Take some action to prevent further damage and to show that you’re on top of the situation.&lt;br&gt;We’ve seen clean, functional systems deteriorate pretty quickly once windows start breaking. There are other factors that can contribute to software rot, and we’ll touch on some of them elsewhere, but neglect accelerates the rot faster than any other factor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单翻译一下就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要放任“破窗户”(不好的设计，错误的决定或糟糕的代码)不管。要尽量在发现时立刻修复。如果没有足够的时间进行适当的修复，就先把它保留起来。可以把出问题的代码放到注释中，或是显示“未实现”消息，也可用虚拟数据加以替代。总之，要采取一些措施，防止进一步的恶化。表明局势尚在掌控之中。有许多整洁良好的系统在出现“破窗”之后立马崩溃。虽然促使软件崩溃的原因还有其他因素（我们将在其他地方接触到），但对“破窗”置之不理，肯定会更快地加速系统崩溃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;亲身感受&quot;&gt;&lt;a href=&quot;#亲身感受&quot; class=&quot;headerlink&quot; title=&quot;亲身感受&quot;&gt;&lt;/a&gt;亲身感受&lt;/h3&gt;&lt;p&gt;先说说背景，故事要从三个月前开始讲起了，当时刚刚转去搜索组做部门内部的搜索，组内总共3个人。本以为可以远离业务代码，专心技术，可万万没想到Elasticsearch的书还没焐热就被部门leader叫去开会，说要做一个代理商系统，很紧急，是公司P0级别的项目，全公司的资源都要给我们让路(事实证明只是画饼，因为现在连一个固定前端都没了)。其实这个项目一听就是个深坑，从头发到脚都是拒绝的。因为主数据（餐厅，活动，订单）全在别的部门，85%的功能都依赖于其他部门的接口(si不si很神奇)，所以做这个项目主要工作就是。。。。。通过SOA或者Thrift调别人的接口。不过即便知道是坑也没办法，只有搜索组刚刚成立比较闲，只能我们做-_-|||。当时部门leader的要求是封闭开发一周半，拿出个可用的版本就行，一定要快！！。所以我们搜索组的三个人加上从别的组借调的两个实习生再加上两个前端就搬去了小黑屋，开始了近两周的封闭开发。&lt;/p&gt;
&lt;p&gt;好了，背景聊完了，进入正题，聊聊代理商是怎么变得越来越难维护的。代理商的开发leader是个搜索大牛，但没做过Web开发，对Java Web开发并不是十分了解。因为部门leader要求快快快，所以将许多必要的步骤省略了。比如定义方法参数命名规范，定义api规范，代码review等等。。。每天就是划分下接口，每人开发几个接口，和前端定义接口文档，就开始开发提测了。讲真，其实所有人都是有责任的，可能是对这个项目一开始就很反感，有抵触心理，所以从内心就没打算好好做，一些觉得可以改进的地方也就得过且过了。后面的事实证明，当觉得设计或规范有不合理的时候，一定要及时提出来，不能忍，忍的后果就是一次一次降低自己的底线，然后亲手造就一个难维护的系统，到时候即便有心想重构也是心有余力不足了。&lt;/p&gt;
&lt;p&gt;公司项目就不贴实际代码了，简单举几个例子，看看开发前定义必要的规范是多么的重要。由于代理商没有事先规定api的定义要符合RESTFul的规范，所以项目中api的风格有两种，符合RESTFul的和不符合的。比如获取餐厅信息的api定义是&lt;code&gt;GET /restaurant/{id}&lt;/code&gt;，而创建餐厅的api定义是&lt;code&gt;POST /restaurant/create&lt;/code&gt;，so。。。如果后面的人想设计更新餐厅信息的api是&lt;code&gt;PUT /restaurant/{id}&lt;/code&gt;还是&lt;code&gt;PUT /restaurant/update&lt;/code&gt;呢，真是一脸懵逼。接口的命名就更是五花八门了，因为大家是来自不同组，而且也没有定义统一的命名的规范，比如：一个简单的获取信息，获取餐厅信息的接口是&lt;code&gt;getRestaurant&lt;/code&gt;,获取活动信息是&lt;code&gt;activityInfo&lt;/code&gt;,获取代理商信息接口是&lt;code&gt;getAgentDto&lt;/code&gt;，获取订单信息又变成了&lt;code&gt;getOrderData&lt;/code&gt;,so。。。谁能告诉我之后想添加个获取信息的接口到底该叫什么。。。估计只能看当时的心情随便取了。。。还有就是项目中存在大量重复代码，获取餐厅管理员信息基本上每个人都写了一遍，因为管理员的信息在获取餐厅，活动信息时都用的到，由于没有代码review，所以一开始大家也不知道，就各写各的，也是蛮醉的。&lt;/p&gt;
&lt;p&gt;上面的例子只是一点点，实际还有很多很多很多的槽点，都是泪啊。由于第一版本为了压缩工时(至今也不明白为啥要那么急。。。)就这样草草交工，导致后面的几个迭代开发也随之变得越来越随意，随意命名，随意定义api，缺乏junit测试，越来越不上心。听说代理商要移交给BD组，但估计情况也只会越来越糟，因为没人愿意去整理一坨坨糟糕的代码，只会在出现问题的时候，随意的打补丁。。。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;其实也没啥好总结的，一句话，以后一定要写干净，整洁的代码，注意规范，不能忽视一点点糟糕的代码或者设计对项目带来的负面影响。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎一起讨论~~&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在湾区日报上看到篇关于破窗理论(Broken Window Theory)的&lt;a href=&quot;http://blog.codinghorror.com/the-broken-window-theory/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=ios&quot;&gt;文章&lt;/a&gt;，真是颇有感触，所以决定写篇博客，结合这几个月开发代理商网站的心(keng)路(die)历程,谈谈为何不能忽视一点点糟糕的代码或者不好的设计。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【译】Java中的垃圾回收机制</title>
    <link href="http://yemengying.com/2016/05/13/jvm-GC/"/>
    <id>http://yemengying.com/2016/05/13/jvm-GC/</id>
    <published>2016-05-13T15:28:15.000Z</published>
    <updated>2016-09-21T08:34:03.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;感觉人生就是while(true){一个选择接着一个选择接着一个选择;},好怕自己一不小心就做了错误的决定啊😭。堵上全部人品,希望新公司技术氛围浓厚,有大牛带我,切拜🙊🙏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不扯有的没的了，翻译一篇关于垃圾回收(以下简称GC)机制的博客(&lt;a href=&quot;http://javarevisited.blogspot.com/2011/04/garbage-collection-in-java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;)。博客内容包括：Java中GC是如何工作的，常见的GC算法(比如:标记清除)，Java中不同的垃圾收集器(比如:serial)。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;关键字约定&quot;&gt;&lt;a href=&quot;#关键字约定&quot; class=&quot;headerlink&quot; title=&quot;关键字约定&quot;&gt;&lt;/a&gt;关键字约定&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Young generation –&amp;gt;新生代&lt;/li&gt;
&lt;li&gt;Tenured / Old Generation –&amp;gt;老年代&lt;/li&gt;
&lt;li&gt;Perm Area –&amp;gt;永久代&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;重要的东东&quot;&gt;&lt;a href=&quot;#重要的东东&quot; class=&quot;headerlink&quot; title=&quot;重要的东东&quot;&gt;&lt;/a&gt;重要的东东&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在Java中，对象实例都是在堆上创建。一些类信息，常量，静态变量等存储在方法区。堆和方法区都是线程共享的。&lt;/li&gt;
&lt;li&gt;GC机制是由JVM提供，用来清理需要清除的对象，回收堆内存。&lt;/li&gt;
&lt;li&gt;GC机制将Java程序员从内存管理中解放了出来，可以更关注于业务逻辑。&lt;/li&gt;
&lt;li&gt;在Java中，GC是由一个被称为垃圾回收器的守护线程执行的。&lt;/li&gt;
&lt;li&gt;在从内存回收一个对象之前会调用对象的finalize()方法。&lt;/li&gt;
&lt;li&gt;作为一个Java开发者不能强制JVM执行GC；GC的触发由JVM依据堆内存的大小来决定。&lt;/li&gt;
&lt;li&gt;System.gc()和Runtime.gc()会向JVM发送执行GC的请求，但是JVM不保证一定会执行GC。&lt;/li&gt;
&lt;li&gt;如果堆没有内存创建新的对象了，会抛出&lt;code&gt;OutOfMemoryError&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;GC针对什么对象？&quot;&gt;&lt;a href=&quot;#GC针对什么对象？&quot; class=&quot;headerlink&quot; title=&quot;GC针对什么对象？&quot;&gt;&lt;/a&gt;GC针对什么对象？&lt;/h3&gt;&lt;p&gt;了解GC机制的第一步就是理解什么样的对象会被回收。当一个对象通过一系列根对象(比如：静态属性引用的常量)都不可达时就会被回收。简而言之，当一个对象的所有引用都为null。循环依赖不算做引用，如果对象A有一个指向对象B的引用，对象B也有一个指向对象A的引用，除此之外，它们没有其他引用，那么对象A和对象B都、需要被回收(如下图,ObjA和ObjB需要被回收)。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/GC-Object.png&quot; alt=&quot;GC回收对象&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;堆内存是如何划分的？&quot;&gt;&lt;a href=&quot;#堆内存是如何划分的？&quot; class=&quot;headerlink&quot; title=&quot;堆内存是如何划分的？&quot;&gt;&lt;/a&gt;堆内存是如何划分的？&lt;/h3&gt;&lt;p&gt;Java中对象都在堆上创建。为了GC，堆内存分为三个部分，也可以说三代，分别称为新生代，老年代和永久代。其中新生代又进一步分为Eden区，Survivor 1区和Survivor 2区(如下图)。新创建的对象会分配在Eden区,在经历一次Minor GC后会被移到Survivor 1区，再经历一次Minor GC后会被移到Survivor 2区，直到升至老年代,需要注意的是，一些大对象(长字符串或数组)可能会直接存放到老年代。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/堆内存.png&quot; alt=&quot;堆内存&quot;&gt;&lt;br&gt;永久代有一些特殊，它用来存储类的元信息。对于GC是否发生在永久代有许多不同的看法，在我看来这取决于采用的JVM。大家可以通过创建大量的字符串来观察是发生了GC还是抛出了OutOfMemoryError。&lt;/p&gt;
&lt;h3 id=&quot;GC算法&quot;&gt;&lt;a href=&quot;#GC算法&quot; class=&quot;headerlink&quot; title=&quot;GC算法&quot;&gt;&lt;/a&gt;GC算法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;标记清除算法&lt;br&gt;分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。该算法的缺点是效率不高并且会产生不连续的内存碎片。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/sweep.jpg&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;复制算法&lt;br&gt;把内存空间划为两个区域，每次只使用其中一个区域。垃圾回收时，遍历当前使用区域，把正在使用中的对象复制到另外一个区域中。次算法每次只处理正在使用中的对象，因此复制成本比较小，同时复制过去以后还能进行相应的内存整理，不会出现“碎片”问题。优点：实现简单，运行高效。缺点：会浪费一定的内存。一般新生代采用这种算法。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/copy.jpg&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;标记整理算法&lt;br&gt;标记阶段与标记清除算法一样。但后续并不是直接对可回收的对象进行清理，而是让所有存活对象都想一端移动，然后清理。优点是不会造成内存碎片。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/compact.jpg&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Java中垃圾回收器的类型&quot;&gt;&lt;a href=&quot;#Java中垃圾回收器的类型&quot; class=&quot;headerlink&quot; title=&quot;Java中垃圾回收器的类型&quot;&gt;&lt;/a&gt;Java中垃圾回收器的类型&lt;/h3&gt;&lt;p&gt;Java提供多种类型的垃圾回收器。JVM中的垃圾收集一般都采用“分代收集”，不同的堆内存区域采用不同的收集算法，主要目的就是为了增加吞吐量或降低停顿时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serial收集器：新生代收集器，使用复制算法，使用一个线程进行GC，串行，其它工作线程暂停。&lt;/li&gt;
&lt;li&gt;ParNew收集器：新生代收集器，使用复制算法，Serial收集器的多线程版，用多个线程进行GC，并行，其它工作线程暂停。使用-XX:+UseParNewGC开关来控制使用ParNew+Serial Old收集器组合收集内存；使用-XX:ParallelGCThreads来设置执行内存回收的线程数。&lt;/li&gt;
&lt;li&gt;Parallel Scavenge 收集器：吞吐量优先的垃圾回收器，作用在新生代，使用复制算法，关注CPU吞吐量，即运行用户代码的时间/总时间。使用-XX:+UseParallelGC开关控制使用Parallel Scavenge+Serial Old收集器组合回收垃圾。&lt;/li&gt;
&lt;li&gt;Serial Old收集器：老年代收集器，单线程收集器，串行，使用标记整理算法，使用单线程进行GC，其它工作线程暂停。&lt;/li&gt;
&lt;li&gt;Parallel Old收集器：吞吐量优先的垃圾回收器，作用在老年代，多线程，并行，多线程机制与Parallel Scavenge差不错，使用标记整理算法，在Parallel Old执行时，仍然需要暂停其它线程。&lt;/li&gt;
&lt;li&gt;CMS（Concurrent Mark Sweep）收集器：老年代收集器，致力于获取最短回收停顿时间（即缩短垃圾回收的时间），使用标记清除算法，多线程，优点是并发收集（用户线程可以和GC线程同时工作），停顿小。使用-XX:+UseConcMarkSweepGC进行ParNew+CMS+Serial Old进行内存回收，优先使用ParNew+CMS（原因见Full GC和并发垃圾回收一节），当用户线程内存不足时，采用备用方案Serial Old收集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看&lt;a href=&quot;http://www.amazon.com/dp/0137142528/?tag=javamysqlanta-20&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Performance&lt;/a&gt;一书来获取更多关于GC调优的信息。&lt;/p&gt;
&lt;h3 id=&quot;与GC有关的JVM参数&quot;&gt;&lt;a href=&quot;#与GC有关的JVM参数&quot; class=&quot;headerlink&quot; title=&quot;与GC有关的JVM参数&quot;&gt;&lt;/a&gt;与GC有关的JVM参数&lt;/h3&gt;&lt;p&gt;做GC调优需要大量的实践，耐心和对项目的分析。我曾经参与过高容量，低延迟的电商系统，在开发中我们需要通过分析造成Full GC的原因来提高系统性能，在这个过程中我发现做GC的调优很大程度上依赖于对系统的分析，系统拥有怎样的对象以及他们的平均生命周期。&lt;br&gt;举个例子，如果一个应用大多是短生命周期的对象，那么应该确保Eden区足够大，这样可以减少Minor GC的次数。可以通过&lt;code&gt;-XX:NewRatio&lt;/code&gt;来控制新生代和老年代的比例，比如-XX:NewRatio=3代表新生代和老年代的比例为1：3。需要注意的是，扩大新生代的大小会减少老年代的大小，这会导致Major GC执行的更频繁，而Major GC可能会造成用户线程的停顿从而降低系统吞吐量。JVM中可以用NewSize和MaxNewSize参数来指定新生代内存最小和最大值，如果两个参数值一样，那么就相当于固定了新生代的大小。&lt;br&gt;个人建议，在做GC调优之前最好深入理解Java中GC机制，推荐阅读Sun Microsystems提供的有关GC的文档。这个&lt;a href=&quot;http://www.oracle.com/technetwork/java/gc-tuning-5-138395.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;可能会对理解GC机制提供一些帮助。下面的图列出了各个区可用的一些JVM参数。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/jvm-parameter.png&quot; alt=&quot;jvm参数&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Full-GC和并发垃圾回收&quot;&gt;&lt;a href=&quot;#Full-GC和并发垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;Full GC和并发垃圾回收&quot;&gt;&lt;/a&gt;Full GC和并发垃圾回收&lt;/h3&gt;&lt;p&gt;并发垃圾回收器的内存回收过程是与用户线程一起并发执行的。通常情况下，并发垃圾回收器可以在用户线程运行的情况下完成大部分的回收工作，所以应用停顿时间很短。&lt;br&gt;但由于并发垃圾回收时用户线程还在运行，所以会有新的垃圾不断产生。作为担保，如果在老年代内存都被占用之前，如果并发垃圾回收器还没结束工作，那么应用会暂停，在所有用户线程停止的情况下完成回收。这种情况称作Full GC，这意味着需要调整有关并发回收的参数了。&lt;br&gt;由于Full GC很影响应用的性能，要尽量避免或减少。特别是如果对于高容量低延迟的电商系统，要尽量避免在交易时间段发生Full GC。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;为了分代垃圾回收，Java堆内存分为3代：新生代，老年代和永久代。&lt;/li&gt;
&lt;li&gt;新的对象实例会优先分配在新生代，在经历几次Minor GC后(默认15次)，还存活的会被移至老年代(某些大对象会直接在老年代分配)。&lt;/li&gt;
&lt;li&gt;永久代是否执行GC，取决于采用的JVM。&lt;/li&gt;
&lt;li&gt;Minor GC发生在新生代，当Eden区没有足够空间时，会发起一次Minor GC，将Eden区中的存活对象移至Survivor区。Major GC发生在老年代，当升到老年代的对象大于老年代剩余空间时会发生Major GC。&lt;/li&gt;
&lt;li&gt;发生Major GC时用户线程会暂停，会降低系统性能和吞吐量。&lt;/li&gt;
&lt;li&gt;JVM的参数-Xmx和-Xms用来设置Java堆内存的初始大小和最大值。依据个人经验这个值的比例最好是1:1或者1:1.5。比如，你可以将-Xmx和-Xms都设为1GB，或者-Xmx和-Xms设为1.2GB和1.8GB。&lt;/li&gt;
&lt;li&gt;Java中不能手动触发GC，但可以用不同的引用类来辅助垃圾回收器工作(比如：&lt;a href=&quot;http://javarevisited.blogspot.com/2014/03/difference-between-weakreference-vs-softreference-phantom-strong-reference-java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;弱引用或软引用&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上就是关于Java中GC的一些内容。通过这篇博客，我们可以知道堆内存是如何划分的；一个对象在没有任何强引用指向他或该对象通过根节点不可达时需要被垃圾回收器回收；当垃圾收集器意识到需要进行GC时会触发Minor GC或Major GC，是自动的，无法强制执行。&lt;/p&gt;
&lt;h3 id=&quot;参考文档-康桑阿米达&quot;&gt;&lt;a href=&quot;#参考文档-康桑阿米达&quot; class=&quot;headerlink&quot; title=&quot;参考文档(康桑阿米达~)&quot;&gt;&lt;/a&gt;参考文档(康桑阿米达~)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://icyfenix.iteye.com/blog/715301&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://icyfenix.iteye.com/blog/715301&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/zhguang/p/3257367.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/zhguang/p/3257367.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.cn/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-JVM%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E5%91%A8%E5%BF%97%E6%98%8E/dp/B00D2ID4PK/ref=sr_1_1?ie=UTF8&amp;amp;qid=1463192894&amp;amp;sr=8-1&amp;amp;keywords=%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《深入理解java虚拟机》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;————————————————其实我只是一条分割线———————————————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于永久代到底有没有GC还是很懵逼，很多地方看到的说法都不一致。欢迎指正错误，欢迎一起讨论~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按国际惯例，wuli光洙结尾~~&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/liguangzhu4.jpg&quot; alt=&quot;李光洙&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;感觉人生就是while(true){一个选择接着一个选择接着一个选择;},好怕自己一不小心就做了错误的决定啊😭。堵上全部人品,希望新公司技术氛围浓厚,有大牛带我,切拜🙊🙏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不扯有的没的了，翻译一篇关于垃圾回收(以下简称GC)机制的博客(&lt;a href=&quot;http://javarevisited.blogspot.com/2011/04/garbage-collection-in-java.html&quot;&gt;原文地址&lt;/a&gt;)。博客内容包括：Java中GC是如何工作的，常见的GC算法(比如:标记清除)，Java中不同的垃圾收集器(比如:serial)。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yemengying.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>如何线程安全的使用 HashMap</title>
    <link href="http://yemengying.com/2016/05/07/threadsafe-hashmap/"/>
    <id>http://yemengying.com/2016/05/07/threadsafe-hashmap/</id>
    <published>2016-05-07T09:21:06.000Z</published>
    <updated>2016-09-21T08:36:52.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这周真是发生了不少事，脑袋和心里一直都很乱，周二参加了一场面试，经历了笔试+3轮面试，周五正式提交了离职申请。要开始新的征程了，意外的有些失落和不舍，毕竟是毕业后的第一份工作，毕竟在这认识了一群可爱的人，毕竟在这学到了很多东西,毕竟这有8000+的aeron chair!!!。可既然已经做了选择就没有退路了，勇敢往下走吧，希望接下来的三周可以把手头上的工作做好交接善始善终，也希望以后不会后悔今天的选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/fighting.jpg&quot; alt=&quot;fighting！！！&quot;&gt;    &lt;/p&gt;
&lt;p&gt;进入正题，在周二面试时，一面的面试官有问到 HashMap 是否是线程安全的，如何在线程安全的前提下使用 HashMap,其实也就是 &lt;code&gt;HashMap&lt;/code&gt;，&lt;code&gt;Hashtable&lt;/code&gt;，&lt;code&gt;ConcurrentHashMap&lt;/code&gt; 和 &lt;code&gt;synchronized Map&lt;/code&gt; 的原理和区别。当时有些紧张只是简单说了下HashMap不是线程安全的；Hashtable 线程安全，但效率低，因为是 Hashtable 是使用 synchronized 的，所有线程竞争同一把锁；而 ConcurrentHashMap 不仅线程安全而且效率高，因为它包含一个 segment 数组，将数据分段存储，给每一段数据配一把锁，也就是所谓的锁分段技术。当时忘记了 synchronized Map 和解释一下 HashMap 为什么线程不安全。面试结束后问了下面试官哪里有些不足，面试官说上面这个问题的回答算过关，但可以在深入一些或者自己动手尝试一下。so~~~虽然拿到了 offer，但还是再整理一下，不能得过且过啊。&lt;/p&gt;
&lt;h3 id=&quot;为什么HashMap是线程不安全的&quot;&gt;&lt;a href=&quot;#为什么HashMap是线程不安全的&quot; class=&quot;headerlink&quot; title=&quot;为什么HashMap是线程不安全的&quot;&gt;&lt;/a&gt;为什么HashMap是线程不安全的&lt;/h3&gt;&lt;p&gt;总说 HashMap 是线程不安全的，不安全的，不安全的，那么到底为什么它是线程不安全的呢？要回答这个问题就要先来简单了解一下 HashMap 源码中的使用的&lt;code&gt;存储结构&lt;/code&gt;(这里引用的是 Java 8 的源码，与7是不一样的)和它的&lt;code&gt;扩容机制&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;HashMap的内部存储结构&quot;&gt;&lt;a href=&quot;#HashMap的内部存储结构&quot; class=&quot;headerlink&quot; title=&quot;HashMap的内部存储结构&quot;&gt;&lt;/a&gt;HashMap的内部存储结构&lt;/h4&gt;&lt;p&gt;下面是 HashMap 使用的存储结构:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;transient&lt;/span&gt; Node&amp;lt;K,V&amp;gt;[] table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Map&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Entry&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hash;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; K key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node&amp;lt;K,V&amp;gt; next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到 HashMap 内部存储使用了一个 Node 数组(默认大小是16)，而 Node 类包含一个类型为 Node 的 next 的变量，也就是相当于一个链表，所有根据 hash 值计算的 bucket 一样的 key 会存储到同一个链表里(即产生了冲突)，大概就是下面图的样子(顺便推荐个在线画图的网站&lt;a href=&quot;http://creately.com/Draw-UML-and-Class-Diagrams-Online&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creately&lt;/a&gt;)。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/node1.png&quot; alt=&quot;HashMap内部存储结果&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，在 Java 8 中如果 hash 值相同的 key 数量大于指定值(默认是8)时使用平衡树来代替链表，这会将get()方法的性能从O(n)提高到O(logn)。具体的可以看我的另一篇博客&lt;a href=&quot;http://yemengying.com/2016/02/03/%E8%AF%91-Java%E4%B8%ADHashMap%E5%92%8CLinkedHashMap%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/&quot;&gt;Java 8中HashMap和LinkedHashMap如何解决冲突&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;HashMap的自动扩容机制&quot;&gt;&lt;a href=&quot;#HashMap的自动扩容机制&quot; class=&quot;headerlink&quot; title=&quot;HashMap的自动扩容机制&quot;&gt;&lt;/a&gt;HashMap的自动扩容机制&lt;/h4&gt;&lt;p&gt;HashMap 内部的 Node 数组默认的大小是16，假设有100万个元素，那么最好的情况下每个 hash 桶里都有62500个元素😱，这时get(),put(),remove()等方法效率都会降低。为了解决这个问题，HashMap 提供了自动扩容机制，当元素个数达到数组大小&lt;em&gt; loadFactor 后会扩大数组的大小，在默认情况下，数组大小为16，loadFactor 为0.75，也就是说当 HashMap 中的元素超过16\&lt;/em&gt;0.75=12时，会把数组大小扩展为2*16=32，并且重新计算每个元素在新数组中的位置。如下图所示(&lt;a href=&quot;http://coding-geek.com/how-does-a-hashmap-work-in-java/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片来源&lt;/a&gt;，权侵删)。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/resizing_of_java_hashmap.jpg&quot; alt=&quot;自动扩容&quot;&gt;&lt;br&gt;从图中可以看到没扩容前，获取 EntryE 需要遍历5个元素，扩容之后只需要2次。&lt;/p&gt;
&lt;h4 id=&quot;为什么线程不安全&quot;&gt;&lt;a href=&quot;#为什么线程不安全&quot; class=&quot;headerlink&quot; title=&quot;为什么线程不安全&quot;&gt;&lt;/a&gt;为什么线程不安全&lt;/h4&gt;&lt;p&gt;个人觉得 HashMap 在并发时可能出现的问题主要是两方面,首先如果多个线程同时使用put方法添加元素，而且假设正好存在两个 put 的 key 发生了碰撞(根据 hash 值计算的 bucket 一样)，那么根据 HashMap 的实现，这两个 key 会添加到数组的同一个位置，这样最终就会发生其中一个线程的 put 的数据被覆盖。第二就是如果多个线程同时检测到元素个数超过数组大小* loadFactor ，这样就会发生多个线程同时对 Node 数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋给 table，也就是说其他线程的都会丢失，并且各自线程 put 的数据也丢失。&lt;br&gt;关于 HashMap 线程不安全这一点，《Java并发编程的艺术》一书中是这样说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HashMap 在并发执行 put 操作时会引起死循环，导致 CPU 利用率接近100%。因为多线程会导致 HashMap 的 Node 链表形成环形数据结构，一旦形成环形数据结构，Node 的 next 节点永远不为空，就会在获取 Node 时产生死循环。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哇塞，听上去si不si好神奇，居然会产生死循环。。。。 google 了一下，才知道死循环并不是发生在 put 操作时，而是发生在扩容时。详细的解释可以看下面几篇博客：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://coolshell.cn/articles/9606.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;酷壳-Java HashMap的死循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://firezhfox.iteye.com/blog/2241043&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HashMap在java并发中如何发生死循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coding-geek.com/how-does-a-hashmap-work-in-java/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How does a HashMap work in JAVA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;如何线程安全的使用HashMap&quot;&gt;&lt;a href=&quot;#如何线程安全的使用HashMap&quot; class=&quot;headerlink&quot; title=&quot;如何线程安全的使用HashMap&quot;&gt;&lt;/a&gt;如何线程安全的使用HashMap&lt;/h3&gt;&lt;p&gt;了解了 HashMap 为什么线程不安全，那现在看看如何线程安全的使用 HashMap。这个无非就是以下三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hashtable&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap&lt;/li&gt;
&lt;li&gt;Synchronized Map&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Hashtable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Map&amp;lt;String, String&amp;gt; hashtable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hashtable&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//synchronizedMap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Map&amp;lt;String, String&amp;gt; synchronizedHashMap = Collections.synchronizedMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ConcurrentHashMap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Map&amp;lt;String, String&amp;gt; concurrentHashMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;依次来看看。&lt;/p&gt;
&lt;h4 id=&quot;Hashtable&quot;&gt;&lt;a href=&quot;#Hashtable&quot; class=&quot;headerlink&quot; title=&quot;Hashtable&quot;&gt;&lt;/a&gt;Hashtable&lt;/h4&gt;&lt;p&gt;先稍微吐槽一下，为啥命名不是 HashTable 啊，看着好难受😖，不管了就装作它叫HashTable 吧。这货已经不常用了，就简单说说吧。HashTable 源码中是使用 &lt;code&gt;synchronized&lt;/code&gt; 来保证线程安全的，比如下面的 get 方法和 put 方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 省略实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(K key, V value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 省略实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以当一个线程访问 HashTable 的同步方法时，其他线程如果也要访问同步方法，会被阻塞住。举个例子，当一个线程使用 put 方法时，另一个线程不但不可以使用 put 方法，连 get 方法都不可以，好霸道啊！！！so~~，效率很低，现在基本不会选择它了。&lt;/p&gt;
&lt;h4 id=&quot;ConcurrentHashMap&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap&quot;&gt;&lt;/a&gt;ConcurrentHashMap&lt;/h4&gt;&lt;p&gt;ConcurrentHashMap (以下简称CHM)是 JUC 包中的一个类，Spring 的源码中有很多使用 CHM 的地方。之前已经翻译过一篇关于 ConcurrentHashMap 的博客，&lt;a href=&quot;http://yemengying.com/2015/11/06/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E5%9C%A8java%E4%B8%AD%E4%BD%BF%E7%94%A8ConcurrentHashMap/&quot;&gt;如何在java中使用ConcurrentHashMap&lt;/a&gt;，里面介绍了 CHM 在 Java 中的实现，CHM 的一些重要特性和什么情况下应该使用 CHM。需要注意的是，上面博客是基于 Java 7 的，和8有区别,在8中 CHM 摒弃了 Segment（锁段）的概念，而是启用了一种全新的方式实现,利用 CAS 算法，有时间会重新总结一下。&lt;/p&gt;
&lt;h4 id=&quot;SynchronizedMap&quot;&gt;&lt;a href=&quot;#SynchronizedMap&quot; class=&quot;headerlink&quot; title=&quot;SynchronizedMap&quot;&gt;&lt;/a&gt;SynchronizedMap&lt;/h4&gt;&lt;p&gt;看了一下源码，SynchronizedMap 的实现还是很简单的。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// synchronizedMap方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;K,V&amp;gt; &lt;span class=&quot;function&quot;&gt;Map&amp;lt;K,V&amp;gt; &lt;span class=&quot;title&quot;&gt;synchronizedMap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Map&amp;lt;K,V&amp;gt; m)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SynchronizedMap&amp;lt;&amp;gt;(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// SynchronizedMap类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SynchronizedMap&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;number&quot;&gt;1978198479659022715L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;K,V&amp;gt; m;     &lt;span class=&quot;comment&quot;&gt;// Backing Map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Object      mutex;        &lt;span class=&quot;comment&quot;&gt;// Object on which to synchronize&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       SynchronizedMap(Map&amp;lt;K,V&amp;gt; m) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.m = Objects.requireNonNull(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           mutex = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       SynchronizedMap(Map&amp;lt;K,V&amp;gt; m, Object mutex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.m = m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mutex = mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mutex) &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.size();&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mutex) &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.isEmpty();&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mutex) &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.containsKey(key);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mutex) &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.containsValue(value);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mutex) &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.get(key);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(K key, V value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mutex) &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.put(key, value);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (mutex) &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.remove(key);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 省略其他方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从源码中可以看出调用 synchronizedMap() 方法后会返回一个 SynchronizedMap 类的对象，而在 SynchronizedMap 类中使用了 synchronized 同步关键字来保证对 Map 的操作是线程安全的。&lt;/p&gt;
&lt;h4 id=&quot;性能对比&quot;&gt;&lt;a href=&quot;#性能对比&quot; class=&quot;headerlink&quot; title=&quot;性能对比&quot;&gt;&lt;/a&gt;性能对比&lt;/h4&gt;&lt;p&gt;这是要靠数据说话的时代，所以不能只靠嘴说 CHM 快，它就快了。写个测试用例，实际的比较一下这三种方式的效率(&lt;a href=&quot;http://crunchify.com/hashmap-vs-concurrenthashmap-vs-synchronizedmap-how-a-hashmap-can-be-synchronized-in-java/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码来源&lt;/a&gt;)，下面的代码分别通过三种方式创建 Map 对象，使用 &lt;code&gt;ExecutorService&lt;/code&gt; 来并发运行5个线程，每个线程添加/获取500K个元素。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CrunchifyConcurrentHashMapVsSynchronizedMap&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; THREAD_POOL_SIZE = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; crunchifyHashTableObject = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; crunchifySynchronizedMapObject = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; crunchifyConcurrentHashMapObject = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Test with Hashtable Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        crunchifyHashTableObject = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hashtable&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        crunchifyPerformTest(crunchifyHashTableObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Test with synchronizedMap Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        crunchifySynchronizedMapObject = Collections.synchronizedMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        crunchifyPerformTest(crunchifySynchronizedMapObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Test with ConcurrentHashMap Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        crunchifyConcurrentHashMapObject = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        crunchifyPerformTest(crunchifyConcurrentHashMapObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;crunchifyPerformTest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; crunchifyThreads)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Test started for: &quot;&lt;/span&gt; + crunchifyThreads.getClass());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; averageTime = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; startTime = System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ExecutorService crunchifyExServer = Executors.newFixedThreadPool(THREAD_POOL_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; THREAD_POOL_SIZE; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                crunchifyExServer.execute(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;unused&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;500000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            Integer crunchifyRandomNumber = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) Math.ceil(Math.random() * &lt;span class=&quot;number&quot;&gt;550000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;comment&quot;&gt;// Retrieve value. We are not using it anywhere&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            Integer crunchifyValue = crunchifyThreads.get(String.valueOf(crunchifyRandomNumber));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;comment&quot;&gt;// Put value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            crunchifyThreads.put(String.valueOf(crunchifyRandomNumber), crunchifyRandomNumber);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Make sure executor stops&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            crunchifyExServer.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Blocks until all tasks have completed execution after a shutdown request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            crunchifyExServer.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; entTime = System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; totalTime = (entTime - startTime) / &lt;span class=&quot;number&quot;&gt;1000000L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            averageTime += totalTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;2500K entried added/retrieved in &quot;&lt;/span&gt; + totalTime + &lt;span class=&quot;string&quot;&gt;&quot; ms&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;For &quot;&lt;/span&gt; + crunchifyThreads.getClass() + &lt;span class=&quot;string&quot;&gt;&quot; the average time is &quot;&lt;/span&gt; + averageTime / &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot; ms\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Test started &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;: class java.util.Hashtable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 2018 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1746 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1806 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1801 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1804 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For class java.util.Hashtable the average time is 1835 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test started &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;: class java.util.Collections&lt;span class=&quot;variable&quot;&gt;$SynchronizedMap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 3041 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1690 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1740 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1649 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1696 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For class java.util.Collections&lt;span class=&quot;variable&quot;&gt;$SynchronizedMap&lt;/span&gt; the average time is 1963 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test started &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;: class java.util.concurrent.ConcurrentHashMap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 738 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 696 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 548 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1447 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2500K entried added/retrieved &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 531 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For class java.util.concurrent.ConcurrentHashMap the average time is 792 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个就不用废话了，CHM 性能是明显优于 Hashtable 和 SynchronizedMap 的,CHM 花费的时间比前两个的一半还少，哈哈，以后再有人问就可以甩数据了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论。另外，针对提离职当天发生的一个小插曲，真真是给我上了一课，不是所有人都能接受实话的，只想引用欢乐颂里安迪的一句话:常与同好争高下,不与傻瓜论短长。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;都看到这了，关注个公众号再走吧🙈&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/qrcode.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这周真是发生了不少事，脑袋和心里一直都很乱，周二参加了一场面试，经历了笔试+3轮面试，周五正式提交了离职申请。要开始新的征程了，意外的有些失落和不舍，毕竟是毕业后的第一份工作，毕竟在这认识了一群可爱的人，毕竟在这学到了很多东西,毕竟这有8000+的aeron chair!!!。可既然已经做了选择就没有退路了，勇敢往下走吧，希望接下来的三周可以把手头上的工作做好交接善始善终，也希望以后不会后悔今天的选择。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
      <category term="hashmap" scheme="http://yemengying.com/categories/java/hashmap/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="hashMap" scheme="http://yemengying.com/tags/hashMap/"/>
    
  </entry>
  
  <entry>
    <title>觉得还不错的网站</title>
    <link href="http://yemengying.com/2016/04/24/good-website/"/>
    <id>http://yemengying.com/2016/04/24/good-website/</id>
    <published>2016-04-24T13:35:44.000Z</published>
    <updated>2016-09-21T08:32:38.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理下收藏夹中觉得还不错的网站或资料，不涉及订阅的博客，主要是因为一开始收藏夹并没有分类所以就乱了，不方便找😂，嫑吐槽我。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;镇楼&quot;&gt;&lt;a href=&quot;#镇楼&quot; class=&quot;headerlink&quot; title=&quot;镇楼&quot;&gt;&lt;/a&gt;镇楼&lt;/h3&gt;&lt;p&gt;1.&lt;a href=&quot;https://www.google.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.google.com&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;http://stackoverflow.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/&lt;/a&gt;&lt;br&gt;3.&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/&lt;/a&gt;&lt;br&gt;这三个大家都懂。。把它们放上来的主要目的是。。。撑场子。。。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/liguangzhu3.jpg&quot; alt=&quot;哈哈哈&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Redis相关&quot;&gt;&lt;a href=&quot;#Redis相关&quot; class=&quot;headerlink&quot; title=&quot;Redis相关&quot;&gt;&lt;/a&gt;Redis相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;官网&lt;br&gt;1.&lt;a href=&quot;http://redis.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://redis.io/&lt;/a&gt;(英文版)&lt;br&gt;2.&lt;a href=&quot;http://www.redis.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.redis.cn/&lt;/a&gt;(中文版)    &lt;/li&gt;
&lt;li&gt;其它网站&lt;br&gt;1.&lt;a href=&quot;http://try.redis.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://try.redis.io/&lt;/a&gt;(可以在线练习redis常用命令)&lt;br&gt;2.&lt;a href=&quot;http://redisdoc.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://redisdoc.com/&lt;/a&gt;(查找redis命令的详细信息 包括查看命令的返回值和时间复杂度)&lt;/li&gt;
&lt;li&gt;一本短小精悍的电子书&lt;br&gt;1.&lt;a href=&quot;https://github.com/karlseguin/the-little-redis-book&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/karlseguin/the-little-redis-book&lt;/a&gt;(英文原版)&lt;br&gt;2.&lt;a href=&quot;https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md&lt;/a&gt;(中文译版)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;算法和数据结构相关&quot;&gt;&lt;a href=&quot;#算法和数据结构相关&quot; class=&quot;headerlink&quot; title=&quot;算法和数据结构相关&quot;&gt;&lt;/a&gt;算法和数据结构相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;公开课&lt;br&gt;&lt;a href=&quot;http://open.163.com/special/opencourse/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://open.163.com/special/opencourse/&lt;/a&gt;(网易公开课上的麻省理工算法导论课程)&lt;/li&gt;
&lt;li&gt;做题&lt;br&gt;&lt;a href=&quot;https://leetcode.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/&lt;/a&gt;(leetcode,类似网站有好几个，有选择恐惧症就放一个吧）&lt;/li&gt;
&lt;li&gt;其它网站&lt;br&gt;&lt;a href=&quot;http://algorithms.tutorialhorizon.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://algorithms.tutorialhorizon.com/&lt;/a&gt;(最近特别爱的一个网站，讲解各种算法的，有图解，有code，简直不能更赞，只能意会不可言传，点进去看看吧)&lt;br&gt;&lt;a href=&quot;http://visualgo.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://visualgo.net/&lt;/a&gt; （一个通过动图帮助理解数据结构的网站 比较适合初学者 英文版）&lt;br&gt;&lt;a href=&quot;http://zh.visualgo.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.visualgo.net/&lt;/a&gt;（上面网站的中文版）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么都能学&quot;&gt;&lt;a href=&quot;#什么都能学&quot; class=&quot;headerlink&quot; title=&quot;什么都能学&quot;&gt;&lt;/a&gt;什么都能学&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;教程网站&lt;br&gt;1.&lt;a href=&quot;http://tutorials.jenkov.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tutorials.jenkov.com/&lt;/a&gt;(关于Java，Web ，Mobile and so on)&lt;br&gt;2.&lt;a href=&quot;http://www.sitepoint.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.sitepoint.com&lt;/a&gt;(感觉是个不错的网站，不过关于Java的内容不太多，所以也没常看)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不知道怎么分类&quot;&gt;&lt;a href=&quot;#不知道怎么分类&quot; class=&quot;headerlink&quot; title=&quot;不知道怎么分类&quot;&gt;&lt;/a&gt;不知道怎么分类&lt;/h3&gt;&lt;p&gt;1.&lt;a href=&quot;http://overapi.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://overapi.com/&lt;/a&gt;(网站收集了很多很有用的手册，开发时可以节省很多时间)&lt;br&gt;2.&lt;a href=&quot;https://www.reddit.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.reddit.com/&lt;/a&gt;(信息量比较大的网站，比较喜欢去上面看些搞笑的图片)&lt;br&gt;3.&lt;a href=&quot;https://news.ycombinator.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://news.ycombinator.com/&lt;/a&gt;(不是很喜欢它的页面。。。)&lt;br&gt;4.&lt;a href=&quot;https://www.v2ex.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.v2ex.com/&lt;/a&gt;（可以上去找工作 哈哈）&lt;br&gt;5.&lt;a href=&quot;https://wanqu.co/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wanqu.co/&lt;/a&gt;(湾区日报 每天推送5篇优质英文文章)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;突然发现目前最幸福的事就是在重看以前的Running Man时，发现有一集没看过😜。。不写了 去看wuli光洙了😍&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理下收藏夹中觉得还不错的网站或资料，不涉及订阅的博客，主要是因为一开始收藏夹并没有分类所以就乱了，不方便找😂，嫑吐槽我。。。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Redis相关---Redis持久化(AOF&amp;Snapshot)</title>
    <link href="http://yemengying.com/2016/04/24/Redis-Persistence/"/>
    <id>http://yemengying.com/2016/04/24/Redis-Persistence/</id>
    <published>2016-04-24T07:09:18.000Z</published>
    <updated>2016-09-21T08:35:31.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;恩，先说点题外话。上周被小虐了一丢丢,但有很大收获,了解了自己的不足,知道了自己还在哪些方面有欠缺。更坚定了一直以来的想法,应届生或者工作时间不长的人找工作公司规模，福利薪资都是浮云，跟对人才是最重要的,非常及其以及特别的重要,一个人好技术牛的部门leader绝对抵得上5K的薪资。这也完美解释了为何部门拆分,老大和磊哥走了之后这么不舒服,这尼玛相当于给我减了5K的工资啊,扯远了。。。。还是来看Redis吧，整理下Redis持久化的相关内容，加深下印象。不想看文字的可直接看下面的图😂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/persistent.png&quot; alt=&quot;概要&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;AOF持久化&quot;&gt;&lt;a href=&quot;#AOF持久化&quot; class=&quot;headerlink&quot; title=&quot;AOF持久化&quot;&gt;&lt;/a&gt;AOF持久化&lt;/h3&gt;&lt;p&gt;AOF(append-only file只追加文件)持久化会将执行的写命令追加到AOF文件的末尾。在恢复数据时，只要从头到尾的执行AOF文件中包含的所有写命令即可&lt;/p&gt;
&lt;h4 id=&quot;AOF可用配置&quot;&gt;&lt;a href=&quot;#AOF可用配置&quot; class=&quot;headerlink&quot; title=&quot;AOF可用配置&quot;&gt;&lt;/a&gt;AOF可用配置&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;可选值 &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;appendonly&lt;/td&gt;
&lt;td&gt;是否开启AOF持久化&lt;/td&gt;
&lt;td&gt;no,yes &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;appendfsync&lt;/td&gt;
&lt;td&gt;将写命令同步到硬盘的间隔&lt;/td&gt;
&lt;td&gt;everysec,always,no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;no-appendfsync-on-rewrite&lt;/td&gt;
&lt;td&gt;对文件进行压缩时能否执行同步操作&lt;/td&gt;
&lt;td&gt;no,yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auto-aof-rewrite-percentage&lt;/td&gt;
&lt;td&gt;当前文件大小是上一次压缩后AOF文件大小的多少时执行自动压缩&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auto-aof-rewrite-min-size&lt;/td&gt;
&lt;td&gt;当前文件大小是多少时执行自动压缩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dir path/to/appendonly.aof&lt;/td&gt;
&lt;td&gt;文件存放位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其实主要的就是appendfsync配置项，有三个可选值，&lt;code&gt;always&lt;/code&gt;(每次执行写操作都要同步写入硬盘),&lt;code&gt;everysec&lt;/code&gt;(每秒执行一次同步),&lt;code&gt;no&lt;/code&gt;(让系统决定何时执行同步)。虽然选择&lt;code&gt;always&lt;/code&gt;可将数据丢失减少到最少，但这种策略会对硬盘进行大量的写入操作，处理命令速度受到硬盘限制。建议选择&lt;code&gt;everysec&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;AOF优缺点&quot;&gt;&lt;a href=&quot;#AOF优缺点&quot; class=&quot;headerlink&quot; title=&quot;AOF优缺点&quot;&gt;&lt;/a&gt;AOF优缺点&lt;/h4&gt;&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比快照方式可靠，默认每秒同步一次，意味着最多丢失一秒的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同数据集大小，AOF文件会比快照文件大&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;AOF文件格式&quot;&gt;&lt;a href=&quot;#AOF文件格式&quot; class=&quot;headerlink&quot; title=&quot;AOF文件格式&quot;&gt;&lt;/a&gt;AOF文件格式&lt;/h4&gt;&lt;p&gt;一开始以为Redis就是将写命令原封不动的存储到AOF文件中，自己试了一下才知道，AOF文件是使用Redis网络通讯协议的格式来保存这些命令。&lt;br&gt;举个🌰：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; number 21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将上面的命令存储到AOF文件就是下面的样子（select 0命令是代表选择id为0的数据库）：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;来看下AOF文件的格式，了解它的格式可以让我们很容易的解析它，指不定哪天能用到啊🌝。*号代表命令参数的个数(在上面的例子中参数为set、number、21,共3个)，$号代表第N个参数的长度，在上面的例子中，三个参数的长度分别为3，6，2。&lt;/p&gt;
&lt;h4 id=&quot;压缩AOF文件&quot;&gt;&lt;a href=&quot;#压缩AOF文件&quot; class=&quot;headerlink&quot; title=&quot;压缩AOF文件&quot;&gt;&lt;/a&gt;压缩AOF文件&lt;/h4&gt;&lt;p&gt;Redis可以自动压缩(也可以叫重写)AOF文件，用户也可以通过&lt;code&gt;BGREWRITEAOF&lt;/code&gt;命令来压缩AOF文件。这里的压缩，不是平时说的压缩的意思，是指创建一个新的文件来替换旧的文件，两个文件保存的数据状态完全一致。如果在本地手动执行&lt;code&gt;BGREWRITEAOF&lt;/code&gt;命令，可以看到会生成一个temp-rewriteaof-*.aof的临时文件，在结束后替换appendonly.aof文件，从而减小appendonly.aof文件的大小。我知道这样说其实还是不好理解，还是上图吧。为了方便画图，我就默默假装Redis直接将命令按输入的样子存储到AOF文件中，不要拆穿我🙈。&lt;br&gt;假设执行的写命令是下面的样子：&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/write.png&quot; alt=&quot;执行的写操作&quot;&gt;&lt;br&gt;那么看看在压缩前AOF文件的样子(就是存储了除get命令外的所有写命令)：&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/aof.png&quot; alt=&quot;压缩前的AOF文件&quot;&gt;&lt;br&gt;接着执行BGREWRITEAOF命令，Redis会生成一个新的文件来替换旧的AOF文件，从而达到压缩的目的：&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/yasuo.png&quot; alt=&quot;压缩后的AOF文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到压缩前文件中存储了7条写命令，压缩后只存储一条。而且执行set number 1和6次incr number命令 ，与执行set number 7命令效果是一样的。从而即保证了数据的正确性又压缩了文件的大小。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，Redis是启用子进程来进行AOF文件的压缩，在这期间主进程还是可以继续处理请求的，如果这时请求有写操作就可能导致当前数据库与压缩后的AOF不一致。Redis增加了一个缓存来解决这个问题，主进程在接收到新的写操作命令之后，会将命令写入现有的AOF文件和缓存中。在子进程完成新的AOF文件之后会将缓存的内容写入到新的AOF文件中，并改名覆盖旧的AOF文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;快照持久化&quot;&gt;&lt;a href=&quot;#快照持久化&quot; class=&quot;headerlink&quot; title=&quot;快照持久化&quot;&gt;&lt;/a&gt;快照持久化&lt;/h3&gt;&lt;h4 id=&quot;快照可用配置&quot;&gt;&lt;a href=&quot;#快照可用配置&quot; class=&quot;headerlink&quot; title=&quot;快照可用配置&quot;&gt;&lt;/a&gt;快照可用配置&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;可选值 &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;save m n&lt;/td&gt;
&lt;td&gt;m秒内有n次写入时创建快照&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop-writes-on-bgsave-error&lt;/td&gt;
&lt;td&gt;创建快照失败后是否继续执行写命令&lt;/td&gt;
&lt;td&gt;no,yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rdbcomression&lt;/td&gt;
&lt;td&gt;是否压缩快照文件&lt;/td&gt;
&lt;td&gt;no,yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dbfilename&lt;/td&gt;
&lt;td&gt;命名快照文件&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dir path/to/dump.rdb&lt;/td&gt;
&lt;td&gt;文件存放位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;RDB文件结构&quot;&gt;&lt;a href=&quot;#RDB文件结构&quot; class=&quot;headerlink&quot; title=&quot;RDB文件结构&quot;&gt;&lt;/a&gt;RDB文件结构&lt;/h4&gt;&lt;p&gt;RDB文件是一个经过压缩的二进制文件，不同类型的键值对会采用不同的方式来保存它们。具体的结构我也还没理清楚。。可以参考这篇文章&lt;a href=&quot;http://redisbook.com/preview/rdb/rdb_struct.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://redisbook.com/preview/rdb/rdb_struct.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建快照&quot;&gt;&lt;a href=&quot;#创建快照&quot; class=&quot;headerlink&quot; title=&quot;创建快照&quot;&gt;&lt;/a&gt;创建快照&lt;/h4&gt;&lt;p&gt;创建快照的方式有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送&lt;code&gt;BGSAVE&lt;/code&gt;命令。与压缩AOF文件一样，Redis会fork出一个子进程，由子进程负责将快照写入硬盘。&lt;/li&gt;
&lt;li&gt;客户端发送&lt;code&gt;SAVE&lt;/code&gt;命令。Redis会开始创建快照，并且在快照创建完成之前不再处理其他命令。不常使用&lt;code&gt;SAVE&lt;/code&gt;命令&lt;/li&gt;
&lt;li&gt;在满足配置的save m n选项时。比如，配置了save 60 1000,会在满足60秒内有1000次写入的时候开始创建快照。&lt;/li&gt;
&lt;li&gt;当接收到&lt;code&gt;SHUTDOWN&lt;/code&gt;请求时，Redis会执行&lt;code&gt;SAVE&lt;/code&gt;命令,并且不再执行任何其他命令。&lt;/li&gt;
&lt;li&gt;当从服务器向主服务器发送SYNC命令时，如果主服务器不是刚刚执行过&lt;code&gt;BGSAVE&lt;/code&gt;命令,就会开始执行&lt;code&gt;BGSAVE&lt;/code&gt;来创建快照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;快照优缺点&quot;&gt;&lt;a href=&quot;#快照优缺点&quot; class=&quot;headerlink&quot; title=&quot;快照优缺点&quot;&gt;&lt;/a&gt;快照优缺点&lt;/h4&gt;&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件紧凑,适用于做不同版本的数据备份&lt;/li&gt;
&lt;li&gt;与AOF相比在恢复大数据集时，更快&lt;/li&gt;
&lt;li&gt;很方便传送到另一个数据中心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一旦Redis出现问题，上一次创建快照之后的数据就丢失了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h3&gt;&lt;p&gt;《Redis In Action》&lt;br&gt;&lt;a href=&quot;http://www.redis.cn/topics/persistence.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.redis.cn/topics/persistence.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://redisbook.readthedocs.org/en/latest/internal/aof.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://redisbook.readthedocs.org/en/latest/internal/aof.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;恩，先说点题外话。上周被小虐了一丢丢,但有很大收获,了解了自己的不足,知道了自己还在哪些方面有欠缺。更坚定了一直以来的想法,应届生或者工作时间不长的人找工作公司规模，福利薪资都是浮云，跟对人才是最重要的,非常及其以及特别的重要,一个人好技术牛的部门leader绝对抵得上5K的薪资。这也完美解释了为何部门拆分,老大和磊哥走了之后这么不舒服,这尼玛相当于给我减了5K的工资啊,扯远了。。。。还是来看Redis吧，整理下Redis持久化的相关内容，加深下印象。不想看文字的可直接看下面的图😂。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="redis" scheme="http://yemengying.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yemengying.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis相关---【译】利用Redis起飞吧</title>
    <link href="http://yemengying.com/2016/04/02/take-advantage-of-Redis/"/>
    <id>http://yemengying.com/2016/04/02/take-advantage-of-Redis/</id>
    <published>2016-04-02T02:56:03.000Z</published>
    <updated>2016-05-14T09:30:03.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;一直以来对Redis的使用都很是简单粗暴，不得精髓，趁假期好好补补。翻译一篇Redis之父Antirez的博客，文章中讲述了几个利用Redis解决实际问题的例子。并非逐字逐句的翻译，有些不太懂的地方就任性的跳过了😋，翻译这篇博客只做加深印象之用，建议大家还是出门左转看原文吧。。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://oldblog.antirez.com/post/take-advantage-of-redis-adding-it-to-your-stack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://oldblog.antirez.com/post/take-advantage-of-redis-adding-it-to-your-stack.html&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt; Redis在很多方面不同于MySql等数据库：比如，Redis使用内存做主要的存储，使用磁盘实现数据持久化；数据模型不同；Redis是单线程的等等。但我认为最大的不同是如果开发者想要使用Redis，无需切换到Redis。可以在不把Redis作为数据库的前提下，利用Redis实现一些以前不好实现的功能或者优化遗留的问题。&lt;br&gt; 完全切换到Redis当然也是可行的，许多开发者在想使用Redis的一些特性时，会将Redis当做主数据库，但将一个已经在生产环境中运行的项目切换到Redis显然是个大工程。而且有一些应用并不适合将Redis作为数据库：比如Redis的数据集不能比可用内存大，所以对于大数据量的应用，Redis可能不是一个好的选择。&lt;br&gt;下面会介绍一些在已有项目中加入Redis的例子，会向大家展示如何在不把Redis当做主要数据库的情况下利用Redis的某些特性解决问题。&lt;/p&gt;
&lt;h3 id=&quot;在主页展示最新的评论列表&quot;&gt;&lt;a href=&quot;#在主页展示最新的评论列表&quot; class=&quot;headerlink&quot; title=&quot;在主页展示最新的评论列表&quot;&gt;&lt;/a&gt;在主页展示最新的评论列表&lt;/h3&gt;&lt;p&gt;我敢打赌，如果每次都通过下面的查询语句获取最新评论，那么网站性能会很差。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; foo &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; ... &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;展现最新添加的某些东西在网站应用中十分常见，下面看看如何利用Redis优化这类问题。假设网站想要展示最新的20条评论，并且还有个“展示全部评论”的链接，通过这个链接可以通过分页的形式查看历史评论记录。&lt;br&gt;我们还假设每条评论都存储在数据库中，并且有一个自增的Id。&lt;br&gt;我们可以使用一个很简单的Redis同时解决展现最新评论和分页展现历史评论的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每当创建一条新的评论，将评论的Id插入到Redis的一个列表中:&lt;strong&gt;LPUSH latest.comments &lt;id&gt;&lt;/id&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Redis支持将列表修剪到指定长度。所以我们可以通过&lt;strong&gt;LTRIM latest.comments 0 5000.&lt;/strong&gt;操作维持列表中始终存储5000个最新的评论Id.&lt;/li&gt;
&lt;li&gt;每次想要获取指定范围内的评论时，可以使用下面的函数（伪代码）.&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FUNCTION get_latest_comments(start,num_items):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id_list = redis.lrange(&lt;span class=&quot;string&quot;&gt;&quot;latest.comments&quot;&lt;/span&gt;,start,start+num_items&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IF id_list.length &amp;lt; num_items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        id_list = SQL_DB(&lt;span class=&quot;string&quot;&gt;&quot;SELECT ... ORDER BY time LIMIT ...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    END&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RETURN id_list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;END&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这段代码的功能很简单。在Redis中维护一个&lt;code&gt;“动态缓存”&lt;/code&gt;，经常更新,存储最新评论的Id,缓存中限制最多只存5000个Id。在系统第一次启动时,缓存列表中的Id个数为0。所以我们上面实现的方法会在先访问Redis，如果参数(start/count)的超过了列表范围，再去访问数据库。&lt;br&gt;我们无需刷新缓存，并且只会在用户想要查看最新5000条评论之外的评论时才会访问数据库。也就是说展示最新评论的主页，和查看历史评论前几页都无需访问数据库。&lt;/p&gt;
&lt;h3 id=&quot;删除和过滤&quot;&gt;&lt;a href=&quot;#删除和过滤&quot; class=&quot;headerlink&quot; title=&quot;删除和过滤&quot;&gt;&lt;/a&gt;删除和过滤&lt;/h3&gt;&lt;p&gt;在遇到评论被删除时，我们可以使用&lt;code&gt;LREM&lt;/code&gt;命令来删除Redis列表中缓存的评论Id。如果删除评论的情况不常见，也可以在展示指定评论时跳过它，因为我们在根据评论Id去数据库查询评论具体内容时，数据库会告诉我们某条评论已经不存在了。&lt;/p&gt;
&lt;h3 id=&quot;选手积分榜及相关问题&quot;&gt;&lt;a href=&quot;#选手积分榜及相关问题&quot; class=&quot;headerlink&quot; title=&quot;选手积分榜及相关问题&quot;&gt;&lt;/a&gt;选手积分榜及相关问题&lt;/h3&gt;&lt;p&gt;另一个比较常见的，用数据库实现性能较差的需求是按分数排序，展现列表，并且实时更新，一个常见的例子就是在线游戏中的选手积分榜。在在线游戏中，需要接受高频率的来自不同用户的分数更新，通过这些分数实现以下需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在积分榜中展现分数最高的100位选手&lt;/li&gt;
&lt;li&gt;展现用户的当前排名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些操作用Redis的&lt;code&gt;有序集合&lt;/code&gt;来实现是很简单的，哪怕你的系统每分钟要更新上百万的分数。&lt;br&gt;每当接受到一个用户的新分数时，我们对Redis做如下的操作：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ZADD leaderboard &amp;lt;score&amp;gt; &amp;lt;username&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ps:也可以使用userId，而不是用户名, 看开发者的个人喜好。&lt;br&gt;接下来，我们可以很简单的通过下面的操作获得分数排名前100的用户&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ZREVRANGE leaderboard 0 99&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以通过&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ZRANK leaderboard &amp;lt;username&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;来获取用户的当前排名。&lt;br&gt;除此之外，我们还可以获得排名靠近当前用户的用户，以及等等等等。。。。。&lt;/p&gt;
&lt;h3 id=&quot;按照用户投票和时间排序&quot;&gt;&lt;a href=&quot;#按照用户投票和时间排序&quot; class=&quot;headerlink&quot; title=&quot;按照用户投票和时间排序&quot;&gt;&lt;/a&gt;按照用户投票和时间排序&lt;/h3&gt;&lt;p&gt;下面谈谈选手积分榜问题的一个变种问题。在诸如Reddit和Hacker News这类的网站中，新闻是按照类似下面公式计算得出的分数来排序的。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;score = points / time^alpha&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也就是说用户的投票会在一定很小程度上提升新闻的排名，而时间流逝则会使新闻的排名呈指数级下降。实际的算法会比我们的例子更复杂，但解决的方式是一样的。&lt;br&gt;首先假设只有最新发布的1000条新闻才有资格出现在首页上，所以我们只关注最新发布的1000条新闻，忽略太老的新闻，大致解决方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每当新发布一条新闻，将其Id加入到Redis的列表中，通过&lt;strong&gt;LPUSH+LTRIM&lt;/strong&gt;将列表维持到只保存最新发布的1000条新闻的Id。&lt;/li&gt;
&lt;li&gt;通过一个定时任务获取Redis中Id列表，并且不断的计算列表中新闻的分数。将计算结果通过ZADD操作存储到一个有序集合中，同时将旧的新闻从有序列表中清除。&lt;br&gt;主要思想就是，有序集合中存储着1000条最新新闻，并按分数排序。分数的排序是通过后台程序完成的，与浏览网站的用户数无关。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;将元素过期&quot;&gt;&lt;a href=&quot;#将元素过期&quot; class=&quot;headerlink&quot; title=&quot;将元素过期&quot;&gt;&lt;/a&gt;将元素过期&lt;/h3&gt;&lt;p&gt;我们还可以利用有序集合实现将超过指定时间的元素在数据库中删除或置为过期。具体做法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每当数据库中新加入一个元素时，同时将其添加到有序集合中，分数是当前时间加上指定的存活时间&lt;/li&gt;
&lt;li&gt;让一个后台任务查询有序集合，利用&lt;strong&gt;ZRANGE …WITHSCORES&lt;/strong&gt;获取元素，如果元素对应的分数小于当前时间，说明元素已过期，在数据库中删除对应记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;计数器&quot;&gt;&lt;a href=&quot;#计数器&quot; class=&quot;headerlink&quot; title=&quot;计数器&quot;&gt;&lt;/a&gt;计数器&lt;/h3&gt;&lt;p&gt;Redis可以用来实现计数器,使用INCRBY操作即可。&lt;br&gt;相信很多人都曾想过在数据库中添加一张计数器表，用来为用户展现一些统计信息，但又考虑到需要对这张表进行大量的写操作而放弃，本宝宝曾经无数次遇到过这个问题。&lt;br&gt;现在，我们可以通过Redis来解决这个问题。通过Redis我们可以为计数器原子性的增加计数,也可以使用&lt;code&gt;GETSET&lt;/code&gt;命令重置计数器或者为计数器设置过期时间。比如我们可以按照如下做法实现计数一个用户指定时间内的页面访问量，如果超过了指定值，比如20，就弹出一个提示。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INCR user:&amp;lt;id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXPIRE user:&amp;lt;id&amp;gt; 60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;统计指定时间内不同的用户&quot;&gt;&lt;a href=&quot;#统计指定时间内不同的用户&quot; class=&quot;headerlink&quot; title=&quot;统计指定时间内不同的用户&quot;&gt;&lt;/a&gt;统计指定时间内不同的用户&lt;/h3&gt;&lt;p&gt;另一个用数据库实现比较困难，但是用Redis却很简单的功能就是统计指定时间内访问某资源的用户数。比如我想知道访问指定页面的用户数(相同用户访问多次只计算一次)，我只需要在新增一个页面浏览(PV)时,执行下面的操作：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SADD page:day1:&amp;lt;page_id&amp;gt;  &amp;lt;user_id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;想获得某页面的用户访问数，只需执行&lt;strong&gt;SCARD page:day1:&lt;page_id&gt;&lt;/page_id&gt;&lt;/strong&gt;即可。&lt;/p&gt;
&lt;h3 id=&quot;实时分析&quot;&gt;&lt;a href=&quot;#实时分析&quot; class=&quot;headerlink&quot; title=&quot;实时分析&quot;&gt;&lt;/a&gt;实时分析&lt;/h3&gt;&lt;p&gt;我们已经看过了几个利用Redis如何实现一些利用数据库不好实现的功能，如果深入学习Redis的命令集，活用Redis中的数据结构，我们可以很容易的实现实时统计的功能，用来增强反垃圾邮件系统，或者通过分析得到的一些数据来提高网站的质量。&lt;/p&gt;
&lt;h3 id=&quot;发布-订阅&quot;&gt;&lt;a href=&quot;#发布-订阅&quot; class=&quot;headerlink&quot; title=&quot;发布/订阅&quot;&gt;&lt;/a&gt;发布/订阅&lt;/h3&gt;&lt;p&gt;Redis中实现了一个高性能的&lt;code&gt;发布/订阅&lt;/code&gt;系统，易于使用，稳定，性能高，并且支持模式匹配。详细的信息可以阅读&lt;a href=&quot;http://redis.io/topics/pubsub&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h3&gt;&lt;p&gt;大家可能已经注意到了，通过Redis对列表插入元素和弹出元素的命令，很适合用来实现一个队列。但Redis能做的远远不止这些，比如Redis弹出列表元素时还有提供&lt;a href=&quot;http://redis.io/commands/blpop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BLPOP命令&lt;/a&gt;，可以在列表为空时，将连接阻塞。除此之外利用有序集合也可以很容易的实现一个优先队列。Redis在队列方面还有很多用法(比如&lt;code&gt;RPOPLPUSH&lt;/code&gt;,&lt;code&gt;Resque&lt;/code&gt;)，大家可以慢慢发掘。&lt;/p&gt;
&lt;h3 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h3&gt;&lt;p&gt;关于这一节其实就够再写一篇博客了。简单来说，Redis可以作为&lt;code&gt;memcached&lt;/code&gt;的替代品，使我们的缓存既可以存储数据又易于更新。&lt;/p&gt;
&lt;h3 id=&quot;快在Redis的帮助下起飞吧&quot;&gt;&lt;a href=&quot;#快在Redis的帮助下起飞吧&quot; class=&quot;headerlink&quot; title=&quot;快在Redis的帮助下起飞吧&quot;&gt;&lt;/a&gt;快在Redis的帮助下起飞吧&lt;/h3&gt;&lt;p&gt;快使用Redis来增强用户体验，降低系统复杂度，加快请求响应吧~~，无需全部切换到Redis，可仅仅利用Redis实现用数据库不好实现或性能不高的新功能。&lt;/p&gt;
&lt;p&gt;分享个觉得还不错的视频，拖延症患者可以看看，不过估计也没什么卵用，该拖还得拖，哈哈哈哈哈哈~~~&lt;/p&gt;
&lt;object width=&quot;640&quot; height=&quot;360&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://swf.ws.126.net/openplayer/v02/-0-2_MBHQSM52F_MBI15O7QE-vimg1_ws_126_net//image/snapshot_movie/2016/3/Q/F/MBI15O7QF-1423031805654.swf?isTEDPlay=1&quot;&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;&gt;&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot;&gt;&lt;embed src=&quot;http://swf.ws.126.net/openplayer/v02/-0-2_MBHQSM52F_MBI15O7QE-vimg1_ws_126_net//image/snapshot_movie/2016/3/Q/F/MBI15O7QF-1423031805654.swf?isTEDPlay=1&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;640&quot; height=&quot;360&quot; allowfullscreen=&quot;true&quot; wmode=&quot;transparent&quot; allowscriptaccess=&quot;always&quot;&gt;&lt;/object&gt;










</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直以来对Redis的使用都很是简单粗暴，不得精髓，趁假期好好补补。翻译一篇Redis之父Antirez的博客，文章中讲述了几个利用Redis解决实际问题的例子。并非逐字逐句的翻译，有些不太懂的地方就任性的跳过了😋，翻译这篇博客只做加深印象之用，建议大家还是出门左转看原文吧。。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://oldblog.antirez.com/post/take-advantage-of-redis-adding-it-to-your-stack.html&quot;&gt;http://oldblog.antirez.com/post/take-advantage-of-redis-adding-it-to-your-stack.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="http://yemengying.com/categories/redis/"/>
    
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="redis" scheme="http://yemengying.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>[Elasticsearch配置项(二)]Node,Threadpool模块配置</title>
    <link href="http://yemengying.com/2016/03/21/elasticsearch-settings2/"/>
    <id>http://yemengying.com/2016/03/21/elasticsearch-settings2/</id>
    <published>2016-03-21T13:32:41.000Z</published>
    <updated>2016-09-21T08:32:10.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;接上文。。。。。。按照官方文档(版本2.2)和一些参考资料整理一下elasticsearch的可配置项。先整理了Node，ThreadPool两个模块的可配置项，其他模块(比如Cluster)会在之后慢慢整理的。本文只包含两个模块可用配置项的含义及用法，并不涉及应该如何优化，这是为什么呢？因为俺也不会。。。。。(欢迎指正错误，康桑阿米达)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关博客：&lt;a href=&quot;http://yemengying.com/2016/03/18/Elasticsearch%E9%85%8D%E7%BD%AE%E9%A1%B9-Local-gateway-HTTP-Indices-Network-Settings%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/&quot;&gt;elasticsearch 配置项(一)&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;wuli光洙镇楼~~&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/guangzhu.jpg&quot; alt=&quot;hahaha&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考文档（万分感谢）&quot;&gt;&lt;a href=&quot;#参考文档（万分感谢）&quot; class=&quot;headerlink&quot; title=&quot;参考文档（万分感谢）&quot;&gt;&lt;/a&gt;参考文档（万分感谢）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opscoder.info/es_threadpool.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.opscoder.info/es_threadpool.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.voidcn.com/blog/BrotherDong90/article/p-3851633.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.voidcn.com/blog/BrotherDong90/article/p-3851633.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Node-节点&quot;&gt;&lt;a href=&quot;#Node-节点&quot; class=&quot;headerlink&quot; title=&quot;Node(节点)&quot;&gt;&lt;/a&gt;Node(节点)&lt;/h3&gt;&lt;p&gt;每当启动一个Es实例，就是启动了一个节点。多个连接在一起的节点组成的集合就是集群。&lt;br&gt;默认情况下，每个节点都可以通过HTTP和Transport通信。每个节点都知道集群中的其他节点，可以将客户端的请求转发到合适的节点。除此之外，每个节点还有着以下一种或多种具体角色。&lt;br&gt;&lt;strong&gt; Master-eligible node (候选主节点) &lt;/strong&gt;&lt;br&gt;当一个节点的&lt;code&gt;node.master&lt;/code&gt;被设置为&lt;code&gt;true&lt;/code&gt;(默认为true)时，该节点就有资格被选为master节点，控制集群。&lt;br&gt;&lt;strong&gt; Data node (数据节点) &lt;/strong&gt;&lt;br&gt;配置项&lt;code&gt;node.data&lt;/code&gt;设置为true的节点称为数据节点。数据节点存储数据并且处理和数据相关的一些操作，比如CRUD，查找和聚合等。&lt;br&gt;&lt;strong&gt; Client node (客户端节点) &lt;/strong&gt;&lt;br&gt;当一个节点的&lt;code&gt;node.master&lt;/code&gt;和&lt;code&gt;node.data&lt;/code&gt;均被设置为&lt;code&gt;false&lt;/code&gt;时，它既不能存储数据也不能作为一个主节点。它被看做一个“路由器”，负责将集群层面的请求转发到主节点，将数据相关的请求转发到数据节点。&lt;br&gt;&lt;strong&gt; Tribe node (部落节点) &lt;/strong&gt;&lt;br&gt;部落节点是一种特殊类型的客户端节点，可通过&lt;code&gt;tribe.*&lt;/code&gt;配置项配置。部落节点可以连接多个集群，并且可以跨集群执行查找和其他操作。&lt;/p&gt;
&lt;p&gt;默认情况下，每个节点即是主节点也是数据节点。但是当集群扩大后，更好的做法是将主节点和数据节点独立开。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Coordinating node(协调节点)：一些请求可能会涉及到多个数据节点，比如搜索或批量索引。搜索请求一般分为两个阶段，由接受客户端请求的节点做协调，称为协调节点。在搜索的第一阶段协调节点会将请求转发到数据节点，每个节点在本地执行请求，并将结果返给协调节点。在第二阶段，协调节点会将各个结果汇总在一起。这意味着负责接受请求的客户端节点(也就是协调节点)需要用足够的内存和CPU来处理查询结果的汇总。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Master-eligible-node-候选主节点&quot;&gt;&lt;a href=&quot;#Master-eligible-node-候选主节点&quot; class=&quot;headerlink&quot; title=&quot;Master-eligible node(候选主节点)&quot;&gt;&lt;/a&gt;Master-eligible node(候选主节点)&lt;/h4&gt;&lt;p&gt;主节点主要负责创建索引，删除索引，追踪集群中的节点，分配分片等，所以有一个稳定的主节点对于集群来说非常重要，非常重要，非常重要（说三遍，哈哈哈）。集群中任何有资格成为主节点的节点都可能被选为主节点。&lt;br&gt;由于索引和搜索会对节点资源造成压力，在集群比较大时，最好将主节点和数据节点的角色区分，即不要让主节点同时也是数据节点。&lt;br&gt;通过下面的配置可以设置一个专门的主节点(只是主节点不是数据节点)。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node.master: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node.data: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 通过minimum_master_nodes来避免脑裂现象 &lt;/strong&gt;&lt;br&gt;&lt;code&gt;discovery.zen.minimum_master_nodes&lt;/code&gt;配置项说明形成集群时，集群中有资格成为主节点的节点数最少是多少，默认为1.&lt;br&gt;脑裂现象：假设集群中有两个有资格成为主节点的候选主节点，&lt;code&gt;discovery.zen.minimum_master_nodes&lt;/code&gt;配置默认为1。当由于网络问题中断了两个节点间的通信，这时两个节点都只会发现一个有资格成为主节点的节点（自己本身）， 根据配置(minimum_master_nodes = 1),符合组成一个集群的条件，所以每个节点都会成为新的master节点，从而导致形成了两个集群，也就是脑裂。直到其中一个节点重启，才会重新形成集群，并且写入重启节点的数据会丢失。假设集群中有三个有资格成为主节点的候选主节点，而这时&lt;code&gt;minimum_master_nodes&lt;/code&gt;设置为2，如果一个节点与其他两个失去了通信，被独立的节点会发现不满足设置的条件(有两个候选主节点)，所以不会选举自己为主节点。而剩下两个节点会选举出一个新的主节点，确保正常运行。&lt;br&gt;&lt;code&gt;discovery.zen.minimum_master_nodes&lt;/code&gt;最好设置为(候选主节点数/2) + 1, 举个例子，当有三个候选主节点时，该配置项的值为(3/2)+1=2。&lt;br&gt;也可以通过下面的API动态的更新这个值：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PUT _cluster/settings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;transient&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;discovery.zen.minimum_master_nodes&quot;: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Data-node-数据节点&quot;&gt;&lt;a href=&quot;#Data-node-数据节点&quot; class=&quot;headerlink&quot; title=&quot;Data node(数据节点)&quot;&gt;&lt;/a&gt;Data node(数据节点)&lt;/h4&gt;&lt;p&gt;数据节点包含着索引文档的分片，负责处理和数据相关的操作，比如CRUD，搜索和聚合。这些操作会涉及到IO,内存和CPU，所以要注意监控这些资源，添加更多的数据节点以防负载过重。通过下面的配置可以设置一个专门的数据节点(只是数据节点不是主节点)。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node.master: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node.data: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Client-node-客户端节点&quot;&gt;&lt;a href=&quot;#Client-node-客户端节点&quot; class=&quot;headerlink&quot; title=&quot;Client node(客户端节点)&quot;&gt;&lt;/a&gt;Client node(客户端节点)&lt;/h4&gt;&lt;p&gt;客户端节点主要负责路由请求，汇总搜索结果等，本质上来看，客户端节点更像一个负载均衡器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：集群中添加过多的客户端节点会增加整个集群的负担。所以不要过大夸大客户端节点的好处，数据节点也可以像客户端节点一样服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 通过下面的配置可以设置一个专门的客户端节点(不是数据节点也不是主节点)。&lt;br&gt; &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node.master: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node.data: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;设置节点的数据路径&quot;&gt;&lt;a href=&quot;#设置节点的数据路径&quot; class=&quot;headerlink&quot; title=&quot;设置节点的数据路径&quot;&gt;&lt;/a&gt;设置节点的数据路径&lt;/h4&gt;&lt;p&gt;&lt;code&gt;path.data&lt;/code&gt;&lt;br&gt;每个数据节点和主节点都需要在文件中存储一些关于分片，索引和集群的元数据。&lt;code&gt;elasticsearch.yml&lt;/code&gt;文件中的&lt;code&gt;path.data&lt;/code&gt;可以配置文件的绝对路径或相对路径，默认值是&lt;code&gt;$ES_HOME/data&lt;/code&gt;，也可以通过命令配置。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin/elasticsearch --path.data /var/elasticsearch/data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;node.max_local_storage-nodes&lt;/code&gt;&lt;br&gt;上面的设置可以被不同的节点共享（在生产环境下建议一个服务器只运行一个节点）。为了避免多个节点共享同一个路径，可以在&lt;code&gt;elasticsearch.yml&lt;/code&gt;中添加如下配置。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node.max_&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;_storage_nodes: 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，不要将不同类型节点的信息存储到同一个目录下，可能会造称数据丢失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Thread-Pool-线程池&quot;&gt;&lt;a href=&quot;#Thread-Pool-线程池&quot; class=&quot;headerlink&quot; title=&quot;Thread Pool(线程池)&quot;&gt;&lt;/a&gt;Thread Pool(线程池)&lt;/h3&gt;&lt;p&gt;为了提升线程内存消耗的管理，每个Es节点都有多个线程池。&lt;/p&gt;
&lt;h4 id=&quot;线程池类型&quot;&gt;&lt;a href=&quot;#线程池类型&quot; class=&quot;headerlink&quot; title=&quot;线程池类型&quot;&gt;&lt;/a&gt;线程池类型&lt;/h4&gt;&lt;p&gt;下面介绍一下线程池的三种类型和各自的一些参数：&lt;br&gt;&lt;strong&gt;cached&lt;/strong&gt;:&lt;br&gt;    &lt;code&gt;cached&lt;/code&gt;类型的线程池没有限制大小，当有pending的请求时就会创建一个线程。这类线程池可以防止请求阻塞或被拒绝。未使用的线程会在过期(默认5分钟)之后消亡。&lt;code&gt;cache&lt;/code&gt;类型专门为&lt;code&gt;generic&lt;/code&gt;线程池保留的。&lt;br&gt;    &lt;code&gt;keep_alive&lt;/code&gt;参数定义了未使用的线程的存活时间。&lt;br&gt;    &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;threadpool:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   generic:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       keep_alive: 2m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fixed&lt;/strong&gt;:&lt;br&gt;    &lt;code&gt;fixed&lt;/code&gt;类型的线程池持有固定个数的线程处理请求队列。&lt;code&gt;size&lt;/code&gt;参数用来控制线程的个数，默认为cpu核心数的5倍。&lt;code&gt;queue_size&lt;/code&gt;参数用来控制请求队列的大小。默认值为-1，意味着无上限。如果请求队列已满，那么接下来到来的请求会被终止。&lt;br&gt;    &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;threadpool:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   index:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       size: 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       queue_size: 1000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scaling&lt;/strong&gt;:&lt;br&gt;    &lt;code&gt;scaling&lt;/code&gt;线程池中线程数可动态变化。线程数在1和&lt;code&gt;size&lt;/code&gt;参数值的中间。&lt;br&gt;    &lt;code&gt;keep_alive&lt;/code&gt;参数定义了未使用的线程的存活时间。&lt;br&gt;    &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;threadpool:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   warmer:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       size: 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       keep_alive: 2m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Es中重要的线程池&quot;&gt;&lt;a href=&quot;#Es中重要的线程池&quot; class=&quot;headerlink&quot; title=&quot;Es中重要的线程池&quot;&gt;&lt;/a&gt;Es中重要的线程池&lt;/h4&gt;&lt;p&gt;以下是Es中几个比较重要的线程池及他们的类型:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;线程池&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;generic&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责一些诸如发现节点之类的通用操作。该线程池类型为&lt;code&gt;cache&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;index&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责索引数据/删除数据操作，类型为&lt;code&gt;fixed&lt;/code&gt;，默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;200&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;search&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责统计/搜索操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;int((available_processors * 3) / 2) + 1&lt;/code&gt;,队列大小为&lt;code&gt;1000&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;suggest&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责获取提示操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;1000&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;get&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责get操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;1000&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;bulk&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责批量操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;50&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;percolate&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责过滤操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;1000&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;snapshot&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责快照/恢复操作，类型为&lt;code&gt;scaling&lt;/code&gt;,默认线程数为&lt;code&gt;min(5, (available processors)/2)&lt;/code&gt;,默认未使用线程的存活时间为&lt;code&gt;5m&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;warmer&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责warm-up操作，类型为&lt;code&gt;scaling&lt;/code&gt;,默认线程数为&lt;code&gt;min(5, (available processors)/2)&lt;/code&gt;,默认未使用线程的存活时间为&lt;code&gt;5m&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;refresh&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责更新操作，类型为&lt;code&gt;scaling&lt;/code&gt;,默认线程数为&lt;code&gt;min(10, (available processors)/2)&lt;/code&gt;,默认未使用线程的存活时间为&lt;code&gt;5m&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;listener&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责java client的执行，类型为&lt;code&gt;scaling&lt;/code&gt;,默认线程数为&lt;code&gt;min(10, (available processors)/2)&lt;/code&gt;,默认未使用线程的存活时间为&lt;code&gt;5m&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;处理器设置&quot;&gt;&lt;a href=&quot;#处理器设置&quot; class=&quot;headerlink&quot; title=&quot;处理器设置&quot;&gt;&lt;/a&gt;处理器设置&lt;/h4&gt;&lt;p&gt;Es可以自动检测处理器的数量，线程池的配置也会基于这个值。可能存在检测失败的情况，这是可以通过&lt;code&gt;processors&lt;/code&gt;配置显式设置这个值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意以上这些配置如果不是很了解，还是不要轻易改动，使用默认配置即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看累了吧，分享个觉得还不错的TED视频~~&lt;/p&gt;
&lt;object width=&quot;640&quot; height=&quot;360&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://swf.ws.126.net/openplayer/v02/-0-2_MBFLN6BJF_MBFLNJGFE-vimg1_ws_126_net//image/snapshot_movie/2016/2/F/F/MBFLNJGFF-1423031805654.swf?isTEDPlay=1&quot;&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;&gt;&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot;&gt;&lt;embed src=&quot;http://swf.ws.126.net/openplayer/v02/-0-2_MBFLN6BJF_MBFLNJGFE-vimg1_ws_126_net//image/snapshot_movie/2016/2/F/F/MBFLNJGFF-1423031805654.swf?isTEDPlay=1&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;640&quot; height=&quot;360&quot; allowfullscreen=&quot;true&quot; wmode=&quot;transparent&quot; allowscriptaccess=&quot;always&quot;&gt;&lt;/object&gt;







</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;接上文。。。。。。按照官方文档(版本2.2)和一些参考资料整理一下elasticsearch的可配置项。先整理了Node，ThreadPool两个模块的可配置项，其他模块(比如Cluster)会在之后慢慢整理的。本文只包含两个模块可用配置项的含义及用法，并不涉及应该如何优化，这是为什么呢？因为俺也不会。。。。。(欢迎指正错误，康桑阿米达)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关博客：&lt;a href=&quot;http://yemengying.com/2016/03/18/Elasticsearch%E9%85%8D%E7%BD%AE%E9%A1%B9-Local-gateway-HTTP-Indices-Network-Settings%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/&quot;&gt;elasticsearch 配置项(一)&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yemengying.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yemengying.com/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
