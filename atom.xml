<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giraffe&#39;s Home</title>
  <subtitle>A Stupid Giraffe</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yemengying.com/"/>
  <updated>2016-03-23T00:52:27.000Z</updated>
  <id>http://yemengying.com/</id>
  
  <author>
    <name>Mengying Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Elasticsearch配置项(二)]Node,Threadpool模块配置</title>
    <link href="http://yemengying.com/2016/03/21/elasticsearch-settings2/"/>
    <id>http://yemengying.com/2016/03/21/elasticsearch-settings2/</id>
    <published>2016-03-21T13:32:41.000Z</published>
    <updated>2016-03-23T00:52:27.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;接上文。。。。。。按照官方文档(版本2.2)和一些参考资料整理一下elasticsearch的可配置项。先整理了Node，ThreadPool两个模块的可配置项，其他模块(比如Cluster)会在之后慢慢整理的。本文只包含两个模块可用配置项的含义及用法，并不涉及应该如何优化，这是为什么呢？因为俺也不会。。。。。(欢迎指正错误，康桑阿米达)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关博客：&lt;a href=&quot;http://yemengying.com/2016/03/18/Elasticsearch%E9%85%8D%E7%BD%AE%E9%A1%B9-Local-gateway-HTTP-Indices-Network-Settings%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/&quot;&gt;elasticsearch 配置项(一)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wuli光洙镇楼~~&lt;br&gt;&lt;img src=&quot;/images/guangzhu.jpg&quot; alt=&quot;hahaha&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;参考文档（万分感谢）&quot;&gt;&lt;a href=&quot;#参考文档（万分感谢）&quot; class=&quot;headerlink&quot; title=&quot;参考文档（万分感谢）&quot;&gt;&lt;/a&gt;参考文档（万分感谢）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opscoder.info/es_threadpool.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.opscoder.info/es_threadpool.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.voidcn.com/blog/BrotherDong90/article/p-3851633.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.voidcn.com/blog/BrotherDong90/article/p-3851633.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Node-节点&quot;&gt;&lt;a href=&quot;#Node-节点&quot; class=&quot;headerlink&quot; title=&quot;Node(节点)&quot;&gt;&lt;/a&gt;Node(节点)&lt;/h3&gt;&lt;p&gt;每当启动一个Es实例，就是启动了一个节点。多个连接在一起的节点组成的集合就是集群。&lt;br&gt;默认情况下，每个节点都可以通过HTTP和Transport通信。每个节点都知道集群中的其他节点，可以将客户端的请求转发到合适的节点。除此之外，每个节点还有着以下一种或多种具体角色。&lt;br&gt;&lt;strong&gt; Master-eligible node (候选主节点) &lt;/strong&gt;&lt;br&gt;当一个节点的&lt;code&gt;node.master&lt;/code&gt;被设置为&lt;code&gt;true&lt;/code&gt;(默认为true)时，该节点就有资格被选为master节点，控制集群。&lt;br&gt;&lt;strong&gt; Data node (数据节点) &lt;/strong&gt;&lt;br&gt;配置项&lt;code&gt;node.data&lt;/code&gt;设置为true的节点称为数据节点。数据节点存储数据并且处理和数据相关的一些操作，比如CRUD，查找和聚合等。&lt;br&gt;&lt;strong&gt; Client node (客户端节点) &lt;/strong&gt;&lt;br&gt;当一个节点的&lt;code&gt;node.master&lt;/code&gt;和&lt;code&gt;node.data&lt;/code&gt;均被设置为&lt;code&gt;false&lt;/code&gt;时，它既不能存储数据也不能作为一个主节点。它被看做一个“路由器”，负责将集群层面的请求转发到主节点，将数据相关的请求转发到数据节点。&lt;br&gt;&lt;strong&gt; Tribe node (部落节点) &lt;/strong&gt;&lt;br&gt;部落节点是一种特殊类型的客户端节点，可通过&lt;code&gt;tribe.*&lt;/code&gt;配置项配置。部落节点可以连接多个集群，并且可以跨集群执行查找和其他操作。&lt;/p&gt;
&lt;p&gt;默认情况下，每个节点即是主节点也是数据节点。但是当集群扩大后，更好的做法是将主节点和数据节点独立开。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Coordinating node(协调节点)：一些请求可能会涉及到多个数据节点，比如搜索或批量索引。搜索请求一般分为两个阶段，由接受客户端请求的节点做协调，称为协调节点。在搜索的第一阶段协调节点会将请求转发到数据节点，每个节点在本地执行请求，并将结果返给协调节点。在第二阶段，协调节点会将各个结果汇总在一起。这意味着负责接受请求的客户端节点(也就是协调节点)需要用足够的内存和CPU来处理查询结果的汇总。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Master-eligible-node-候选主节点&quot;&gt;&lt;a href=&quot;#Master-eligible-node-候选主节点&quot; class=&quot;headerlink&quot; title=&quot;Master-eligible node(候选主节点)&quot;&gt;&lt;/a&gt;Master-eligible node(候选主节点)&lt;/h4&gt;&lt;p&gt;主节点主要负责创建索引，删除索引，追踪集群中的节点，分配分片等，所以有一个稳定的主节点对于集群来说非常重要，非常重要，非常重要（说三遍，哈哈哈）。集群中任何有资格成为主节点的节点都可能被选为主节点。&lt;br&gt;由于索引和搜索会对节点资源造成压力，在集群比较大时，最好将主节点和数据节点的角色区分，即不要让主节点同时也是数据节点。&lt;br&gt;通过下面的配置可以设置一个专门的主节点(只是主节点不是数据节点)。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node.master: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node.data: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 通过minimum_master_nodes来避免脑裂现象 &lt;/strong&gt;&lt;br&gt;&lt;code&gt;discovery.zen.minimum_master_nodes&lt;/code&gt;配置项说明形成集群时，集群中有资格成为主节点的节点数最少是多少，默认为1.&lt;br&gt;脑裂现象：假设集群中有两个有资格成为主节点的候选主节点，&lt;code&gt;discovery.zen.minimum_master_nodes&lt;/code&gt;配置默认为1。当由于网络问题中断了两个节点间的通信，这时两个节点都只会发现一个有资格成为主节点的节点（自己本身）， 根据配置(minimum_master_nodes = 1),符合组成一个集群的条件，所以每个节点都会成为新的master节点，从而导致形成了两个集群，也就是脑裂。直到其中一个节点重启，才会重新形成集群，并且写入重启节点的数据会丢失。假设集群中有三个有资格成为主节点的候选主节点，而这时&lt;code&gt;minimum_master_nodes&lt;/code&gt;设置为2，如果一个节点与其他两个失去了通信，被独立的节点会发现不满足设置的条件(有两个候选主节点)，所以不会选举自己为主节点。而剩下两个节点会选举出一个新的主节点，确保正常运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;discovery.zen.minimum_master_nodes&lt;/code&gt;最好设置为(候选主节点数/2) + 1, 举个例子，当有三个候选主节点时，该配置项的值为(3/2)+1=2。&lt;br&gt;也可以通过下面的API动态的更新这个值：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PUT _cluster/settings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;transient&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;discovery.zen.minimum_master_nodes&quot;: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Data-node-数据节点&quot;&gt;&lt;a href=&quot;#Data-node-数据节点&quot; class=&quot;headerlink&quot; title=&quot;Data node(数据节点)&quot;&gt;&lt;/a&gt;Data node(数据节点)&lt;/h4&gt;&lt;p&gt;数据节点包含着索引文档的分片，负责处理和数据相关的操作，比如CRUD，搜索和聚合。这些操作会涉及到IO,内存和CPU，所以要注意监控这些资源，添加更多的数据节点以防负载过重。通过下面的配置可以设置一个专门的数据节点(只是数据节点不是主节点)。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node.master: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node.data: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Client-node-客户端节点&quot;&gt;&lt;a href=&quot;#Client-node-客户端节点&quot; class=&quot;headerlink&quot; title=&quot;Client node(客户端节点)&quot;&gt;&lt;/a&gt;Client node(客户端节点)&lt;/h4&gt;&lt;p&gt;客户端节点主要负责路由请求，汇总搜索结果等，本质上来看，客户端节点更像一个负载均衡器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：集群中添加过多的客户端节点会增加整个集群的负担。所以不要过大夸大客户端节点的好处，数据节点也可以像客户端节点一样服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 通过下面的配置可以设置一个专门的客户端节点(不是数据节点也不是主节点)。&lt;br&gt; &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node.master: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node.data: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;设置节点的数据路径&quot;&gt;&lt;a href=&quot;#设置节点的数据路径&quot; class=&quot;headerlink&quot; title=&quot;设置节点的数据路径&quot;&gt;&lt;/a&gt;设置节点的数据路径&lt;/h4&gt;&lt;p&gt;&lt;code&gt;path.data&lt;/code&gt;&lt;br&gt;每个数据节点和主节点都需要在文件中存储一些关于分片，索引和集群的元数据。&lt;code&gt;elasticsearch.yml&lt;/code&gt;文件中的&lt;code&gt;path.data&lt;/code&gt;可以配置文件的绝对路径或相对路径，默认值是&lt;code&gt;$ES_HOME/data&lt;/code&gt;，也可以通过命令配置。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin/elasticsearch --path.data /var/elasticsearch/data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;node.max_local_storage-nodes&lt;/code&gt;&lt;br&gt;上面的设置可以被不同的节点共享（在生产环境下建议一个服务器只运行一个节点）。为了避免多个节点共享同一个路径，可以在&lt;code&gt;elasticsearch.yml&lt;/code&gt;中添加如下配置。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node.max_&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;_storage_nodes: 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，不要将不同类型节点的信息存储到同一个目录下，可能会造称数据丢失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Thread-Pool-线程池&quot;&gt;&lt;a href=&quot;#Thread-Pool-线程池&quot; class=&quot;headerlink&quot; title=&quot;Thread Pool(线程池)&quot;&gt;&lt;/a&gt;Thread Pool(线程池)&lt;/h3&gt;&lt;p&gt;为了提升线程内存消耗的管理，每个Es节点都有多个线程池。&lt;/p&gt;
&lt;h4 id=&quot;线程池类型&quot;&gt;&lt;a href=&quot;#线程池类型&quot; class=&quot;headerlink&quot; title=&quot;线程池类型&quot;&gt;&lt;/a&gt;线程池类型&lt;/h4&gt;&lt;p&gt;下面介绍一下线程池的三种类型和各自的一些参数：&lt;br&gt;&lt;strong&gt;cached&lt;/strong&gt;:&lt;br&gt;    &lt;code&gt;cached&lt;/code&gt;类型的线程池没有限制大小，当有pending的请求时就会创建一个线程。这类线程池可以防止请求阻塞或被拒绝。未使用的线程会在过期(默认5分钟)之后消亡。&lt;code&gt;cache&lt;/code&gt;类型专门为&lt;code&gt;generic&lt;/code&gt;线程池保留的。&lt;br&gt;    &lt;code&gt;keep_alive&lt;/code&gt;参数定义了未使用的线程的存活时间。&lt;br&gt;    &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;threadpool:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   generic:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       keep_alive: 2m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fixed&lt;/strong&gt;:&lt;br&gt;    &lt;code&gt;fixed&lt;/code&gt;类型的线程池持有固定个数的线程处理请求队列。&lt;code&gt;size&lt;/code&gt;参数用来控制线程的个数，默认为cpu核心数的5倍。&lt;code&gt;queue_size&lt;/code&gt;参数用来控制请求队列的大小。默认值为-1，意味着无上限。如果请求队列已满，那么接下来到来的请求会被终止。&lt;br&gt;    &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;threadpool:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   index:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       size: 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       queue_size: 1000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scaling&lt;/strong&gt;:&lt;br&gt;    &lt;code&gt;scaling&lt;/code&gt;线程池中线程数可动态变化。线程数在1和&lt;code&gt;size&lt;/code&gt;参数值的中间。&lt;br&gt;    &lt;code&gt;keep_alive&lt;/code&gt;参数定义了未使用的线程的存活时间。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;threadpool:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   warmer:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       size: 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       keep_alive: 2m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;Es中重要的线程池&quot;&gt;&lt;a href=&quot;#Es中重要的线程池&quot; class=&quot;headerlink&quot; title=&quot;Es中重要的线程池&quot;&gt;&lt;/a&gt;Es中重要的线程池&lt;/h4&gt;&lt;p&gt;以下是Es中几个比较重要的线程池及他们的类型:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;线程池&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;generic&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责一些诸如发现节点之类的通用操作。该线程池类型为&lt;code&gt;cache&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;index&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责索引数据/删除数据操作，类型为&lt;code&gt;fixed&lt;/code&gt;，默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;200&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;search&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责统计/搜索操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;int((available_processors * 3) / 2) + 1&lt;/code&gt;,队列大小为&lt;code&gt;1000&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;suggest&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责获取提示操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;1000&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;get&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责get操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;1000&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;bulk&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责批量操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;50&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;percolate&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责过滤操作，类型为&lt;code&gt;fixed&lt;/code&gt;,默认线程数为&lt;code&gt;available processors&lt;/code&gt;,队列大小为&lt;code&gt;1000&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;snapshot&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责快照/恢复操作，类型为&lt;code&gt;scaling&lt;/code&gt;,默认线程数为&lt;code&gt;min(5, (available processors)/2)&lt;/code&gt;,默认未使用线程的存活时间为&lt;code&gt;5m&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;warmer&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责warm-up操作，类型为&lt;code&gt;scaling&lt;/code&gt;,默认线程数为&lt;code&gt;min(5, (available processors)/2)&lt;/code&gt;,默认未使用线程的存活时间为&lt;code&gt;5m&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;refresh&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责更新操作，类型为&lt;code&gt;scaling&lt;/code&gt;,默认线程数为&lt;code&gt;min(10, (available processors)/2)&lt;/code&gt;,默认未使用线程的存活时间为&lt;code&gt;5m&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;listener&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;负责java client的执行，类型为&lt;code&gt;scaling&lt;/code&gt;,默认线程数为&lt;code&gt;min(10, (available processors)/2)&lt;/code&gt;,默认未使用线程的存活时间为&lt;code&gt;5m&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;处理器设置&quot;&gt;&lt;a href=&quot;#处理器设置&quot; class=&quot;headerlink&quot; title=&quot;处理器设置&quot;&gt;&lt;/a&gt;处理器设置&lt;/h4&gt;&lt;p&gt;Es可以自动检测处理器的数量，线程池的配置也会基于这个值。可能存在检测失败的情况，这是可以通过&lt;code&gt;processors&lt;/code&gt;配置显式设置这个值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意以上这些配置如果不是很了解，还是不要轻易改动，使用默认配置即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看累了吧，分享个觉得还不错的视频~~&lt;/p&gt;
&lt;object width=&quot;640&quot; height=&quot;360&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://swf.ws.126.net/openplayer/v02/-0-2_MBFLN6BJF_MBFLNJGFE-vimg1_ws_126_net//image/snapshot_movie/2016/2/F/F/MBFLNJGFF-1423031805654.swf?isTEDPlay=1&quot;&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;&gt;&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot;&gt;&lt;embed src=&quot;http://swf.ws.126.net/openplayer/v02/-0-2_MBFLN6BJF_MBFLNJGFE-vimg1_ws_126_net//image/snapshot_movie/2016/2/F/F/MBFLNJGFF-1423031805654.swf?isTEDPlay=1&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;640&quot; height=&quot;360&quot; allowfullscreen=&quot;true&quot; wmode=&quot;transparent&quot; allowscriptaccess=&quot;always&quot;&gt;&lt;/object&gt;







</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;接上文。。。。。。按照官方文档(版本2.2)和一些参考资料整理一下elasticsearch的可配置项。先整理了Node，ThreadPool两个模块的可配置项，其他模块(比如Cluster)会在之后慢慢整理的。本文只包含两个模块可用配置项的含义及用法，并不涉及应该如何优化，这是为什么呢？因为俺也不会。。。。。(欢迎指正错误，康桑阿米达)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关博客：&lt;a href=&quot;http://yemengying.com/2016/03/18/Elasticsearch%E9%85%8D%E7%BD%AE%E9%A1%B9-Local-gateway-HTTP-Indices-Network-Settings%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/&quot;&gt;elasticsearch 配置项(一)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wuli光洙镇楼~~&lt;br&gt;&lt;img src=&quot;/images/guangzhu.jpg&quot; alt=&quot;hahaha&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yemengying.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yemengying.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>[Elasticsearch配置项(一)]Local gateway,HTTP,Indices,Network Settings模块配置</title>
    <link href="http://yemengying.com/2016/03/18/Elasticsearch%E9%85%8D%E7%BD%AE%E9%A1%B9-Local-gateway-HTTP-Indices-Network-Settings%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/"/>
    <id>http://yemengying.com/2016/03/18/Elasticsearch配置项-Local-gateway-HTTP-Indices-Network-Settings模块配置/</id>
    <published>2016-03-18T09:48:10.000Z</published>
    <updated>2016-03-21T14:05:31.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;近两周线上的搜索接口间隔性莫名其妙的出现莫名其妙的异常，比如神马NoAvailableThread，NoAvailableWorker之类的。可能是由于部门中没有很懂elasticsearch的人，只能摸着石头过河，所以一直使用elasticsearch的默认配置并没有对其线程池和内存分配进行优化造成的。所以按照官方文档(版本2.2)和一些参考资料整理一下elasticsearch的可配置项，看看可不可以优化一下。先整理了Local gateway,HTTP,Indices,Network Settings四个模块的可配置项，其他模块(比如Cluster)会在之后慢慢整理的。本文只包含四个模块可用配置项的含义及用法，并不涉及应该如何优化，这是为什么呢？因为俺也不会。。。。。(欢迎指正错误，康桑阿米达)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关博客：&lt;a href=&quot;http://yemengying.com/2016/03/21/elasticsearch-settings2/&quot;&gt;elasticsearch 配置项(二)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/baobao.jpg&quot; alt=&quot;哇咔咔咔&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;参考资料-万分感谢-：&quot;&gt;&lt;a href=&quot;#参考资料-万分感谢-：&quot; class=&quot;headerlink&quot; title=&quot;参考资料(万分感谢)：&quot;&gt;&lt;/a&gt;参考资料(万分感谢)：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://donlianli.iteye.com/blog/2115979&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://donlianli.iteye.com/blog/2115979&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://aoyouzi.iteye.com/blog/2164820&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://aoyouzi.iteye.com/blog/2164820&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/jingkyks/article/details/41081261&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/jingkyks/article/details/41081261&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://m.oschina.net/blog/387512&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://m.oschina.net/blog/387512&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://my.oschina.net/secisland/blog/618702?fromerr=ZGR1hlby#OSC_h4_5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/secisland/blog/618702?fromerr=ZGR1hlby#OSC_h4_5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chenryn/ELKstack-guide-cn/blob/master/elasticsearch/performance/cache.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/chenryn/ELKstack-guide-cn/blob/master/elasticsearch/performance/cache.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Local-gateway模块&quot;&gt;&lt;a href=&quot;#Local-gateway模块&quot; class=&quot;headerlink&quot; title=&quot;Local gateway模块&quot;&gt;&lt;/a&gt;Local gateway模块&lt;/h3&gt;&lt;p&gt;官网对应链接：&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-gateway.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Local gateway&lt;/a&gt;&lt;br&gt;该模块用于存储集群信息和分片数据，以便整个集群重启后可以恢复。&lt;br&gt;以下的一些静态配置，需要在集群的每一个节点上设置，用来控制节点需要等待多长时间之后再尝试恢复存储在本地的数据。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;配置项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;gateway.expected_nodes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;期望的集群中节点的数量，当集群中的节点数达到设定值时立即开始启动恢复本地数据的进程(会忽略recover_after_time配置)，默认为0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;gateway.expected_master_nodes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;期望的集群中master节点的数量，当集群中的节点数达到设定值时立即开始启动恢复本地数据的进程(会忽略recover_after_time配置)，默认为0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;gateway.expected_data_nodes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;期望的集群中master节点的数量，当集群中的节点数达到设定值时立即开始启动恢复本地数据的进程(会忽略recover_after_time配置)，默认为0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;gateway.recover_after_time&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;当没有达到期望的节点数时，恢复进程会在等待配置时间之后尝试启动。当期望的节点数设置为1时，等待时间默认为5m&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一旦到达了recover_after_time设置的时间，还要满足以下的配置条件，恢复进程才会启动。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;配置项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;gateway.recover_after_nodes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;需要多少个节点加入集群&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;gateway.recover_after_master_nodes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;需要多少个master节点加入集群&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;gateway.recover_after_data_nodes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;需要多少个data节点加入集群&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：这些配置只有在整个集群重启时才会有用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;HTTP模块&quot;&gt;&lt;a href=&quot;#HTTP模块&quot; class=&quot;headerlink&quot; title=&quot;HTTP模块&quot;&gt;&lt;/a&gt;HTTP模块&lt;/h3&gt;&lt;p&gt;官网对应链接：&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-http.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP&lt;/a&gt;&lt;br&gt;HTTP模块用来通过HTTP暴露Es的API。因为HTTP机制是完全异步的，这意味着等待响应时不会阻塞线程。使用异步的通信可以解决&lt;a href=&quot;http://en.wikipedia.org/wiki/C10k_problem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C10k&lt;/a&gt;的问题。&lt;br&gt;如果可以，可考虑使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Keepalive#HTTP_Keepalive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP keep alive&lt;/a&gt;来连接以便提升性能。并且不要在客户端使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Chunked_transfer_encoding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP chunking&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h4&gt;&lt;p&gt;下面表中是关于HTTP模块的一些配置。需要注意的是，它们都不能动态更新，必须配置在&lt;code&gt;elasticsearch.yml&lt;/code&gt;文件中。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;配置项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.port&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;绑定端口的范围 默认9200-9300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.publish_port&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;客户端与节点交互时需要使用的端口。这一配置在集群节点处于防火墙后时很有用，默认和&lt;code&gt;http.port&lt;/code&gt;中分配的端口一致。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.bind_host&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;绑定http服务的host地址，默认和&lt;code&gt;http.host&lt;/code&gt;(如果设置了)或者&lt;code&gt;network.bind_host&lt;/code&gt;一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.publish_host&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;客户端访问的host地址，默认和&lt;code&gt;http.host&lt;/code&gt;(如果设置了)或者&lt;code&gt;network.public_host&lt;/code&gt;一致&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.host&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;用来设置&lt;code&gt;http.bind_host&lt;/code&gt;和&lt;code&gt;http.publish_host&lt;/code&gt;,默认为&lt;code&gt;http.host&lt;/code&gt;或者&lt;code&gt;network.host&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.max_content_length&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;设置请求内容的最大大小。默认&lt;code&gt;100mb&lt;/code&gt;。如果设置的数值超过了&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;,会被重置为100mb。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.max_initial_line_length&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;HTTP请求URL的最大长度，默认&lt;code&gt;4kb&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.max_header_size&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;请求头的最大大小，默认&lt;code&gt;8kb&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.compression&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否支持压缩(使用Accept-Encoding)，默认&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.compression_level&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;定义使用的压缩级别，默认为6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.cors.enabled&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否允许跨域请求。默认为&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.cors.allow-origin&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;定义允许哪些源请求。可以使用正则表达式，例如&lt;code&gt;/https?:\/\/localhost(:[0-9]+)?/&lt;/code&gt;可设置支持本地HTTP和HTTPS请求。也可以设置为&lt;code&gt;*&lt;/code&gt;,但是会存在安全隐患，因为任何来源都可访问Elasticsearch(以下简称为Es)实例。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.cors.max-age&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;浏览器会发送一个“预检”的OPTIONS请求，来检查CORS设置。&lt;code&gt;max-age&lt;/code&gt;定义应该缓存多长时间的结果。默认为&lt;code&gt;1728000&lt;/code&gt;（20天）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.cors.allow-methods&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;定义了允许的请求方式，默认允许&lt;code&gt;OPTIONS&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.cors.allow-headers&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;定义了允许的请求头信息。默认允许&lt;code&gt;X-Requested-With&lt;/code&gt;, &lt;code&gt;Content-Type&lt;/code&gt;, &lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.cors.allow-credentials&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否返回设置的&lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;头信息。默认为false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.detailed_errors.enabled&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否输出详细的错误信息和堆栈。默认为&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.pipelining&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否启用HTTP管道支持, 默认为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.pipelining.max_events&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在一个HTTP连接被关闭之前内存队列中允许的最大的事件数量，默认为&lt;code&gt;10000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;该模块也可使用一些公共的网络配置(见网络设置一节)。&lt;/p&gt;
&lt;h4 id=&quot;禁用HTTP&quot;&gt;&lt;a href=&quot;#禁用HTTP&quot; class=&quot;headerlink&quot; title=&quot;禁用HTTP&quot;&gt;&lt;/a&gt;禁用HTTP&lt;/h4&gt;&lt;p&gt;HTTP模块可以通过将&lt;code&gt;http.enable&lt;/code&gt;设置为false来禁用。Es节点(和Java客户端)的内部通信使用transport接口，而非HTTP。这意味着我们可以将不接受直接REST请求的节点的HTTP禁用。比如，可以将数据节点的http禁用，创建非数据节点用来处理所有的REST请求。需要注意的是，不能向一个已经禁用了HTTP的节点直接发送任何REST请求。&lt;/p&gt;
&lt;h3 id=&quot;Indices-索引模块&quot;&gt;&lt;a href=&quot;#Indices-索引模块&quot; class=&quot;headerlink&quot; title=&quot;Indices(索引模块)&quot;&gt;&lt;/a&gt;Indices(索引模块)&lt;/h3&gt;&lt;p&gt;官网对应链接：&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-indices.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Indices&lt;/a&gt;&lt;br&gt;这一模块可以对所有索引的索引相关配置进行全局控制。&lt;br&gt;相关的配置如下：&lt;/p&gt;
&lt;h4 id=&quot;Circuit-breaker-断路器&quot;&gt;&lt;a href=&quot;#Circuit-breaker-断路器&quot; class=&quot;headerlink&quot; title=&quot;Circuit breaker(断路器)&quot;&gt;&lt;/a&gt;Circuit breaker(断路器)&lt;/h4&gt;&lt;p&gt;官网对应链接：&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Circuit breaker&lt;/a&gt;&lt;br&gt;该模块用来限制内存的使用，避免出现内存溢出。&lt;br&gt;Es中包含多个Circuit breaker(断路器)用来阻止可能造成OutOfMemoryError异常的操作。此外，还有一个父级别断路器限制了可以使用的总内存。&lt;br&gt;这些配置都可通过&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cluster-update-settings&lt;/a&gt;动态更新。&lt;br&gt;&lt;strong&gt;父断路器&lt;/strong&gt;&lt;br&gt;父级别的断路器可以通过&lt;code&gt;indices.breaker.total.limit&lt;/code&gt;来设置，默认是JVM堆的70%&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Filed data断路器&lt;/strong&gt;&lt;br&gt;允许Es提前估计加载一个字段需要的内存，然后检查加载需要的fielddata会不会导致总的内存大小超过设置的百分比。这样可以预防在加载的过程中产生异常。默认的限制是60%的JVM堆，可以通过以下参数配置。&lt;br&gt;&lt;code&gt;indices.breaker.fielddata.limit&lt;/code&gt;：限制fielddata所能占用的最大内存，默认为JVM堆的60%&lt;br&gt;&lt;code&gt;indices.breaker.fielddata.overhead&lt;/code&gt;:一个常量。es将使用这个值乘以field实际的大小作Field估算值，默认为1.03&lt;br&gt;&lt;strong&gt;请求断路器&lt;/strong&gt;&lt;br&gt;允许Es阻止使用内存超过限制的请求。&lt;br&gt;&lt;code&gt;indices.breaker.request.limit&lt;/code&gt;:默认JVM堆的40%&lt;br&gt;&lt;code&gt;indices.breaker.request.overhead&lt;/code&gt;:一个常量。所有请求的预估内存乘以这个常量就是最终的估计值。默认为1&lt;/p&gt;
&lt;h4 id=&quot;Fielddata-cache-字段数据缓存&quot;&gt;&lt;a href=&quot;#Fielddata-cache-字段数据缓存&quot; class=&quot;headerlink&quot; title=&quot;Fielddata cache(字段数据缓存)&quot;&gt;&lt;/a&gt;Fielddata cache(字段数据缓存)&lt;/h4&gt;&lt;p&gt;限制内存中的数据缓存可以使用多大的堆内存&lt;br&gt;field data缓存主要用于针对一个字段排序和做聚合计算。为了快速的访问某些值，Es会将这些字段值加载到内存中。需要注意的是将字段加载到内存很耗费资源，所以官方建议保证有足够的内存，并且保持所有字段被加载。&lt;br&gt;field data内存的大小可通过&lt;code&gt;indices.fielddata.cache.size&lt;/code&gt;配置项控制。要注意的是，当这个缓存不够用时，为了腾出空间给新的缓存，原来缓存的字段会被挤出来，这会导致系统性能下降。&lt;br&gt;&lt;code&gt;indices.fielddata.cache.size&lt;/code&gt;:field data缓存的最大值。可以设为节点堆空间的30%，也可设置为一个确定的值，比如12GB。默认无限大，生产环境要注意设置这个值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：这些静态配置需要在集群的每一个节点上设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;监控field data&lt;/strong&gt;&lt;br&gt;可以通过&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node Stats API&lt;/a&gt;监控内存使用情况。&lt;/p&gt;
&lt;h4 id=&quot;Node-query-cache-查询缓存&quot;&gt;&lt;a href=&quot;#Node-query-cache-查询缓存&quot; class=&quot;headerlink&quot; title=&quot;Node query cache(查询缓存)&quot;&gt;&lt;/a&gt;Node query cache(查询缓存)&lt;/h4&gt;&lt;p&gt;配置缓存查询结果可以使用多少堆内存&lt;br&gt;查询缓存负责对查询结果进行缓存。每一个节点都有一个查询缓存，由所有分片共享。缓存采用LRU机制，将最近最少使用的内容替换成新数据。查询缓存只会缓存filter的内容。&lt;br&gt;下面的配置需要在集群的每一个节点上配置。&lt;br&gt;&lt;code&gt;indices.queries.cache.size&lt;/code&gt;: 控制过滤结果缓存的大小。默认是10%。也可设置为一个确定的值，如&lt;code&gt;512mb&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Indexing-buffer-索引缓冲&quot;&gt;&lt;a href=&quot;#Indexing-buffer-索引缓冲&quot; class=&quot;headerlink&quot; title=&quot;Indexing buffer(索引缓冲)&quot;&gt;&lt;/a&gt;Indexing buffer(索引缓冲)&lt;/h4&gt;&lt;p&gt;控制分配多少内存给索引进程&lt;br&gt;索引缓冲用来存储新索引的文档。当缓冲区满了时，缓冲的文档会被写到磁盘的一个段，划分到该节点的所有分片上。&lt;br&gt;以下这些静态配置需要在集群的每一个节点上设置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;配置项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.memory.index_buffer_size&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;设置索引缓冲区的大小。可设置一个百分比或者字节大小。默认为10%，意味着节点的10%的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.memory.min_index_buffer_size&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如果indices.memory.index_buffer_size被设置成了一个百分比，本配置项可以用来代表缓冲区的最小值，默认为48mb。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.memory.max_index_buffer_size&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如果indices.memory.index_buffer_size被设置成了一个百分比，本配置项可以用来代表缓冲区的最大值，默认无限大。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.memory.min_shard_index_buffer_size&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;为每个分片自己的索引缓冲区设置最小值。默认4mb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Shard-request-cache-分片请求缓存&quot;&gt;&lt;a href=&quot;#Shard-request-cache-分片请求缓存&quot; class=&quot;headerlink&quot; title=&quot;Shard request cache(分片请求缓存)&quot;&gt;&lt;/a&gt;Shard request cache(分片请求缓存)&lt;/h4&gt;&lt;p&gt;控制分片级别的查询缓存的行为。&lt;br&gt;当一个搜索请求是针对一个索引或者多个索引的时候，每一个涉及到的分片都会在本地进行搜索，然后把结果返回到协调节点，在由协调节点把这些结果合并到一起。由于分片缓存模块会将本地的查询结果缓存，所以频率高的搜索请求会立刻返回结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：目前，请求缓存只缓存查询条件size=0的搜索，缓存的内容有hits.total, aggregations,suggestions，而不缓存原始的hits。并且通过now查询的结果也不缓存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只缓存查询条件size=0的搜索原因如下(引用自&lt;a href=&quot;https://github.com/chenryn/ELKstack-guide-cn/blob/master/elasticsearch/performance/cache.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ELKstack-guide-cn&lt;/a&gt;):ES对请求的处理过程是有不同类型的，默认的叫 query_then_fetch。在这种情况下，各数据节点处理检索请求后，返回的是只包含文档id和相关性分值的结果，这一段处理，叫做query阶段；汇聚到这份结果后，按照分值排序，得到一个全集群最终需要的文档id，再向对应节点发送一次文档获取请求，拿到文档内容，这一段处理，叫做 fetch阶段。两段都结束后才返回响应。&lt;br&gt;此外，还有DFS_query_then_fetch类型，提高小数据量时的精确度;query_and_fetch类型，在有明确routing时可以省略一个数据来回;count类型，不关心文档内容只需要计数时省略 fetch阶段;scan类型，批量获取数据省略query阶段，在reindex时就是使用这种类型。&lt;br&gt;回到query cache，这里这个query，就是处理过程中query阶段的意思。各个节点上的数据分片，会在处理完query阶段时，将得到的本分片有关该请求的计数值，缓存起来。&lt;br&gt;根据上面的请求类型介绍，显然,只有当?search_type=count的时候，这个query cache才能起到作用。&lt;br&gt;&lt;strong&gt;缓存失效&lt;/strong&gt;&lt;br&gt;在分片数据真正发生变化时刷新索引分片，缓存的结果会自动失效。刷新间隔越长缓存的数据越多。当缓存满了的时候，会将最少使用的数据删除。&lt;br&gt;缓存可以通过&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clear-cache API&lt;/a&gt;手动设置过期。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XPOST &lt;span class=&quot;string&quot;&gt;&#39;localhost:9200/kimchy,elasticsearch/_cache/clear?request_cache=true&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;默认启动缓存&lt;/strong&gt;&lt;br&gt;分片请求缓存默认是不启动的，但可以在创建新的索引时通过下面的方式启动：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XPUT localhost:9200/my_index &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;settings&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;index.requests.cache.enable&quot;: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以通过&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;update-settings API&lt;/a&gt;为就索引动态的启动和关闭缓存。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XPUT localhost:9200/my_index/_settings &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &quot;index.requests.cache.enable&quot;: true &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;为每个请求启动缓存&lt;/strong&gt;&lt;br&gt;可以在请求时通过请求参数&lt;code&gt;request_cache&lt;/code&gt;来为每个请求启动和关闭缓存。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl &lt;span class=&quot;string&quot;&gt;&#39;localhost:9200/my_index/_search?request_cache=true&#39;&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;size&quot;: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;aggs&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;popular_colors&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;terms&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;field&quot;: &quot;colors&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓存设置&lt;/strong&gt;&lt;br&gt;缓存是在节点级别管理，默认JVM堆内存的&lt;code&gt;1%&lt;/code&gt;。可在&lt;code&gt;config/elasticsearch.yml&lt;/code&gt;文件中更改。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;indices.requests.cache.size: 2%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以通过&lt;code&gt;indices.requests.cache.expire&lt;/code&gt;设置缓存过期时间，但是没有必要，因为旧的结果会在索引刷新时自动失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;检测缓存使用&lt;/strong&gt;&lt;br&gt;可通过&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-stats.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;indices-stats API&lt;/a&gt;检测索引中缓存的使用情况&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl &lt;span class=&quot;string&quot;&gt;&#39;localhost:9200/_stats/request_cache?pretty&amp;amp;human&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或通过&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodes-stats API&lt;/a&gt;查看节点的使用情况。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl &lt;span class=&quot;string&quot;&gt;&#39;localhost:9200/_nodes/stats/indices/request_cache?pretty&amp;amp;human&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Indices-Recovery-索引恢复&quot;&gt;&lt;a href=&quot;#Indices-Recovery-索引恢复&quot; class=&quot;headerlink&quot; title=&quot;Indices Recovery(索引恢复)&quot;&gt;&lt;/a&gt;Indices Recovery(索引恢复)&lt;/h4&gt;&lt;p&gt;限制分片恢复进程的资源&lt;br&gt;以下的配置用来管理恢复策略：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;配置项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.recovery.concurrent_streams&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;默认是3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.recovery.concurrent_small_file_streams&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;默认2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.recovery.file_chunk_size&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;默认512kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.recovery.translog_ops&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;默认1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.recovery.translog_size&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;默认512kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.recovery.compress&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;默认true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;indices.recovery.max_bytes_per_sec&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;默认40mb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这些配置都可通过&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cluster-update-settings&lt;/a&gt;动态更新。&lt;/p&gt;
&lt;h4 id=&quot;TTL-interval&quot;&gt;&lt;a href=&quot;#TTL-interval&quot; class=&quot;headerlink&quot; title=&quot;TTL interval&quot;&gt;&lt;/a&gt;TTL interval&lt;/h4&gt;&lt;p&gt;控制过期文档的删除&lt;br&gt;设有ttl值的文档会在过期之后被删除。以下动态配置控制了删除文档的检查间隔，和批量删除的大小。&lt;br&gt;&lt;code&gt;indices.ttl.interval&lt;/code&gt;：删除进程启动间隔。默认60s&lt;br&gt;&lt;code&gt;indices.ttl.bulk_size&lt;/code&gt;：删除进程的数量。默认为1000&lt;/p&gt;
&lt;h3 id=&quot;NetWork-Settings-网络设置&quot;&gt;&lt;a href=&quot;#NetWork-Settings-网络设置&quot; class=&quot;headerlink&quot; title=&quot;NetWork Settings(网络设置)&quot;&gt;&lt;/a&gt;NetWork Settings(网络设置)&lt;/h3&gt;&lt;p&gt;Es默认只和localhost绑定。如果想要在多个服务器上启动生产环境的集群需要配置一些基本的网络设置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：要小心使用网络配置，不要将不受保护的节点暴露在公共网络中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;常用的网络设置&quot;&gt;&lt;a href=&quot;#常用的网络设置&quot; class=&quot;headerlink&quot; title=&quot;常用的网络设置&quot;&gt;&lt;/a&gt;常用的网络设置&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;配置项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;network.host&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将节点绑定到设置的hostname或ip地址，并通知集群中的其他节点。该配置项接受IP地址，主机名，一些特定值(见下一个表)和由上面几项组成的数组。默认为&lt;code&gt;_local_&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;discovery.zen.ping.unicast.hosts&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如果一个节点加入一个集群，需要知道集群中其他节点hostname和ip地址。本配置项为节点提供了其他节点的初始列表。默认&lt;code&gt;[&amp;quot;127.0.0.1&amp;quot;,&amp;quot;[::1]&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;http.port&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;为HTTP请求绑定端口，可设置单个端口，也可设置一个范围。如果设定了一个范围，节点会绑定在范围中第一个可用的端口。默认&lt;code&gt;9200-9300&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;transport.tcp.port&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;节点间内部通信绑定的端口，可设置单个端口，也可设置一个范围。如果设定了一个范围，节点会绑定在范围中第一个可用的端口。默认&lt;code&gt;9300-9400&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;network-host可使用的一些特殊值&quot;&gt;&lt;a href=&quot;#network-host可使用的一些特殊值&quot; class=&quot;headerlink&quot; title=&quot;network.host可使用的一些特殊值&quot;&gt;&lt;/a&gt;&lt;code&gt;network.host&lt;/code&gt;可使用的一些特殊值&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;特殊值&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;_[networkInterface]_&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;指定网卡的IP地址，如_en0_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;_local_&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;本机ip地址，如127.0.0.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;_site_&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;任意一个site-local地址，如192.168.0.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;_global_&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;任意一个globally-scoped地址，如8.8.8.8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;IPv4 vs IPv6&lt;/strong&gt;&lt;br&gt;以上特殊值默认在IPV4和IPv6下均可使用，可以通过:ipv4和:ipv6标识符来做限制。例如,&lt;code&gt;_en0:ipv4_&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;高级网络设置&quot;&gt;&lt;a href=&quot;#高级网络设置&quot; class=&quot;headerlink&quot; title=&quot;高级网络设置&quot;&gt;&lt;/a&gt;高级网络设置&lt;/h4&gt;&lt;p&gt;常用网络设置一节中提到的&lt;code&gt;network.host&lt;/code&gt;配置项只是一个为了同时设置&lt;code&gt;band_host&lt;/code&gt;和&lt;code&gt;publish_host&lt;/code&gt;的快捷设置。为了一下更复杂的情况，比如在一个代理服务器后运行节点，可能需要一些不同的配置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;配置项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;network.bind_host&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;设置节点绑定的ip地址，用来监听请求。默认&lt;code&gt;network.host&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;network.publish_host&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;配置其他节点与本节点通信的地址，默认为&lt;code&gt;network.bind_host&lt;/code&gt;中的最佳地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上配置都和&lt;code&gt;network.host&lt;/code&gt;一样，可配置ip地址，hostname和某些特殊值。&lt;/p&gt;
&lt;h4 id=&quot;高级TCP设置&quot;&gt;&lt;a href=&quot;#高级TCP设置&quot; class=&quot;headerlink&quot; title=&quot;高级TCP设置&quot;&gt;&lt;/a&gt;高级TCP设置&lt;/h4&gt;&lt;p&gt;任何使用TCP的模块（如HTTP和Transport）共享以下的配置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;配置项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;network.tcp.no_delay&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否启用&lt;a href=&quot;https://en.wikipedia.org/wiki/Nagle%27s_algorithm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP no delay&lt;/a&gt;。默认为&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;network.tcp.keep_alive&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否启用&lt;a href=&quot;https://en.wikipedia.org/wiki/Keepalive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP keep alive&lt;/a&gt;。默认为&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;network.tcp.reuse_address&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一个地址是否可以重复使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;network.tcp.send_buffer_size&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;TCP发送缓冲区的大小，默认不设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;network.tcp.receive_buffer_size&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;TCP接收缓冲区的大小，默认不设置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Transport和HTTP协议&quot;&gt;&lt;a href=&quot;#Transport和HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;Transport和HTTP协议&quot;&gt;&lt;/a&gt;Transport和HTTP协议&lt;/h4&gt;&lt;p&gt;Es会基于上面的配置暴露两种网络协议，它们也可以进一步独立配置。&lt;br&gt;&lt;strong&gt;TCP transport&lt;/strong&gt; 用于节点之间通信 具体可见Transport模块一节。&lt;br&gt;&lt;strong&gt;HTTP&lt;/strong&gt; 用于暴露基于JSON的http接口。具体可见HTTP模块一节。&lt;/p&gt;
&lt;p&gt;都看到这了，听首歌再走吧。分享首适合抖腿的歌，写博客时听这种歌真是分分钟都要把键盘按穿。。。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=26095964&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;










</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近两周线上的搜索接口间隔性莫名其妙的出现莫名其妙的异常，比如神马NoAvailableThread，NoAvailableWorker之类的。可能是由于部门中没有很懂elasticsearch的人，只能摸着石头过河，所以一直使用elasticsearch的默认配置并没有对其线程池和内存分配进行优化造成的。所以按照官方文档(版本2.2)和一些参考资料整理一下elasticsearch的可配置项，看看可不可以优化一下。先整理了Local gateway,HTTP,Indices,Network Settings四个模块的可配置项，其他模块(比如Cluster)会在之后慢慢整理的。本文只包含四个模块可用配置项的含义及用法，并不涉及应该如何优化，这是为什么呢？因为俺也不会。。。。。(欢迎指正错误，康桑阿米达)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关博客：&lt;a href=&quot;http://yemengying.com/2016/03/21/elasticsearch-settings2/&quot;&gt;elasticsearch 配置项(二)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/baobao.jpg&quot; alt=&quot;哇咔咔咔&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yemengying.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yemengying.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>疯狂动物城</title>
    <link href="http://yemengying.com/2016/03/15/zootopia/"/>
    <id>http://yemengying.com/2016/03/15/zootopia/</id>
    <published>2016-03-15T04:44:12.000Z</published>
    <updated>2016-03-15T13:08:24.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;真的是太喜欢疯狂动物城这部电影了，二刷之后还是想去电影院接着看，对这种毛茸茸的小动物真是一点抵抗力都没有，尤其是苏苏的狐尼克。放点网上搜来的图(权侵删)，方便看到它们，哇咔咔咔咔。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;110&quot; src=&quot;http://music.163.com/outchain/player?type=1&amp;id=3443094&amp;auto=0&amp;height=90&quot;&gt;&lt;/iframe&gt;


&lt;p&gt;&lt;strong&gt;蠢萌蠢萌，慢的出奇，戳中笑点的树懒flash&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/flash1.gif&quot; alt=&quot;flash 1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/flash2.gif&quot; alt=&quot;flash 2&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/flash3.gif&quot; alt=&quot;flash 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;被圈饭的兔狐CP&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/nick&amp;amp;judy2.gif&quot; alt=&quot;狐尼克&amp;amp;兔朱迪&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/nick&amp;amp;judy1.gif&quot; alt=&quot;狐尼克&amp;amp;兔朱迪&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/nick&amp;amp;judy3.gif&quot; alt=&quot;狐尼克&amp;amp;兔朱迪&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最爱的狐尼克&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/nick2.jpg&quot; alt=&quot;狐尼克&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;勇敢的兔朱迪&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/judy1.gif&quot; alt=&quot;兔朱迪&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;致敬教父的Mr. Big&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/MrBig.jpg&quot; alt=&quot;Mr Big&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;少女心的豹警官&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/bao1.gif&quot; alt=&quot;萌萌的豹豹1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/bao2.gif&quot; alt=&quot;萌萌的豹豹2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大合照&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/zootopia/zootopia.jpg&quot; alt=&quot;zootopia&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从冰雪奇缘到超能陆战队再到疯狂动物城，不得不说迪斯尼的动画越来越好看了。好的动画片真的是老少皆宜的，让人在捧腹大笑的同时又能有所思考，不管是关于消除偏见，梦想还是成长~~~~。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;真的是太喜欢疯狂动物城这部电影了，二刷之后还是想去电影院接着看，对这种毛茸茸的小动物真是一点抵抗力都没有，尤其是苏苏的狐尼克。放点网上搜来的图(权侵删)，方便看到它们，哇咔咔咔咔。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="电影" scheme="http://yemengying.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 --行为参数化(behavior parameterization)</title>
    <link href="http://yemengying.com/2016/02/20/Java-8-%E8%A1%8C%E4%B8%BA%E5%8F%82%E6%95%B0%E5%8C%96-behavior-parameterization/"/>
    <id>http://yemengying.com/2016/02/20/Java-8-行为参数化-behavior-parameterization/</id>
    <published>2016-02-20T11:33:21.000Z</published>
    <updated>2016-03-02T11:15:02.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;根据书 &amp;lt;&amp;lt; Java 8 in action &amp;gt;&amp;gt;第二章的一个例子整理。书中通过一个例子，讲述了如何利用behavior parameterization来应对不停变化的需求。想想之前自己写的工具类，真是大写的Low啊。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;题外话：要时刻谨记 Later equals never,Later equals never,Later equals never！！！！！！！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=35090760&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;



&lt;h3 id=&quot;行为参数化&quot;&gt;&lt;a href=&quot;#行为参数化&quot; class=&quot;headerlink&quot; title=&quot;行为参数化&quot;&gt;&lt;/a&gt;行为参数化&lt;/h3&gt;&lt;p&gt;在软件开发中，一个众所周知的问题就是无论你做什么,用户的需求总会改变。举个栗子，假设要做一个帮助农场主理解库存的应用。一开始，农场主可能想有一个在所有库存中找出所有绿色苹果的功能。但是第二天他可能会告诉你他还想要找到所有重量大于150g的苹果。两天后，他可能又提出找到所有绿色的并且重量大于150g的苹果。在面对这些相似的新功能时，我们都想尽可能的减少开发量。&lt;br&gt;&lt;strong&gt;behavior parameterization&lt;/strong&gt;是用来处理频繁更改的需求的一种软件开发模式，可以将一段代码块当做参数传给另一个方法，之后执行。这样做的好处是，方法的行为可以由传入的代码块控制。&lt;/p&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;下面通过农场应用来看看面对不断改变的需求如何将代码写的更灵活。先实现第一个功能:从一个list中过滤出所有的绿色苹果,听起来是不是很简单。&lt;/p&gt;
&lt;h4 id=&quot;版本1-：-过滤出绿色苹果&quot;&gt;&lt;a href=&quot;#版本1-：-过滤出绿色苹果&quot; class=&quot;headerlink&quot; title=&quot;版本1 ： 过滤出绿色苹果&quot;&gt;&lt;/a&gt;版本1 ： 过滤出绿色苹果&lt;/h4&gt;&lt;p&gt;最开始想到的解决办法可能长下面的样子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;Apple&amp;gt; &lt;span class=&quot;title&quot;&gt;filterGreenApples&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Apple&amp;gt; inventory)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Apple&amp;gt; result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(); &lt;span class=&quot;comment&quot;&gt;// An accumulator list for apples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Apple apple : inventory)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;.equals(apple.getColor()))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// Select only green apples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result.add(apple);     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的方法可以过滤出绿色的苹果，但是如果农场主还想知道红色的苹果呢？一个很幼稚的做法是将上面的方法复制一遍，命名为filterRedApples，更改一下if语句。但如果还想知道黄色的呢？一个好的做法是：试着抽象。&lt;/p&gt;
&lt;h4 id=&quot;版本2-：-将颜色作为参数&quot;&gt;&lt;a href=&quot;#版本2-：-将颜色作为参数&quot; class=&quot;headerlink&quot; title=&quot;版本2 ： 将颜色作为参数&quot;&gt;&lt;/a&gt;版本2 ： 将颜色作为参数&lt;/h4&gt;&lt;p&gt;可以在方法中加入颜色作为参数，使代码更灵活。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;Apple&amp;gt; &lt;span class=&quot;title&quot;&gt;filterApplesByColor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Apple&amp;gt; inventory,String color)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Apple&amp;gt; result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Apple apple: inventory)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( apple.getColor().equals(color) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result.add(apple);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以灵活的根据颜色来筛选。这时农场主又提出了根据重量筛选，于是参照上面根据颜色筛选的方法又新增了一个根据重量筛选的方法，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;Apple&amp;gt; &lt;span class=&quot;title&quot;&gt;filterApplesByWeight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Apple&amp;gt; inventory,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; weight)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Apple&amp;gt; result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Apple apple: inventory)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( apple.getWeight()&amp;gt;weight ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result.add(apple);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个解决办法，但考虑到苹果有许多其它特性，如果针对每一特性的筛选都复制一个方法，违背了DRY(don’t repeat yourself)原则.我们可以将颜色和重量结合到一个方法，并通过一个标记来指明想要进行过滤的是颜色还是重量(这样做其实很不好，之后会解释)。&lt;/p&gt;
&lt;h4 id=&quot;版本3-：-在一个方法中过滤想要过滤的属性&quot;&gt;&lt;a href=&quot;#版本3-：-在一个方法中过滤想要过滤的属性&quot; class=&quot;headerlink&quot; title=&quot;版本3 ： 在一个方法中过滤想要过滤的属性&quot;&gt;&lt;/a&gt;版本3 ： 在一个方法中过滤想要过滤的属性&lt;/h4&gt;&lt;p&gt;下面在一个方法中根据flag值的不同过滤不同的属性(这样做法很不好)。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;Apple&amp;gt; &lt;span class=&quot;title&quot;&gt;filterApples&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Apple&amp;gt; inventory,String color, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; weight, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; flag)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Apple&amp;gt; result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Apple apple : inventory)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((flag&amp;amp;&amp;amp;apple.getColor().equals(color)) || &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (!flag &amp;amp;&amp;amp; apple.getWeight() &amp;gt; weight))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result.add(apple);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码很丑陋而且也没有解决需求变化的问题，比如如果农场主还想要根据大小，产地，形状来筛选就不适用了。&lt;/p&gt;
&lt;h4 id=&quot;版本4-：-根据抽象约束过滤&quot;&gt;&lt;a href=&quot;#版本4-：-根据抽象约束过滤&quot; class=&quot;headerlink&quot; title=&quot;版本4 ： 根据抽象约束过滤&quot;&gt;&lt;/a&gt;版本4 ： 根据抽象约束过滤&lt;/h4&gt;&lt;p&gt;一个更好的解决办法是将过滤的标准抽象出来，我们先定义一个接口作为抽象的选择标准.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplePredicate&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Apple apple)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来就可以定义多个ApplePredicate接口的实现类来代表不同的过滤标准。如下图:&lt;br&gt;&lt;img src=&quot;/images/behavior.jpg&quot; alt=&quot;abstract criteria&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//select only heavy apple&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppleHeavyWeightPredicate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplePredicate&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Apple apple)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; apple.getWeight() &amp;gt; &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//select only green apple&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppleGreenColorPredicate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplePredicate&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Apple apple)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;.equals(apple.getColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面每一个实现了ApplePredicate接口的类都代表了一种筛选策略。在此基础上，我们可以将筛选方法修改成下面的样子,将ApplePredicate作为参数传入。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;Apple&amp;gt; &lt;span class=&quot;title&quot;&gt;filterApples&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Apple&amp;gt; inventory, ApplePredicate p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	List&amp;lt;Apple&amp;gt; result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Apple apple : inventory)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p.test(apple))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			result.add(apple);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在的筛选方法比第一个版本灵活多了，如果想改变筛选标准，只需创建不同的ApplePredicate对象，并传入filterApples方法即可。例如新增了选出红色并且重量大于150g的苹果的需求，我们可以创建一个实现ApplePredicate接口的类即可，代码如下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppleRedAndHeavyPredicate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplePredicate&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Apple apple)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;.equals(apple.getColor()) &amp;amp;&amp;amp; apple.getWeight() &amp;gt; &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Apple&amp;gt; redAndHeavyApples = filter(inventory, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AppleRedAndHeavyPredicate());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是上面的实现有一个缺点，就是太啰嗦了，每新增一个筛选标准都要新增一个类。下面来继续优化一下。&lt;/p&gt;
&lt;h4 id=&quot;版本5-：-使用匿名类&quot;&gt;&lt;a href=&quot;#版本5-：-使用匿名类&quot; class=&quot;headerlink&quot; title=&quot;版本5 ： 使用匿名类&quot;&gt;&lt;/a&gt;版本5 ： 使用匿名类&lt;/h4&gt;&lt;p&gt;匿名类是没有名字的类，使用匿名类可以创建一个临时的实现。下面的代码展示了如何利用匿名类创建实现了ApplePredicate的对象。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Apple&amp;gt; redApples = filterApples(inventory, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ApplePredicate()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Apple apple)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;.equals(apple.getColor());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是尽管匿名类解决了为一个接口声明多个实现类的问题，使用匿名类还不足够好。使用匿名类代码看起来有些笨重，可读性差，而且有一些开发者对匿名类感到困惑。下面我们使用Java 8引入的lambda表达式使代码看起来更加简洁一点。&lt;/p&gt;
&lt;h4 id=&quot;版本6-：-使用lambda表达式&quot;&gt;&lt;a href=&quot;#版本6-：-使用lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;版本6 ： 使用lambda表达式&quot;&gt;&lt;/a&gt;版本6 ： 使用lambda表达式&lt;/h4&gt;&lt;p&gt;我们可以使用lambda表达式简化代码.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Apple&amp;gt; result = filterApples(inventory,(Apple apple) -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;.equals(apple.getColor()));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;最终版-：-使用泛型，抽象列表的类型&quot;&gt;&lt;a href=&quot;#最终版-：-使用泛型，抽象列表的类型&quot; class=&quot;headerlink&quot; title=&quot;最终版 ： 使用泛型，抽象列表的类型&quot;&gt;&lt;/a&gt;最终版 ： 使用泛型，抽象列表的类型&lt;/h4&gt;&lt;p&gt;我们可以继续做一些抽象。目前，filterApples方法只可以过滤元素类型为Apple的List。我们可以将列表的类型抽象出来，使得我们的过滤方法变得更加通用，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Predicate&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T t)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pucblic &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;List&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;T&amp;gt; list, Predicate&amp;lt;T&amp;gt; p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	List&amp;lt;T&amp;gt; result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(T e: list)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p.test(e))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			result.add(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就可以对多种类型的list进行过滤了：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Apple&amp;gt; redApples = filter(inventory, (Apple apple) -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;.equals(apple.getColor()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; evenNumber = filter(numbers, (Integer i) -&amp;gt; i%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;终于over了，拖延癌果真已经到了晚期。。。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/delay.jpg&quot; alt=&quot;do it now&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;根据书 &amp;lt;&amp;lt; Java 8 in action &amp;gt;&amp;gt;第二章的一个例子整理。书中通过一个例子，讲述了如何利用behavior parameterization来应对不停变化的需求。想想之前自己写的工具类，真是大写的Low啊。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;题外话：要时刻谨记 Later equals never,Later equals never,Later equals never！！！！！！！&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>[译]Java 8中HashMap和LinkedHashMap如何解决冲突</title>
    <link href="http://yemengying.com/2016/02/03/%E8%AF%91-Java%E4%B8%ADHashMap%E5%92%8CLinkedHashMap%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/"/>
    <id>http://yemengying.com/2016/02/03/译-Java中HashMap和LinkedHashMap如何解决冲突/</id>
    <published>2016-02-03T08:23:39.000Z</published>
    <updated>2016-02-26T10:27:22.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;原文来自一个java大牛的博客 原文地址&lt;a href=&quot;http://javarevisited.blogspot.jp/2016/01/how-does-java-hashmap-or-linkedhahsmap-handles.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javarevisited.blogspot.jp/2016/01/how-does-java-hashmap-or-linkedhahsmap-handles.html&lt;/a&gt; 博客讲解了Java 8中HashMap和LinkedHashMap是如何解决冲突的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在Java 8 之前，HashMap和其他基于map的类都是通过链地址法解决冲突，它们使用单向链表来存储相同索引值的元素。在最坏的情况下，这种方式会将HashMap的get方法的性能从O(1)降低到O(n)。为了解决在频繁冲突时hashmap性能降低的问题，Java 8中使用平衡树来替代链表存储冲突的元素。这意味着我们可以将最坏情况下的性能从O(n)提高到O(logn)。&lt;br&gt;在Java 8中使用常量&lt;strong&gt;TREEIFY_THRESHOLD&lt;/strong&gt;来控制是否切换到平衡树来存储。目前，这个常量值是8，这意味着当有超过8个元素的索引一样时，HashMap会使用树来存储它们。&lt;br&gt;这一改变是为了继续优化常用类。大家可能还记得在Java 7中为了优化常用类对ArrayList和HashMap采用了延迟加载的机制，在有元素加入之前不会分配内存，这会减少空的链表和HashMap占用的内存。&lt;br&gt;这一动态的特性使得HashMap一开始使用链表，并在冲突的元素数量超过指定值时用平衡二叉树替换链表。不过这一特性在所有基于hash table的类中并没有，例如Hashtable和WeakHashMap。&lt;br&gt;目前，只有&lt;strong&gt;ConcurrentHashMap&lt;/strong&gt;,&lt;strong&gt;LinkedHashMap&lt;/strong&gt;和&lt;strong&gt;HashMap&lt;/strong&gt;会在频繁冲突的情况下使用平衡树。&lt;/p&gt;
&lt;h3 id=&quot;什么时候会产生冲突&quot;&gt;&lt;a href=&quot;#什么时候会产生冲突&quot; class=&quot;headerlink&quot; title=&quot;什么时候会产生冲突&quot;&gt;&lt;/a&gt;什么时候会产生冲突&lt;/h3&gt;&lt;p&gt;HashMap中调用&lt;strong&gt;hashCode()&lt;/strong&gt;方法来计算hashCode。&lt;br&gt;由于在Java中两个不同的对象可能有一样的hashCode,所以不同的键可能有一样hashCode，从而导致冲突的产生。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HashMap在处理冲突时使用链表存储相同索引的元素。&lt;/li&gt;
&lt;li&gt;从Java 8开始，HashMap，ConcurrentHashMap和LinkedHashMap在处理频繁冲突时将使用平衡树来代替链表，当同一hash桶中的元素数量超过特定的值便会由链表切换到平衡树，这会将get()方法的性能从O(n)提高到O(logn)。&lt;/li&gt;
&lt;li&gt;当从链表切换到平衡树时，HashMap迭代的顺序将会改变。不过这并不会造成什么问题，因为HashMap并没有对迭代的顺序提供任何保证。&lt;/li&gt;
&lt;li&gt;从Java 1中就存在的Hashtable类为了保证迭代顺序不变，即便在频繁冲突的情况下也不会使用平衡树。这一决定是为了不破坏某些较老的需要依赖于Hashtable迭代顺序的Java应用。&lt;/li&gt;
&lt;li&gt;除了Hashtable之外，WeakHashMap和IdentityHashMap也不会在频繁冲突的情况下使用平衡树。&lt;/li&gt;
&lt;li&gt;使用HashMap之所以会产生冲突是因为使用了键对象的hashCode()方法，而equals()和hashCode()方法不保证不同对象的hashCode是不同的。需要记住的是，相同对象的hashCode一定是相同的，但相同的hashCode不一定是相同的对象。&lt;/li&gt;
&lt;li&gt;在HashTable和HashMap中，冲突的产生是由于不同对象的hashCode()方法返回了一样的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上就是Java中HashMap如何处理冲突。这种方法被称为链地址法，因为使用链表存储同一桶内的元素。通常情况HashMap，HashSet，LinkedHashSet，LinkedHashMap，ConcurrentHashMap，HashTable，IdentityHashMap和WeakHashMap均采用这种方法处理冲突。&lt;/p&gt;
&lt;p&gt;从JDK 8开始，HashMap，LinkedHashMap和ConcurrentHashMap为了提升性能，在频繁冲突的时候使用平衡树来替代链表。因为HashSet内部使用了HashMap，LinkedHashSet内部使用了LinkedHashMap，所以他们的性能也会得到提升。&lt;/p&gt;
&lt;h3 id=&quot;相关阅读&quot;&gt;&lt;a href=&quot;#相关阅读&quot; class=&quot;headerlink&quot; title=&quot;相关阅读&quot;&gt;&lt;/a&gt;相关阅读&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383267?tag=javamysqlanta-20&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Data Structure and Algorithm in Java&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.amazon.com/Java-Performance-The-Definitive-Guide/dp/1449358454?tag=javamysqlanta-20&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Performance The Definitive Guide&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自一个java大牛的博客 原文地址&lt;a href=&quot;http://javarevisited.blogspot.jp/2016/01/how-does-java-hashmap-or-linkedhahsmap-handles.html&quot;&gt;http://javarevisited.blogspot.jp/2016/01/how-does-java-hashmap-or-linkedhahsmap-handles.html&lt;/a&gt; 博客讲解了Java 8中HashMap和LinkedHashMap是如何解决冲突的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
      <category term="hashmap" scheme="http://yemengying.com/categories/java/hashmap/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>最近看的书</title>
    <link href="http://yemengying.com/2016/01/19/%E6%9C%80%E8%BF%91%E7%9C%8B%E7%9A%84%E4%B9%A6/"/>
    <id>http://yemengying.com/2016/01/19/最近看的书/</id>
    <published>2016-01-19T06:34:13.000Z</published>
    <updated>2016-02-26T10:42:58.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;自从去年8月份之后真是变成了个爱看书のgirl，算是*%^&amp;amp;#$带来的唯一好处吧，是时候整理一发啦。不过，要按什么分类呢，技术和非技术，看完和没看完，好看和不好看还是外文和中文？好乱。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;算了 还是不分了随便列吧。。。。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Flipped-怦然心动&quot;&gt;&lt;a href=&quot;#Flipped-怦然心动&quot; class=&quot;headerlink&quot; title=&quot;Flipped(怦然心动)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.amazon.cn/Flipped-Van-Draanen-Wendelin/dp/0375825444/ref=sr_1_1?ie=UTF8&amp;amp;qid=1453186195&amp;amp;sr=8-1&amp;amp;keywords=flipped&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flipped(怦然心动)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/flipped.png&quot; alt=&quot;flipped&quot;&gt;&lt;br&gt;一本讲两个小学生初恋的英文小说，适合放松的时候看看。虽然已经看过了电影，再看小说还是觉得很美好，成功唤醒了我那颗沉睡已久的少女心。女主性格超级可爱，男主虽然一开始挺烦人的，不过后期的转变还是不错的，撩妹技能满分，还有女的爸爸和男主的爷爷也都是很有哲理的人。里面的句子都挺简单的，用来学英语也不错。&lt;/p&gt;
&lt;h3 id=&quot;淘宝技术这十年&quot;&gt;&lt;a href=&quot;#淘宝技术这十年&quot; class=&quot;headerlink&quot; title=&quot;淘宝技术这十年&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.amazon.cn/%E6%B7%98%E5%AE%9D%E6%8A%80%E6%9C%AF%E8%BF%99%E5%8D%81%E5%B9%B4-%E5%AD%90%E6%9F%B3/dp/B00CK2H13K/ref=cm_cr_pr_product_top?ie=UTF8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝技术这十年&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/taobao.png&quot; alt=&quot;淘宝技术这十年&quot;&gt;&lt;br&gt;很多地方都有推荐这本书，就买了，不过看完倒也没觉得多好看，里面关于技术的地方讲的很浅，所以指望着学到什么技术还是别看了,当故事书看还是不错的。现在书的内容已经记不太清了，就记得两句话，好的架构都是一步步演化来的和再牛B的人也都有一段苦B的经历。&lt;/p&gt;
&lt;h3 id=&quot;清醒思考的艺术&quot;&gt;&lt;a href=&quot;#清醒思考的艺术&quot; class=&quot;headerlink&quot; title=&quot;清醒思考的艺术&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.amazon.cn/%E6%B8%85%E9%86%92%E6%80%9D%E8%80%83%E7%9A%84%E8%89%BA%E6%9C%AF-Rolf-Dobelli-PhD/dp/B00CFEYLU4/ref=sr_1_1?ie=UTF8&amp;amp;qid=1453188150&amp;amp;sr=8-1&amp;amp;keywords=%E6%B8%85%E9%86%92%E6%80%9D%E8%80%83%E7%9A%84%E8%89%BA%E6%9C%AF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;清醒思考的艺术&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/sikao.png&quot; alt=&quot;清醒思考的艺术&quot;&gt;&lt;br&gt;左耳朵耗子来做技术分享时推荐的，里面是一个个的小故事，通过讲故事的方式来告诉读者思考时容易犯的错。读起来挺轻松的，可以睡前看一个小故事。不过吧。。。。道理都懂，想做到清醒思考还是挺难的。&lt;/p&gt;
&lt;h3 id=&quot;灿烂千阳-A-THOUSAND-SPLENDID-SUNS&quot;&gt;&lt;a href=&quot;#灿烂千阳-A-THOUSAND-SPLENDID-SUNS&quot; class=&quot;headerlink&quot; title=&quot;灿烂千阳(A THOUSAND SPLENDID SUNS)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.amazon.cn/%E7%81%BF%E7%83%82%E5%8D%83%E9%98%B3-%E5%8D%A1%E5%8B%92%E5%BE%B7%E2%80%A2%E8%83%A1%E8%B5%9B%E5%B0%BC/dp/B0011C1E0G/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1453189059&amp;amp;sr=1-1&amp;amp;keywords=%E7%81%BF%E7%83%82%E5%8D%83%E9%98%B3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;灿烂千阳(A THOUSAND SPLENDID SUNS)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/canlan.png&quot; alt=&quot;灿烂千阳&quot;&gt;&lt;br&gt;是《追风筝的人》作者的另一本小说，没看过追风筝的人，不过名气好像挺大的。灿烂千阳主要讲了两个阿富汗少女悲惨的一生，虽然莱拉结局还算不错，不过整体看还是挺惨的，都是战争害的。觉得整本书最感人的地方不是莱拉和玛利亚姆互相帮助和莱拉和塔里克的爱情，而是书的结尾莱拉发现了玛利亚姆父亲留给她的东西，戳中泪点啊。。。。。看完了之后觉得现在生活真心很幸福的啊。&lt;/p&gt;
&lt;h3 id=&quot;深入理解Java虚拟机&quot;&gt;&lt;a href=&quot;#深入理解Java虚拟机&quot; class=&quot;headerlink&quot; title=&quot;深入理解Java虚拟机&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.amazon.cn/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-JVM%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E5%91%A8%E5%BF%97%E6%98%8E/dp/B00D2ID4PK/ref=sr_1_1?ie=UTF8&amp;amp;qid=1453191565&amp;amp;sr=8-1&amp;amp;keywords=%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E7%AC%AC2%E7%89%88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Java虚拟机&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/jvm.png&quot; alt=&quot;深入理解Java虚拟机&quot;&gt;&lt;br&gt;这本。。。。大概看了两三章，实在看不下去。。。不是书写的不好，是我技术渣看不太懂。。。还是先放放吧&lt;/p&gt;
&lt;h3 id=&quot;从0到1&quot;&gt;&lt;a href=&quot;#从0到1&quot; class=&quot;headerlink&quot; title=&quot;从0到1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.amazon.cn/%E4%BB%8E0%E5%88%B01-%E5%BC%80%E5%90%AF%E5%95%86%E4%B8%9A%E4%B8%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%A7%98%E5%AF%86-%E5%BD%BC%E5%BE%97%C2%B7%E8%92%82%E5%B0%94/dp/B00RWP6BOU/ref=sr_1_1?ie=UTF8&amp;amp;qid=1453192094&amp;amp;sr=8-1&amp;amp;keywords=%E4%BB%8E0%E5%88%B01&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从0到1&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/from0to1.png&quot; alt=&quot;从0到1&quot;&gt;&lt;/p&gt;
&lt;p&gt;利用周末看完了，感觉作者说的都对，但对现在的我帮助不大，可能经历还不够吧。不过喜欢做开发也正是因为从0到1的创造一个产品的过程很interesting。&lt;/p&gt;
&lt;h3 id=&quot;Linux-Bible-9th-Edition&quot;&gt;&lt;a href=&quot;#Linux-Bible-9th-Edition&quot; class=&quot;headerlink&quot; title=&quot;Linux Bible 9th Edition&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/111898384X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1453192604&amp;amp;sr=8-1&amp;amp;keywords=linux+bible&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux Bible 9th Edition&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/linux.png&quot; alt=&quot;Linux Bible&quot;&gt;&lt;br&gt;超实用的技术书，不过由于是英文的还是技术书，看的比较慢，才看到第六章，基本一章一个主题已经从使用shell看到管理进程了。真是每一章都有很大收获，比如以前查看进程就知道用ps aux，并不知道每个命令选项的具体意思。走过路过不要错过，linux学的好的也可以看看，查漏补缺啊。争取以一周一章的速度把它看完。有要电子书的可以留邮箱 哈哈。&lt;/p&gt;
&lt;h3 id=&quot;Spring-in-Action-4th-edition&quot;&gt;&lt;a href=&quot;#Spring-in-Action-4th-edition&quot; class=&quot;headerlink&quot; title=&quot;Spring in Action 4th edition&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.geekbooks.me/book/view/spring-in-action-4th-edition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring in Action 4th edition&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/springInAction.png&quot; alt=&quot;Spring In Actino&quot;&gt;&lt;br&gt;虽然一直在用spring，但是貌似一直没有系统完整的看过一本关于spring的书，正好从geekbook上爬下了这本就看看吧，查漏补缺，以前注入bean，一直用xml和利用注解自动注入的方式，借这个机会了解下利用JavaConfig是如何实现依赖注入的。令我吃惊的是，作者第二推荐的居然是JavaConfig，一直以为Xml的方式应该排第二呢。。。刚看到第三章，慢慢看吧。。。有要电子书的可以留邮箱。&lt;/p&gt;
&lt;h3 id=&quot;The-Martian-火星救援&quot;&gt;&lt;a href=&quot;#The-Martian-火星救援&quot; class=&quot;headerlink&quot; title=&quot;The Martian(火星救援)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.amazon.cn/The-Martian-A-Novel-Weir-Andy/dp/B00EMXBDMA/ref=sr_1_2?ie=UTF8&amp;amp;qid=1453197526&amp;amp;sr=8-2&amp;amp;keywords=%E7%81%AB%E6%98%9F%E6%95%91%E6%8F%B4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Martian(火星救援)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/martian.png&quot; alt=&quot;火星救援&quot;&gt;&lt;br&gt;看完电影再来看书，觉得书比电影好一点，当然电影也不差。男主实在令人折服，尤其是他遇到困难只想着怎么解决困难的精神。如果把我留在火星上，估计得死好几百回。。。。&lt;/p&gt;
&lt;h3 id=&quot;偷影子的人&quot;&gt;&lt;a href=&quot;#偷影子的人&quot; class=&quot;headerlink&quot; title=&quot;偷影子的人&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B008ASCLJW/ref=s9_acsd_ri_bw_rw_r0_p7_t?pf_rd_m=A1AJ19PSB66TGU&amp;amp;pf_rd_s=merchandised-search-5&amp;amp;pf_rd_r=013VAE3JTBKQPMZMJ4RY&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=261616452&amp;amp;pf_rd_i=658390051&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;偷影子的人&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/偷影子的人.png&quot; alt=&quot;偷影子的人&quot;&gt;&lt;br&gt;一本治愈系的法国小说，喜欢封面的设计，内容挺平淡的，感觉前半部分比后面要好看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/liguangzhu2.gif&quot; alt=&quot;liguangzhu&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自从去年8月份之后真是变成了个爱看书のgirl，算是*%^&amp;amp;#$带来的唯一好处吧，是时候整理一发啦。不过，要按什么分类呢，技术和非技术，看完和没看完，好看和不好看还是外文和中文？好乱。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;算了 还是不分了随便列吧。。。。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="书单" scheme="http://yemengying.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>拥有自己的图书小金库</title>
    <link href="http://yemengying.com/2016/01/09/%E6%8B%A5%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E4%B9%A6%E5%B0%8F%E9%87%91%E5%BA%93/"/>
    <id>http://yemengying.com/2016/01/09/拥有自己的图书小金库/</id>
    <published>2016-01-09T06:15:46.000Z</published>
    <updated>2016-02-26T10:41:06.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在找matering elasticsearch second edition这本书的时候，在许多可以免费下电子书的网站都没有找到，所以就买了&lt;a href=&quot;https://www.geekbooks.me/category&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Geekbook&lt;/a&gt;一个月的会员，为了不浪费充会员的钱，决定撸个脚本把全站的书都下下来,并用django搭个管理后台。和&lt;a href=&quot;https://github.com/KevinOfNeu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;洪菊&lt;/a&gt;，&lt;a href=&quot;https://github.com/stephenluu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;卢神&lt;/a&gt;利用空闲时间忙活了快两周，终于有了自己的图书小金库，5000+的优质英文原版电子书，哇咔咔咔咔，这辈子的书都有了，放了一部分到github上。&lt;br&gt;geekbook千万不要怪我们啊，谁让你不封我们的~~。&lt;br&gt;&lt;strong&gt;项目地址：&lt;a href=&quot;https://github.com/giraffe0813/GeekBook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;部分电子书地址:&lt;a href=&quot;https://github.com/Geek-Organization/geek-programming-books&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;book&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;遇到的坑&quot;&gt;&lt;a href=&quot;#遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;遇到的坑&quot;&gt;&lt;/a&gt;遇到的坑&lt;/h3&gt;&lt;p&gt;记录下遇到的坑 不然就忘了😂&lt;/p&gt;
&lt;h4 id=&quot;只带cookie-无法下载&quot;&gt;&lt;a href=&quot;#只带cookie-无法下载&quot; class=&quot;headerlink&quot; title=&quot;只带cookie 无法下载&quot;&gt;&lt;/a&gt;只带cookie 无法下载&lt;/h4&gt;&lt;p&gt;本来以为只要带着登录之后的cookie请求下载的地址(eg:&lt;a href=&quot;https://www.geekbooks.me/books/56/48/c1955c13518f994167b11f7b7279/amazon_ec2_cookbook.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.geekbooks.me/books/56/48/c1955c13518f994167b11f7b7279/amazon_ec2_cookbook.pdf&lt;/a&gt;) 就可以下载了，不过发现下下来的并不是书，而是网站上书的详情页的html。受到博客&lt;a href=&quot;http://www.jianshu.com/p/c3dbf8294c33&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Course抓站小结&lt;/a&gt; 的启发，又研究了一下请求的header。&lt;br&gt;&lt;img src=&quot;/images/header.jpg&quot; alt=&quot;header&quot;&gt;&lt;br&gt;发现除了要带cookie之外，还要带有user_agent和Referer，refer是表示从哪个页面访问当前链接。&lt;br&gt;所以修改了下代码，在请求头中加入user-agent和referer之后，问题就解决了,部分代码如下&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cookie = cookielib.MozillaCookieJar()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# get cookie from file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cookie.load(&lt;span class=&quot;string&quot;&gt;&#39;../data/cookie4geek.data&#39;&lt;/span&gt;, ignore_discard=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;, ignore_expires=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;handler = urllib2.HTTPCookieProcessor(cookie)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opener = urllib2.build_opener(handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# add header&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opener.addheaders = [(&lt;span class=&quot;string&quot;&gt;&#39;User-agent&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Mozilla/5.0&#39;&lt;/span&gt;), (&lt;span class=&quot;string&quot;&gt;&quot;Referer&quot;&lt;/span&gt;, url)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;下载文件的时候不显示进度&quot;&gt;&lt;a href=&quot;#下载文件的时候不显示进度&quot; class=&quot;headerlink&quot; title=&quot;下载文件的时候不显示进度&quot;&gt;&lt;/a&gt;下载文件的时候不显示进度&lt;/h4&gt;&lt;p&gt;可以下载文件之后，希望可以在下载文件的时候显示下载进度，让我们知道他在工作。。。。直接在stackoverflow上抄了段代码，这个问题也愉快的解决了。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;u = opener.open(&lt;span class=&quot;string&quot;&gt;&quot;https://www.geekbooks.me&quot;&lt;/span&gt; + url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Preparing to download...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# f with directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; os.path.exists(conf_books_dir + category + &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + file_name) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; detect_book(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (conf_books_dir + category + &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + file_name)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = open(conf_books_dir + category + &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + file_name, &lt;span class=&quot;string&quot;&gt;&#39;wb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;meta = u.info()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file_size = int(meta.getheaders(&lt;span class=&quot;string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Downloading: %s Bytes: %s&quot;&lt;/span&gt; % (file_name, file_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file_size_dl = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;block_sz = &lt;span class=&quot;number&quot;&gt;8192&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buffer = u.read(block_sz)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; buffer:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file_size_dl += len(buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.write(buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    status = &lt;span class=&quot;string&quot;&gt;r&quot;%10d  [%3.2f%%]&quot;&lt;/span&gt; % (file_size_dl, file_size_dl * &lt;span class=&quot;number&quot;&gt;100.&lt;/span&gt; / file_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    status = status + chr(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) * (len(status) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; status,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;一本一本下载速度太慢&quot;&gt;&lt;a href=&quot;#一本一本下载速度太慢&quot; class=&quot;headerlink&quot; title=&quot;一本一本下载速度太慢&quot;&gt;&lt;/a&gt;一本一本下载速度太慢&lt;/h4&gt;&lt;p&gt;这个只能果断上多线程了。。。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;download_work&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f = open(&lt;span class=&quot;string&quot;&gt;&quot;../data/detailurl.txt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;r&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    books = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    destDir = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tmp = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; (line.strip()).startswith(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tmp += &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + line.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            destDir = tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# desDir&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            book = Book(destDir, line.strip())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            books.append(book)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tmp = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pool = threadpool.ThreadPool(conf_thread_count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reqs = threadpool.makeRequests(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; book: book.download(), books)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [pool.putRequest(req) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; req &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; reqs]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pool.wait()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;无法展示下载书的具体信息&quot;&gt;&lt;a href=&quot;#无法展示下载书的具体信息&quot; class=&quot;headerlink&quot; title=&quot;无法展示下载书的具体信息&quot;&gt;&lt;/a&gt;无法展示下载书的具体信息&lt;/h4&gt;&lt;p&gt;除了将书下载下来，还想将书的一些基本信息保存下来，比如:作者，简洁，出版年份，封面，标签等等。。最好可以根据作者，题目进行搜索。本来想自己写个网站出来，但是又没有时间。还好之前学叔推荐过django，用django搭个管理后台简直不要太方便好么，配置nginx，supervisor的时间都比写代码的时间长👅，还可以很方便定义想搜索的字段和想展示的字段。样式是丑了一丢丢，但自己用也无所谓。&lt;/p&gt;
&lt;h3 id=&quot;成品&quot;&gt;&lt;a href=&quot;#成品&quot; class=&quot;headerlink&quot; title=&quot;成品&quot;&gt;&lt;/a&gt;成品&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/admin.jpg&quot; alt=&quot;admin&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;依靠空闲时间可以做点想做的事，也是蛮好的~~。用python写脚本真的很方便，基本不用自己造轮子，用它自带的模块就可以完成了。用django搭管理后台也是快的不要不要的。一周多的时间换4000+的书很值啊，但是。。。。服务器+存储平均一天的成本就要10块。。。是不是得想个法子，看能不能用这些电子书挣点钱啊。。。。想到这。。。突然没那么开心了。。。&lt;br&gt;&lt;img src=&quot;/images/lingluan.jpg&quot; alt=&quot;lingluan&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在找matering elasticsearch second edition这本书的时候，在许多可以免费下电子书的网站都没有找到，所以就买了&lt;a href=&quot;https://www.geekbooks.me/category&quot;&gt;Geekbook&lt;/a&gt;一个月的会员，为了不浪费充会员的钱，决定撸个脚本把全站的书都下下来,并用django搭个管理后台。和&lt;a href=&quot;https://github.com/KevinOfNeu&quot;&gt;洪菊&lt;/a&gt;，&lt;a href=&quot;https://github.com/stephenluu&quot;&gt;卢神&lt;/a&gt;利用空闲时间忙活了快两周，终于有了自己的图书小金库，5000+的优质英文原版电子书，哇咔咔咔咔，这辈子的书都有了，放了一部分到github上。&lt;br&gt;geekbook千万不要怪我们啊，谁让你不封我们的~~。&lt;br&gt;&lt;strong&gt;项目地址：&lt;a href=&quot;https://github.com/giraffe0813/GeekBook&quot;&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;部分电子书地址:&lt;a href=&quot;https://github.com/Geek-Organization/geek-programming-books&quot;&gt;book&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="http://yemengying.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yemengying.com/tags/python/"/>
    
      <category term="爬虫" scheme="http://yemengying.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="django" scheme="http://yemengying.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Linux Bible 9th Edition之进程大法好</title>
    <link href="http://yemengying.com/2015/12/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%A4%A7%E6%B3%95%E5%A5%BD/"/>
    <id>http://yemengying.com/2015/12/24/读书笔记-Linux-Bible-9th-Edition之进程大法好/</id>
    <published>2015-12-24T09:56:03.000Z</published>
    <updated>2016-02-26T10:41:17.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;根据Linux Bible第九版第六章整理的读书笔记，记录linux系统下如何管理进程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linux是一个支持多用户和多任务的操作系统，多任务是指可以同时运行多个程序，而每个运行程序的一个实例被称作一个进程。Linux系统提供了可以让我们列出正运行进程，杀死进程，监听系统使用情况的工具。&lt;/p&gt;
&lt;p&gt;相关博客:&lt;br&gt;&lt;a href=&quot;http://yemengying.com/2015/11/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition/&quot;&gt;Linux Bible 9th Edition之使用shell&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://yemengying.com/2015/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E7%8E%A9%E8%BD%AC%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/&quot;&gt;Linux Bible 9th Edition之玩转文本文件&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://yemengying.com/2015/11/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/&quot;&gt;Linux Bible 9th Edition之文件系统&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;理解进程&quot;&gt;&lt;a href=&quot;#理解进程&quot; class=&quot;headerlink&quot; title=&quot;理解进程&quot;&gt;&lt;/a&gt;理解进程&lt;/h3&gt;&lt;p&gt;一个进程是一个命令正在运行的实例。比如，系统中有一个&lt;strong&gt;vi&lt;/strong&gt;命令，如果&lt;strong&gt;vi&lt;/strong&gt;命令正在被15个不同的用户运行，那么就对应了15个不同的运行进程。&lt;br&gt;一个进程在系统中通过进程Id(process ID)来标识，在当前系统中进程Id是独一无二的。换句话说，如果一个进程正在运行，那么其他进程都不能使用它的进程Id的数字作为自己的进程Id。但如果这个进程已经结束，那么他的进程Id可以被重新使用当做其他进程的进程Id。&lt;br&gt;除了进程Id，进程还有一些其他属性。每个运行的进程都会关联一个指定的用户账号和用户组，这个账号决定了进程可以访问哪些系统资源。所以root用户运行的进程能比普通用户的进程访问更多的文件。&lt;br&gt;对于一个Linux的管理员来说，管理进程的能力至关重要。因为有时，一些运行的进程会严重影响系统的性能，这一章会讲述如果根据内存和CPU的使用情况，定位和处理这些进程。&lt;/p&gt;
&lt;h4 id=&quot;列出进程&quot;&gt;&lt;a href=&quot;#列出进程&quot; class=&quot;headerlink&quot; title=&quot;列出进程&quot;&gt;&lt;/a&gt;列出进程&lt;/h4&gt;&lt;p&gt;如果使用命令行列出当前系统运行的进程，&lt;strong&gt;ps&lt;/strong&gt;命令是最老也是最常用的命令，而&lt;strong&gt;top&lt;/strong&gt;命令不仅可以列出进程还可以更改进程的状态。如果使用的是GNOME，可以使用&lt;strong&gt;gnome-system-monitor&lt;/strong&gt;来通过图形界面管理进程。&lt;/p&gt;
&lt;h5 id=&quot;通过ps命令列出进程&quot;&gt;&lt;a href=&quot;#通过ps命令列出进程&quot; class=&quot;headerlink&quot; title=&quot;通过ps命令列出进程&quot;&gt;&lt;/a&gt;通过ps命令列出进程&lt;/h5&gt;&lt;p&gt;最常用的查看正在运行进程的工具就是ps命令，通过ps命令，我们可以查看正在运行的进程，它们使用的资源以及运行它们的用户。下面是ps命令的一个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps u&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jake 2147 0.0 0.7 1836 1020 tty1 S+ 14:50 0:00 -bash &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jake 2310 0.0 0.7 2592 912 tty1 R+ 18:22 0:00 ps u&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的命令中，使用u选项会显示用户名和一些其他信息，比如进程是什么时候开始运行的，进程占用的内存和Cpu，命令运行的位置(TTY)等。上面的第一个进程说明了jake用户在登录之后打开了一个bash shell。第二进程显示了jake用户正在运行ps u命令。终端设备&lt;strong&gt;tty1&lt;/strong&gt;正在被登录会话使用着。&lt;strong&gt;STAT&lt;/strong&gt;这一列代表了进程的状态，R代表进程正在运行，S代表进程处于休眠状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;STAT除了R和S之外还可以有别的值，D代表不可中断，R运行，S中断/休眠，T停止，Z僵死。如果后面有+号，代表在前台运行的进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;USER&lt;/strong&gt;列显示了运行这个进程的用户。&lt;strong&gt;PID&lt;/strong&gt;列是进程的进程Id，每个进程都有一个独一无二的进程Id，在需要杀死一个进程或者为进程发送信号时使用。&lt;strong&gt;%CPU&lt;/strong&gt;和&lt;strong&gt;%MEN&lt;/strong&gt;两列显示了进程占用的CPU百分比和内存百分比。&lt;br&gt;&lt;strong&gt;VSZ&lt;/strong&gt;(virtual set size)展示了虚拟内存占用大小(单位：kb/kilobytes),&lt;strong&gt;RSS&lt;/strong&gt;(reside set size)展示了实际内存占用大小(单位：kb/kilobytes)。VSZ和RSS的值可能不一样，因为VSZ是分配给进程的内存大小，而RSS是进程实际使用的内存大小，代表了不可交换的物理内存。&lt;strong&gt;START&lt;/strong&gt;代表了进程启动的时间，&lt;strong&gt;TIME&lt;/strong&gt;执行累计时间(如果占用cpu时间非常短不到一秒，会显示 0:00)。&lt;br&gt;在Linux中，有些运行的进程是与终端无关的，这些进程通常在系统启动时开始运行，并且会持续运行，直到系统关闭。可以使用x选项查看与终端无关的进程。&lt;/p&gt;
&lt;p&gt;分页查看与当前用户有关的所有运行进程&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps ux | less&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;分页查看所有用户的运行的进程&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps aux | less&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;管道符(“|”)会将第一个命令的输出当做第二个命令的输入，上面的例子中ps命令的输出会当做less命令的输入，这样就可以分页查看信息了。按空格键换页，按q退出。&lt;br&gt;我们还可以自定义ps命令展示的信息，并按其中一列排序。使用-o选项，可以通过关键字指定想要展示的列。下面的例子就是指定ps展示进程Id(pid),用户名(username),用户Id(uid),用户组(group),组Id(gid),分配的虚拟内存(vsz),实际使用内存(rss),运行的命令(comm),默认情况下按进程Id排序。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps -eo pid,user,uid,group,gid,vsz,rss,comm | less  PID USER GROUP GID VSZ   RSS   COMMAND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1   root  root  0  19324 1320   init &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2   root  root  0  0       0    kthreadd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果想要按其他列排序可以使用sort=选项。例如，想查看那个进程占用了最多的内存，可以按rss排列，会按rss从低到高展示进程，如果想从高到底可以在前面加连字符。下面是例子：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps -eo pid,user,group,gid,vsz,rss,comm --sort=-rss | less&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PID     USER     GROUP     GID     VSZ       RSS       COMMAND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12005   cnegus   cnegus   13597   1271008    522192    firefox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5412    cnegus   cnegus   13597   949584     157268 thunderbird-bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25870   cnegus   cnegus   13597   1332492    112952 swriter.bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;通过top命令列出进程-修改进程&quot;&gt;&lt;a href=&quot;#通过top命令列出进程-修改进程&quot; class=&quot;headerlink&quot; title=&quot;通过top命令列出进程,修改进程&quot;&gt;&lt;/a&gt;通过top命令列出进程,修改进程&lt;/h5&gt;&lt;p&gt;使用top命令，会默认按占用CPU的时间展示进程，也可以按其他指标排序。如果定位到了一个异常的进程，可以使用top终止(kill)进程或修改其优先级(reprioritize)。如果想要能够终止所有的进程或更改所有进程优先级需要使用root user来运行top命令。如果只是想要展示进程，或者更改自己的进程，那么可以使用普通用户的身份。下图是使用top的例子，最上面列出了系统的基本信息，下面是每个运行进程的信息。从最上面的输出信息你可以知道系统启动了多长时间，目前用多少用户登入，在过去的1,5,10分钟内分别运行了多少条命令。除此之外还包括了当前有多少进程在运行，CPU占用多少，用多少可用的Swap和RAM。紧接着列出了每个进程的基本信息，按进程占用cpu百分比排列，默认情况下所有信息5秒钟刷新一次。&lt;br&gt;&lt;img src=&quot;/images/top.png&quot; alt=&quot;top&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面列出了在用top展示、修改进程时可用的一些操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按&lt;strong&gt;h&lt;/strong&gt;看帮助选项，按任意键返回&lt;/li&gt;
&lt;li&gt;按&lt;strong&gt;M&lt;/strong&gt;按占用内存排列，按&lt;strong&gt;P&lt;/strong&gt;返回按CPU排列&lt;/li&gt;
&lt;li&gt;按数字1可以在所有cpu中切换，前提是你的系统中有多于一个cpu&lt;/li&gt;
&lt;li&gt;按&lt;strong&gt;R&lt;/strong&gt;将输出倒序排列&lt;/li&gt;
&lt;li&gt;按&lt;strong&gt;u&lt;/strong&gt;并输入一个用户名，展示指定用户的进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是运行top命令时，如何终止进程或修改其优先级:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改优先级：记下想要修改的进程的PID，之后按r输入线程对应的PID,再输入想要调整的值(-19 到 20)。&lt;/li&gt;
&lt;li&gt;终止进程： 记下想要修改的进程的PID，之后按k输入线程对应的PID，之后输入15(终止)或9(强迫终止)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h3&gt;&lt;p&gt;最近负能量太多了 赶紧听首我大少时的歌压压。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=26133356&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;










</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;根据Linux Bible第九版第六章整理的读书笔记，记录linux系统下如何管理进程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linux是一个支持多用户和多任务的操作系统，多任务是指可以同时运行多个程序，而每个运行程序的一个实例被称作一个进程。Linux系统提供了可以让我们列出正运行进程，杀死进程，监听系统使用情况的工具。&lt;/p&gt;
&lt;p&gt;相关博客:&lt;br&gt;&lt;a href=&quot;http://yemengying.com/2015/11/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition/&quot;&gt;Linux Bible 9th Edition之使用shell&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://yemengying.com/2015/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E7%8E%A9%E8%BD%AC%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/&quot;&gt;Linux Bible 9th Edition之玩转文本文件&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://yemengying.com/2015/11/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/&quot;&gt;Linux Bible 9th Edition之文件系统&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yemengying.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yemengying.com/tags/linux/"/>
    
      <category term="读书笔记" scheme="http://yemengying.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Linux Bible 9th Edition之玩转文本文件</title>
    <link href="http://yemengying.com/2015/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E7%8E%A9%E8%BD%AC%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
    <id>http://yemengying.com/2015/11/30/读书笔记-Linux-Bible-9th-Edition之玩转文本文件/</id>
    <published>2015-11-30T07:04:46.000Z</published>
    <updated>2016-02-26T10:38:57.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;根据书的第5章整理一下关于操作文本文件的常用命令。在Linux系统中许多信息都是在文本文件中管理的,所以熟练掌握对文本文件的更改，查找是很重要的。这一点，在出bug查找服务器日志时真是深有体会啊！😼😼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关博客:&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition/&quot;&gt;Linux Bible 9th Edition之使用shell&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/&quot;&gt;Linux Bible 9th Edition之文件系统&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/12/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%A4%A7%E6%B3%95%E5%A5%BD/&quot;&gt;Linux Bible 9th Edition之进程大法好&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;使用vim和vi编辑文件&quot;&gt;&lt;a href=&quot;#使用vim和vi编辑文件&quot; class=&quot;headerlink&quot; title=&quot;使用vim和vi编辑文件&quot;&gt;&lt;/a&gt;使用vim和vi编辑文件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;刚接触vi编辑器可能会觉得有点难，不过当你熟悉了之后可以只用键盘就能快速高效的编辑文件，无需使用鼠标或功能键。(如果觉得vi不适合你，可以选择其它的文本编辑器，比如:nano,gedit,jed,kate,kedit,mcedit,nedit…等等)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从最常见的打开文件的开始了解vi&lt;br&gt;打开文件:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vi &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果这是一个空的文件，你会看到类似下图的东东。最上面闪烁的东东代表了光标的当前位置，最下面的一行显示了关于文件的一些信息,中间的”~”符号代表没有内容。&lt;br&gt;&lt;img src=&quot;/images/vi1.jpg&quot; alt=&quot;使用vi打开一个空文件&quot;&gt;&lt;br&gt;当你看到这个界面可能会感觉不知所措，因为没有任何菜单，提示和图标来告诉你该做什么。更恐怖的是，你不能直接输入，否则会听见”嘟嘟”的声音。&lt;/p&gt;
&lt;h4 id=&quot;添加文件内容&quot;&gt;&lt;a href=&quot;#添加文件内容&quot; class=&quot;headerlink&quot; title=&quot;添加文件内容&quot;&gt;&lt;/a&gt;添加文件内容&lt;/h4&gt;&lt;p&gt;不要怕,首先,需要了解两种主要的模式:命令模式(command)和编辑模式(input)。vi编辑器以命令模式启动，在添加或改变文本内容之前需输入命令来告诉vi你想要做什么(大小写敏感)。输入下面的命令就可以进入编辑模式，当编辑结束后，按&lt;em&gt;Esc&lt;/em&gt;键就可以回到命令模式。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;a&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;可以在光标右侧开始插入文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;A&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;可以在当前行的最后开始插入文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;i&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;可以在光标左侧开始插入文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;I&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;可以在当前行的最前面开始插入文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;o&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在当前行下面 插入新的一行 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;O&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在当前行上面 插入新的一行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/tips.jpg&quot; alt=&quot;提示&quot;&gt; 当进入编辑模式时，屏幕下方会出现– INSERT –；编辑结束后，按&lt;em&gt;Esc&lt;/em&gt;键就可以回到命令模式。不过如果输入了”:”符号，需要按两下&lt;em&gt;Esc&lt;/em&gt;键&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;在文本中移动&quot;&gt;&lt;a href=&quot;#在文本中移动&quot; class=&quot;headerlink&quot; title=&quot;在文本中移动&quot;&gt;&lt;/a&gt;在文本中移动&lt;/h4&gt;&lt;p&gt;可以使用方向键可以在文本中移动光标，但还有一些小技巧可以让我们更方便的在文本中移动&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;w&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标移到下一个单词的开头(单词以spaces,tabs,标点界定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;W&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标移到下一个单词的开头(单词以spaces,tabs界定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;b&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标移到前一个单词的开头(单词以spaces,tabs,标点界定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;B&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标移到前一个单词的开头(单词以spaces,tabs界定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;0(zero)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标移到当前行的最前面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标移到当前行的最后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;H&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标移到屏幕的左上角&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;M&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移到中间行第一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标移到屏幕的左下角&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;删除，复制，更改文本&quot;&gt;&lt;a href=&quot;#删除，复制，更改文本&quot; class=&quot;headerlink&quot; title=&quot;删除，复制，更改文本&quot;&gt;&lt;/a&gt;删除，复制，更改文本&lt;/h4&gt;&lt;p&gt;了解了如何添加文本和移动光标是远远不够的，还需要知道如何删除，复制和更改文本。命令x,d,y,c等可以帮助我们删除和修改文本，这些命令也可以和移动光标的命令(上一个表格中提到的)或者数字配合使用来告诉编辑器确切的操作是什么。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除光标所在位置的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;X&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除光标所在位置的前一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;d?&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除一些文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;c?&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;更改一些文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;y?&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复制一些文本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;?代表这些命令要和移动光标的命令配合着使用，下面是一些例子&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;dw&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除当前光标位置的后一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;db&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除当前光标位置的前一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;dd&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除当前一整行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;c$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;更改(实际上是擦除)从当前位置到当前行最后的内容，并进入编辑模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;c0&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;更改(实际上是擦除)从当前位置到当前行最前面的内容，并进入编辑模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;yy&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将当前行复制到buffer中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上面这些命令也可以和数字配合使用,下面是栗子🌰&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;3dd&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除当前行往下的三行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;3dw&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除接下来的三个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;5cl&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除接下来的5个字符，并进入编辑模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;粘贴&quot;&gt;&lt;a href=&quot;#粘贴&quot; class=&quot;headerlink&quot; title=&quot;粘贴&quot;&gt;&lt;/a&gt;粘贴&lt;/h4&gt;&lt;p&gt;可以使用命令p和P，将复制到buffer中的内容粘贴到文本中。p是将缓存区的内容粘贴到当前光标所在位置的下方，P是将缓存区的内容粘贴到当前光标所在位置的上方&lt;/p&gt;
&lt;h4 id=&quot;在文件中跳跃&quot;&gt;&lt;a href=&quot;#在文件中跳跃&quot; class=&quot;headerlink&quot; title=&quot;在文件中跳跃&quot;&gt;&lt;/a&gt;在文件中跳跃&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+f&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;向下一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+b&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;向上一页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;向下一页半&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+u&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;向上一页半&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;G&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跳到最后一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1G&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跳到第一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;35G&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跳到第35行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;查找文本&quot;&gt;&lt;a href=&quot;#查找文本&quot; class=&quot;headerlink&quot; title=&quot;查找文本&quot;&gt;&lt;/a&gt;查找文本&lt;/h4&gt;&lt;p&gt;查找文本时,”/“和”?”分别对应向前和向后查找,也可以使用一些通配符，比如/The.*foot,&lt;br&gt;?[pP]rint,查找之后可以按n和N来重复查找和按相反方向查找&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;/hello&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;向前查找单词”hello”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;?goodbye&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;向后查找单词”goodbye”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;使用ex模式&quot;&gt;&lt;a href=&quot;#使用ex模式&quot; class=&quot;headerlink&quot; title=&quot;使用ex模式&quot;&gt;&lt;/a&gt;使用ex模式&lt;/h4&gt;&lt;p&gt;当输入冒号,并且光标在最下方时就进入了ex模式，下面是一些在ex模式下查找，修改文本的栗子🌰&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;:g/local&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查找local 并打印&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;:s/local/r&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将local第一次出现的位置替换为r&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;退出vi&quot;&gt;&lt;a href=&quot;#退出vi&quot; class=&quot;headerlink&quot; title=&quot;退出vi&quot;&gt;&lt;/a&gt;退出vi&lt;/h4&gt;&lt;p&gt;以下的命令用来保存和退出文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ZZ&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;保存修改 并退出vi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;:w&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;保存修改 但不退出vi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;:wq&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;与ZZ命令一样&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;:q&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;退出文件，该命令只有在没有未保存的修改下才起效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;:q!&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;退出文件 不保存对文件的修改&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;查找文件&quot;&gt;&lt;a href=&quot;#查找文件&quot; class=&quot;headerlink&quot; title=&quot;查找文件&quot;&gt;&lt;/a&gt;查找文件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;为了帮助用户更有效的查找他们的文件，linux系统提供了locate,find,grep三个命令，依次来看看他们的作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用localte命令查找文件&quot;&gt;&lt;a href=&quot;#使用localte命令查找文件&quot; class=&quot;headerlink&quot; title=&quot;使用localte命令查找文件&quot;&gt;&lt;/a&gt;使用localte命令查找文件&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;大多数linux系统中，updatedb命令会每天执行一次，将系统中文件的名字存到数据库中。通过locate命令，我们可以查找存在在数据库中的文件的位置。相较于find命令，locate命令效率更高，因为它搜索数据库而不是整个文件系统。不过locate命令也有它的缺点，它并不能找到所有存放在系统的文件，因为并不是所有的文件都会存储于数据库中，/etc/updatedb.conf文件决定了哪些文件将存在于数据库中。另外，普通用户无法通过数据库查找那些他们在文件系统中没有权利查看的文件，比如，普通用户无法在/root目录下执行ls命令，那么他们也无法通过locate查找这个目录下的文件。如果用locate命令查找一个字符串，那么这个字符串可能出现在返回文件的路径的任意位置。举个栗子，查找passwd，结果可能为/etc/passwd,/usr/bin/passwd和其它路径包含passwd的文件。还需要注意的是，如果创建一个文件之后，希望立刻通过locate查找它，最好执行命令updatedb更新下数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ locate .bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/skel/.bashrc &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/home/cnegus/.bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# locate ./bashrc (身份不同 查找结果不同)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/skel/.bashrc &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/home/bill/.bashrc &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/home/joe/.bashrc &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/root/.bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ locate -i muttrc（-i 忽略大小写）/etc/Muttrc/etc/Muttrc.local /usr/share/doc/mutt-1.5.20/sample.muttrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ locate services (查找的字符串可能出现在文件路径中)/etc/services/usr/share/services/bmp.kmgio /usr/share/services/data.kmgio&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;中场休息，看看我家光洙&lt;br&gt;&lt;img src=&quot;/images/liguangzhu.gif&quot; alt=&quot;李光珠&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用find命令查找文件&quot;&gt;&lt;a href=&quot;#使用find命令查找文件&quot; class=&quot;headerlink&quot; title=&quot;使用find命令查找文件&quot;&gt;&lt;/a&gt;使用find命令查找文件&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;由于有许多不同的属性，find命令是查找文件的利器。当执行find命令时，它会搜索整个文件系统，这会造成find命令比locate命令耗时长，但同时也能让用户查找到系统中最新的文件。find命令最大的优点在于所有你能想到的文件的属性，都可以通过它查找，例如名字，拥有者，权限，大小，修改时间等等，也可以进行组合查找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ find (列出当前目录下所有的文件和目录)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find /etc (列出/etc目录下所有的文件和目录，权限不足时会报错)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find -ls (列出文件的拥有者，权限，大小等信息)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find /etc -name passwd（根据名字查找）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find /etc -iname &lt;span class=&quot;string&quot;&gt;&#39;*passwd*&#39;&lt;/span&gt; （可以使用通配符）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find /bigdata -size +10G （查找大小大于10G的文件）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find /smalldata -size -5M (查找大小小于5M的文件)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find /home -user chris -ls (输出/home目录下拥有者是chris的文件的详细信息)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find /home -user chris -or -user joe -ls (输出/home目录下拥有者是chris或joe的文件的详细信息)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find /home -not -user root -ls (输出/home目录下拥有者不是root的文件的详细信息)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find /bin -perm 755 -ls（通过权限查找）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ find . -perm -002 -type f -ls （通过类型查找）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;find命令还有一个很棒的特性，可以使用-excute和-ok选项可以在查找到的任何文件上执行命令。excute选项会直接在每个找到的文件上执行命令，不会询问是否执行。而ok选项会在每个文件执行命令前询问是否执行。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ find /etc -iname iptables -exec &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;I found &amp;#123;&amp;#125;&quot;&lt;/span&gt; \; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I found /etc/bash_completion.d/iptablesI found /etc/sysconfig/iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# find /var/allusers/ -user joe -ok mv &amp;#123;&amp;#125; /tmp/joe/ \;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv ... /var/allusers/dict.dat &amp;gt; ? ymv ... /var/allusers/five &amp;gt; ? y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/tips.jpg&quot; alt=&quot;提示&quot;&gt; 想了解更多关于find命令的信息，可以执行命令 man find&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用grep命令在文件中查找&quot;&gt;&lt;a href=&quot;#使用grep命令在文件中查找&quot; class=&quot;headerlink&quot; title=&quot;使用grep命令在文件中查找&quot;&gt;&lt;/a&gt;使用grep命令在文件中查找&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;如果希望查找包含特定内容的文件，可以使用grep命令。通过grep命令，可以搜索单个文件，也可以递归搜索整个目录。默认情况下，grep命令是大小写敏感的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ grep desktop /etc/services &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;desktop-dna 2763/tcp &lt;span class=&quot;comment&quot;&gt;# Desktop DNA &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;desktop-dna 2763/udp &lt;span class=&quot;comment&quot;&gt;# Desktop DNA&lt;/span&gt;$ grep -i desktop /etc/servicessco-dtmgr 617/tcp &lt;span class=&quot;comment&quot;&gt;# SCO Desktop Administration Server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sco-dtmgr 617/udp &lt;span class=&quot;comment&quot;&gt;# SCO Desktop Administration Server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;airsync 2175/tcp  &lt;span class=&quot;comment&quot;&gt;# Microsoft Desktop AirSync Protocol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个例子，是在/etc/services文件中查找字符串desktop.第二个例子通过选项-i,在查找时大小写不敏感&lt;br&gt;-v 是查找不包含指定内容的行，-r是在目录中递归查找，-l是列出文件名 而不是包含内容的具体行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ grep -v desktop /etc/services&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ grep -rli peerdns /usr/share/doc/ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/share/doc/dnsmasq-2.66/setup.html &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/share/doc/initscripts-9.49.17/sysconfig.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以我大谢耳朵结尾吧，主要看气质，哈哈~~&lt;br&gt;&lt;img src=&quot;/images/sheldon.jpg&quot; alt=&quot;sheldon&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;根据书的第5章整理一下关于操作文本文件的常用命令。在Linux系统中许多信息都是在文本文件中管理的,所以熟练掌握对文本文件的更改，查找是很重要的。这一点，在出bug查找服务器日志时真是深有体会啊！😼😼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关博客:&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition/&quot;&gt;Linux Bible 9th Edition之使用shell&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/&quot;&gt;Linux Bible 9th Edition之文件系统&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/12/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%A4%A7%E6%B3%95%E5%A5%BD/&quot;&gt;Linux Bible 9th Edition之进程大法好&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yemengying.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yemengying.com/tags/linux/"/>
    
      <category term="读书笔记" scheme="http://yemengying.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Linux Bible 9th Edition之文件系统</title>
    <link href="http://yemengying.com/2015/11/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yemengying.com/2015/11/26/读书笔记-Linux-Bible-9th-Edition之文件系统/</id>
    <published>2015-11-26T08:28:15.000Z</published>
    <updated>2016-02-23T03:46:42.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;跟着书，重新梳理一下linux文件系统的有关知识, 最近一天一个接口的节奏真真是极好的,有时间看看书了。😻😻😻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 相关博客:&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition/&quot;&gt;Linux Bible 9th Edition之使用shell&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E7%8E%A9%E8%BD%AC%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/&quot;&gt;Linux Bible 9th Edition之玩转文本文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/12/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%A4%A7%E6%B3%95%E5%A5%BD/&quot;&gt;Linux Bible 9th Edition之进程大法好&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/霸气的喵喵.jpg&quot; alt=&quot;霸气的喵喵&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Linux文件系统结构&quot;&gt;&lt;a href=&quot;#Linux文件系统结构&quot; class=&quot;headerlink&quot; title=&quot;Linux文件系统结构&quot;&gt;&lt;/a&gt;Linux文件系统结构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在linux中文件组织在一个层级的目录结构中，每个目录可以包含文件和目录，整体看起来就像一个倒过来的树。最上面就是根目录，用”/“符号表示。根目录下面是linux系统中一些常见的目录,比如bin,dev,home,lib等等。下面的图(书上的截图)展示了linux文件系统的层级结构。&lt;br&gt;&lt;img src=&quot;/images/linux_filesystem.jpg&quot; alt=&quot;linux_filesystem&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;基本的一些文件系统命令&quot;&gt;&lt;a href=&quot;#基本的一些文件系统命令&quot; class=&quot;headerlink&quot; title=&quot;基本的一些文件系统命令&quot;&gt;&lt;/a&gt;基本的一些文件系统命令&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;cd&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;进入另一个目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;pwd&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打印当前工作目录的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;mkdir&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;创建一个目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;chmod&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;更改文件或目录的权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ls&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;列出目录的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;cd&lt;/em&gt;命令&lt;br&gt;cd命令是其中最常用的&lt;br&gt;eg：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入根目录下的usr目录下的share目录 以&quot;/&quot;开头，代表在根目录下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /usr/share&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 只输入cd 回到home目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入home目录下的某一目录 &quot;~&quot;代表home目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/coffee&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 回到上一级目录 &quot;..&quot;代表上一级目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ..&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;创建目录并查看权限&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建目录test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看目录权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls -ld &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用Metacharacters-元字符-和Operators-操作符&quot;&gt;&lt;a href=&quot;#使用Metacharacters-元字符-和Operators-操作符&quot; class=&quot;headerlink&quot; title=&quot;使用Metacharacters(元字符)和Operators(操作符)&quot;&gt;&lt;/a&gt;使用Metacharacters(元字符)和Operators(操作符)&lt;/h3&gt;&lt;p&gt; 使用metacharacters进行文件匹配     &lt;/p&gt;
&lt;p&gt;  “*”代表任意数量的字符 “?”代表任意一个字符 “[…]”匹配任意一个包含在括号中的字符,也可以用连字符表示一个范围&lt;br&gt;  eg：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建5个空文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ touch apple banana grape grapefruit watermelon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls a*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls g*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grape &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls g???e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grape&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls [abw]*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apple banana watermelon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls [a-g]*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apple banana grape grapefruit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 使用metacharacters进行文件重定向&lt;br&gt;    使用管道符号”|”可以将一个命令的标准输出(standard output)作为另一个命令的标准输入(standard input)。对于文件，我们可以用”&amp;lt;”和”&amp;gt;”来将数据从文件中输入或输出。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;符号&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;文件的内容输入到命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将一个命令的标准输出输出到文件，如果文件已存在,文件的内容会被覆盖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;2&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将错误输出输出到文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;amp;&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将标准输出和错误输出都输出到文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将命令的输出到文件中，不覆盖文件原有内容，将输出添加到文件最后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;后面要跟着一个单词，之后所有的输入都会当做用户输入，直到重复输入符号后的单词&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt; 使用大括号 &lt;/p&gt;
&lt;p&gt; 通过使用大括号”{}”,可以在文件名后扩展一组元素。&lt;br&gt; eg:&lt;br&gt; &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ touch &amp;#123;a,b,c&amp;#125;-&amp;#123;1,2,3&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a-1 a-2 a-3 b-1 b-2 b-3 c-1 c-2 c-3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;列出文件和目录&quot;&gt;&lt;a href=&quot;#列出文件和目录&quot; class=&quot;headerlink&quot; title=&quot;列出文件和目录&quot;&gt;&lt;/a&gt;列出文件和目录&lt;/h3&gt;&lt;p&gt;在linux系统中,&lt;em&gt;ls&lt;/em&gt;命令用来列出文件和目录的有关信息，&lt;em&gt;ls&lt;/em&gt;命令有许多option。在默认情况下，输入&lt;em&gt;ls&lt;/em&gt;，会输出当前目录下所有的非隐藏的文件和目录。如果在命令后在上选项”-l”会输出详细的信息(如下)，其中total代表了目录中的内容占用了多少磁盘空间;第一列第一个字符代表了文件的类型，”-“代表普通文件，”d”代表是目录，”l”代表是一个符号链接,剩下的9个字符代表了文件的权限(下面会讲);第二列展示了文件硬链接数或目录子目录数;第三列显示了文件或目录的拥有者;第四列代表文件拥有者所在的组;第五列是文件的大小;第六列是文件最后的修改时间;最后一列展示了文件或目录的名字;&lt;br&gt;eg：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ls &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total 4-rw-rw-r--. 1 joe joe 0 Dec 18 13:38 applelrwxrwxrwx. 1 joe joe 5 Dec 18 13:46 pointer_to_apple -&amp;gt; apple -rwxr-xr-x. 1 joe joe 0 Dec 18 13:37 scriptx.shdrwxrwxr-x. 2 joe joe 4096 Dec 18 13:38 Stuff&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;ls&lt;/em&gt;命令的其它选项：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;选项&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-a&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;展示包含隐藏文件(以.开头)在内的所有文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-t&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;按照最近修改时间展示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在展示时，在目录名后加”/“,在可执行文件后加”*”,在符号链接后加”@”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-S&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;展示时按大小排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;只展示包含的目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-R&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;递归的列出当前目录下所有的文件和目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;–hide=&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;不展示指定目录或文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;理解文件权限&quot;&gt;&lt;a href=&quot;#理解文件权限&quot; class=&quot;headerlink&quot; title=&quot;理解文件权限&quot;&gt;&lt;/a&gt;理解文件权限&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在使用Linux系统时，经常会看到”Permission Denied”(权限不足)的提示。权限控制是为了避免用户访问其他用户的私有文件和保护重要的系统文件。在Linux中，每个文件对应一个9bit的权限信息(eg:rwxrwxrwx)。其中前三位代表了文件拥有者的权限，中间三位代表了拥有者所在组的权限，最后三位代表了其他用户的权限。权限由字母代表，”r”代表读权限，”w”代表写权限，”x”代表执行权限，如果某一位不是字母，而是”-“，则代表没有该位所代表的权限。举个两个栗子🌰🌰，”rw-“代表有读写权限，没有执行权限；”r–”代表只有读权限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用chmod命令更改权限&quot;&gt;&lt;a href=&quot;#使用chmod命令更改权限&quot; class=&quot;headerlink&quot; title=&quot;使用chmod命令更改权限&quot;&gt;&lt;/a&gt;使用chmod命令更改权限&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用数字&lt;blockquote&gt;
&lt;p&gt;文件的拥有者可以改变文件的权限，每种权限都对应了一个数字，读权限r对应4，写权限w对应2，执行权限x对应1。可以通过设置数值来建立权限。&lt;br&gt;eg:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置权限 rwxrwxrwx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chmod 777 filename&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置权限 rwxr-xr-x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chomd 755 filename&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置权限 rw-r--r--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chomd 644 filename&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置权限 ---------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chmod 000 filename&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;使用字母&lt;blockquote&gt;
&lt;p&gt;在linux中，还有另一种改变权限的方式。在这种方式中，”+”和”-“分别代表权限的开和关。字母”u”,”g”,”o”和”a”分别代表拥有者,组，其他用户和全部用户。和上一种方式一样”r”,”w”,”x”分别代表读、写和执行权限。&lt;br&gt;eg：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置权限 将权限rwxrwxrwx改为r-xr-xr-x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chmod a-w filename&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置权限 将权限rwxrwxrwx改为rwxrwxrw-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chomd o-x filename&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置权限 将权限rwxrwxrwx改为rwx------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chmod go-rwx filename&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置权限 将权限---------改为rw-------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chmod u+rw filename&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 更改目录下所有文件和目录的权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chmod -R o-w myapps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;使用umask设置默认权限&lt;blockquote&gt;
&lt;p&gt;普通用户创建文件 默认权限是rw-rw-r–，创建目录 默认权限是rwxrwxr-x。root用户创建文件和目录权限分别是rw-r–r–和rwxr-xr-x。这些默认值由&lt;em&gt;umask&lt;/em&gt;的值决定，可通过命令&lt;em&gt;umask&lt;/em&gt;查看它的值。与&lt;em&gt;chmod&lt;/em&gt;效果刚好相反，&lt;em&gt;umask&lt;/em&gt;设置的是权限的补码，&lt;em&gt;umask&lt;/em&gt;的值有三位分别对应拥有者，同组用户和其他用户的权限。对于文件来说，每一位的最大值是6，因为系统不允许在创建一个文件时就赋予执行权限，需通过&lt;em&gt;chmod&lt;/em&gt;设置；对于目录来说每一位的最大值是7。例如&lt;em&gt;umask&lt;/em&gt;值002所对应的文件和目录的创建权限是664和775。可通过&lt;em&gt;umask&lt;/em&gt;命令改变默认值。&lt;br&gt;eg：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看默认值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;umask&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 改变默认值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;umask&lt;/span&gt; 022&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;改变文件的拥有者&quot;&gt;&lt;a href=&quot;#改变文件的拥有者&quot; class=&quot;headerlink&quot; title=&quot;改变文件的拥有者&quot;&gt;&lt;/a&gt;改变文件的拥有者&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;作为普通用户，是不能更改文件或目录的拥有者的，只有root user(管理员才可以)。&lt;br&gt;eg:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 修改文件的拥有者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chown giraffe filename.text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 同时修改拥有者和组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chown giraffe:coffee filename.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 修改目录下的所有目录和文件的拥有者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chown -R giraffe:coffee /mydic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;移动-复制-删除文件&quot;&gt;&lt;a href=&quot;#移动-复制-删除文件&quot; class=&quot;headerlink&quot; title=&quot;移动 复制 删除文件&quot;&gt;&lt;/a&gt;移动 复制 删除文件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;移动、复制和删除文件的命令很简单。如果想要改变文件的位置，使用&lt;em&gt;mv&lt;/em&gt;命令。如果想要复制文件，使用&lt;em&gt;cp&lt;/em&gt;命令。如果想要删除文件，使用&lt;em&gt;rm&lt;/em&gt;命令。这些命令可以使用在单一的文件和目录上，也可以递归的使用在许多文件和目录上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;移动文件&lt;br&gt;eg：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将文件abc移到home目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mv abc ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将目录mydemo的全部内容移到目录document中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mv /home/giraffe/mydemo /home/giraffe/document&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;复制文件&lt;br&gt;eg：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将文件abc复制到home目录下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cp abc ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将目录bash-completion*下的内容复制到tmp/a下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cp -r /usr/share/bash-completion* /tmp/a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将目录bash-completion*下的内容复制到tmp/a下 并且保留权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cp -ra /usr/share/bash-completion* /tmp/a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;删除文件&lt;br&gt;eg：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除文件abc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ rm abc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除当前目录下所有文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ rm *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除一个空的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ rmdir /home/giraffe/empty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除目录和他包含的所有内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ rm -r /home/giraffe/bigdir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 不提示的删除目录和它包含的所有内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ rm -rf /home/giraffe/bigdir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跟着书，重新梳理一下linux文件系统的有关知识, 最近一天一个接口的节奏真真是极好的,有时间看看书了。😻😻😻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 相关博客:&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition/&quot;&gt;Linux Bible 9th Edition之使用shell&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E7%8E%A9%E8%BD%AC%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/&quot;&gt;Linux Bible 9th Edition之玩转文本文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/12/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%A4%A7%E6%B3%95%E5%A5%BD/&quot;&gt;Linux Bible 9th Edition之进程大法好&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/霸气的喵喵.jpg&quot; alt=&quot;霸气的喵喵&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yemengying.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yemengying.com/tags/linux/"/>
    
      <category term="读书笔记" scheme="http://yemengying.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Linux Bible 9th Edition之使用shell</title>
    <link href="http://yemengying.com/2015/11/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition/"/>
    <id>http://yemengying.com/2015/11/23/读书笔记-Linux-Bible-9th-Edition/</id>
    <published>2015-11-23T08:23:32.000Z</published>
    <updated>2016-02-23T03:47:07.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;其实也不算读书笔记 主要是想整理一下常用的一些linux命令 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 相关博客:&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E7%8E%A9%E8%BD%AC%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/&quot;&gt;Linux Bible 9th Edition之玩转文本文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/&quot;&gt;Linux Bible 9th Edition之文件系统&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/12/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%A4%A7%E6%B3%95%E5%A5%BD/&quot;&gt;Linux Bible 9th Edition之进程大法好&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/doge.jpg&quot; alt=&quot;doge&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;linux命令的一些语法&quot;&gt;&lt;a href=&quot;#linux命令的一些语法&quot; class=&quot;headerlink&quot; title=&quot;linux命令的一些语法&quot;&gt;&lt;/a&gt;linux命令的一些语法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;$&lt;/em&gt;提示符代表普通用户 &lt;em&gt;#&lt;/em&gt;提示符代表root用户。 大多数命令都有许多选项 选项通常由单一字符和连字符组成(eg:ls -a),还有选项是由一个单词代表,需在单词前加双连字符(eg:date - -help)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;获得当前登录会话的一些信息&quot;&gt;&lt;a href=&quot;#获得当前登录会话的一些信息&quot; class=&quot;headerlink&quot; title=&quot;获得当前登录会话的一些信息&quot;&gt;&lt;/a&gt;获得当前登录会话的一些信息&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ who &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ who am i &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ who -uH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;查看服务器上的时间&quot;&gt;&lt;a href=&quot;#查看服务器上的时间&quot; class=&quot;headerlink&quot; title=&quot;查看服务器上的时间&quot;&gt;&lt;/a&gt;查看服务器上的时间&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ date +&lt;span class=&quot;string&quot;&gt;&#39;%d/%m/%y&#39;&lt;/span&gt;(以10/12/14的格式输出)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;当前的目录&quot;&gt;&lt;a href=&quot;#当前的目录&quot; class=&quot;headerlink&quot; title=&quot;当前的目录&quot;&gt;&lt;/a&gt;当前的目录&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;pwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;获得hostname&quot;&gt;&lt;a href=&quot;#获得hostname&quot; class=&quot;headerlink&quot; title=&quot;获得hostname&quot;&gt;&lt;/a&gt;获得hostname&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;列出当前目录下的文件和目录&quot;&gt;&lt;a href=&quot;#列出当前目录下的文件和目录&quot; class=&quot;headerlink&quot; title=&quot;列出当前目录下的文件和目录&quot;&gt;&lt;/a&gt;列出当前目录下的文件和目录&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;(列出详细信息) &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;(列出包括.开头的隐含文件在内的所有文件) -t(按时间排序)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;查看uid-gid&quot;&gt;&lt;a href=&quot;#查看uid-gid&quot; class=&quot;headerlink&quot; title=&quot;查看uid gid&quot;&gt;&lt;/a&gt;查看uid gid&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;LINUX如何定位命令&quot;&gt;&lt;a href=&quot;#LINUX如何定位命令&quot; class=&quot;headerlink&quot; title=&quot;LINUX如何定位命令&quot;&gt;&lt;/a&gt;LINUX如何定位命令&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;可通过&lt;em&gt;echo $PATH&lt;/em&gt;命令查看PATH环境变量的值，如果命令存放的目录包含在PATH中，可直接输入命令运行。如果不包含则需给出命令的位置(eg:绝对位置:/home/chris/scriptx.sh,相对位置:./scriptx.sh) shell检查输入命令的顺序：1.Aliases(别名) 2.Reserved word(保留的关键字) 3.Function 4.Build-in command(eg:cd/echo/exit/type..) 5.Filesystem&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看一个命令的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#打印PATH环境变量的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;在文件系统中查找&quot;&gt;&lt;a href=&quot;#在文件系统中查找&quot; class=&quot;headerlink&quot; title=&quot;在文件系统中查找&quot;&gt;&lt;/a&gt;在文件系统中查找&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ locate ymy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;查看历史输入的命令-修改命令&quot;&gt;&lt;a href=&quot;#查看历史输入的命令-修改命令&quot; class=&quot;headerlink&quot; title=&quot;查看历史输入的命令,修改命令&quot;&gt;&lt;/a&gt;查看历史输入的命令,修改命令&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;可以用&lt;em&gt;history&lt;/em&gt;命令查看之前输入过的所有命令,之后可以通过!+行号 运行指定一行的命令。向上箭头(↑)可查看最近一条命令,下面是修改命令的一些快捷按键。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;快捷键&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+A&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将光标定位到命令的最前面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+E&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将光标定位到命令的最后面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;清空屏幕，将命令置为最上面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+F或 →&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将光标后移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+B或 ←&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将光标前移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt+F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将光标后移一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt+B&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将光标前移一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+D&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除当前字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;backspace&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除前一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+T&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将当前字符和前一个字符对换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt+T&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将当前单词和前一个单词对换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt+U&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将当前单词变成大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt+L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将当前单词变成小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+K&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;剪切从光标位置到最后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+U&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;剪切从光标位置到最前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+W&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;剪切前一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt+D&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;剪切后一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+Y&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;粘贴最近复制的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt+Y&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;粘贴最前复制的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;tab&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;补全命令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;连接和扩展命令&quot;&gt;&lt;a href=&quot;#连接和扩展命令&quot; class=&quot;headerlink&quot; title=&quot;连接和扩展命令&quot;&gt;&lt;/a&gt;连接和扩展命令&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;管道符号 “|”&lt;br&gt;将前一个命令的输出作为下一个命令的输入&lt;br&gt;eg:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat /etc/passwd | sort |less&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令分隔符 “;”&lt;br&gt;在一行语句中 顺次执行各个命令&lt;br&gt;eg: &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#可获得troff命令的执行时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ date; troff -me verylargedocument|lpr ; date&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;后台进程符 “&amp;amp;”&lt;br&gt;如果不希望shell一直被一个命令占用着，可以使用”&amp;amp;”让命令在后台运行&lt;br&gt;eg:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ troff -me verylargedocument | lpr &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用数学表达式/命令的结果 “$[]”/“$()”&lt;br&gt;可以在一个命令中使用数学表达式或另一个命令的结果&lt;br&gt;eg:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;I am $[2015 - 1993] years old&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;there are &lt;span class=&quot;variable&quot;&gt;$(ls | wc -w)&lt;/span&gt; files in this directory&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变量调用符号 “$”&lt;br&gt;eg:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$USER&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;创建和使用别名&quot;&gt;&lt;a href=&quot;#创建和使用别名&quot; class=&quot;headerlink&quot; title=&quot;创建和使用别名&quot;&gt;&lt;/a&gt;创建和使用别名&lt;/h4&gt;&lt;p&gt;使用&lt;em&gt;alias&lt;/em&gt;命令，可以给任何的命令及选项取一个别名&lt;br&gt;eg:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#为命令pwd取别名ymy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; ymy=&lt;span class=&quot;string&quot;&gt;&#39;pwd&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看所有的别名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#删除别名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;unalias&lt;/span&gt; ymy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;退出shell&quot;&gt;&lt;a href=&quot;#退出shell&quot; class=&quot;headerlink&quot; title=&quot;退出shell&quot;&gt;&lt;/a&gt;退出shell&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实也不算读书笔记 主要是想整理一下常用的一些linux命令 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 相关博客:&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E7%8E%A9%E8%BD%AC%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/&quot;&gt;Linux Bible 9th Edition之玩转文本文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/11/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/&quot;&gt;Linux Bible 9th Edition之文件系统&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;http://yemengying.com/2015/12/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Linux-Bible-9th-Edition%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%A4%A7%E6%B3%95%E5%A5%BD/&quot;&gt;Linux Bible 9th Edition之进程大法好&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/doge.jpg&quot; alt=&quot;doge&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yemengying.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yemengying.com/tags/linux/"/>
    
      <category term="读书笔记" scheme="http://yemengying.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>EsGiraffe-利用注解和反射拼接Elasticsearch查询语句</title>
    <link href="http://yemengying.com/2015/11/19/EsGiraffe-%E5%88%A9%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84%E6%8B%BC%E6%8E%A5Elasticsearch%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yemengying.com/2015/11/19/EsGiraffe-利用注解和反射拼接Elasticsearch查询语句/</id>
    <published>2015-11-19T05:56:50.000Z</published>
    <updated>2016-03-18T11:13:43.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;EsGiraffe&quot;&gt;&lt;a href=&quot;#EsGiraffe&quot; class=&quot;headerlink&quot; title=&quot;EsGiraffe&quot;&gt;&lt;/a&gt;EsGiraffe&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;封闭开发结束，终于有时间可以整理一下了。EsGiraffe是一个利用注解和反射开发一套工具类，用来生成elastisearch的查询语句。为什么要叫Giraffe呢？一是因为我喜欢长颈鹿，二是希望可以通过工具类把像长颈鹿脖子一样长的代码简化一下，三是希望这个工具类可以像桥梁一样连接java和elaticsearch。实在编不下去了，其实就是因为喜欢长颈鹿。目前只适用于简单的查询，不过会在工作学习中慢慢完善的。由于目前在工作中用到最多的就是Bool查询，所以目前生成的查询语句最外层就是bool查询，git 地址：&lt;a href=&quot;https://github.com/giraffe0813/EsGiraffe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/giraffe0813/EsGiraffe&lt;/a&gt;。生成的大致的样子如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;query&amp;quot;: {
     &amp;quot;bool&amp;quot;: {
              &amp;quot;must&amp;quot;: [
                      ...
              ],
              &amp;quot;must_not&amp;quot;: [
                      ...
              ],
              &amp;quot;should&amp;quot;: [
                      ...
              ]
          }
      }
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;常见的工作需求&quot;&gt;&lt;a href=&quot;#常见的工作需求&quot; class=&quot;headerlink&quot; title=&quot;常见的工作需求&quot;&gt;&lt;/a&gt;常见的工作需求&lt;/h4&gt;&lt;p&gt;在我工作比较常见的搜索需求就是对外提供搜索的接口。会按照搜索引擎中的字段定义一个对应的model，然后这些字段的值如果为Null，就代表调用方不想对这个字段进行查询，如果不为Null代表需要对这个字段进行查询。而且还会提前在API文档中定义好查询的类型是must、must_not还是should&lt;/p&gt;
&lt;h4 id=&quot;未使用工具类的代码Demo&quot;&gt;&lt;a href=&quot;#未使用工具类的代码Demo&quot; class=&quot;headerlink&quot; title=&quot;未使用工具类的代码Demo&quot;&gt;&lt;/a&gt;未使用工具类的代码Demo&lt;/h4&gt;&lt;p&gt;假设有一个和订单有关的索引，需要对订单的一系列属性进行查询 其中userName和orderMode是should查询 其余都是must&lt;br&gt;查询model：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OrderModel&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String userName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer restaurantId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer orderMode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String userPhone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer comeFrom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String restaurantName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String createdAtBegin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String createdAtEnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer offset = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer limit = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//省略getter和setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查询方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; SearchService implements ISearchService&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;searchOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SearchOrderModel search)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IllegalAccessException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BoolQueryBuilder baseQuery = QueryBuilders.boolQuery();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(search.getUserName() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			baseQuery.should(QueryBuilders.termQuery(&lt;span class=&quot;string&quot;&gt;&quot;user_name&quot;&lt;/span&gt;, search.getUserName()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(search.getRestaurantId() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			baseQuery.must(QueryBuilders.termQuery(&lt;span class=&quot;string&quot;&gt;&quot;restaurant_id&quot;&lt;/span&gt;, search.getRestaurantId()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(search.getOrderMode() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			baseQuery.should(QueryBuilders.termQuery(&lt;span class=&quot;string&quot;&gt;&quot;order_mode&quot;&lt;/span&gt;, search.getOrderMode()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(search.getUserPhone() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			baseQuery.must(QueryBuilders.termQuery(&lt;span class=&quot;string&quot;&gt;&quot;user_phone&quot;&lt;/span&gt;, search.getUserPhone()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(search.getComeFrom() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			baseQuery.must(QueryBuilders.termQuery(&lt;span class=&quot;string&quot;&gt;&quot;come_from&quot;&lt;/span&gt;, search.getComeFrom()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(search.getRestaurantName() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			baseQuery.must(QueryBuilders.queryStringQuery(search.getRestaurantName()).defaultField(&lt;span class=&quot;string&quot;&gt;&quot;restaurant_name&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(search.getCreatedAtBegin() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			baseQuery.must(QueryBuilders.rangeQuery(&lt;span class=&quot;string&quot;&gt;&quot;created_at&quot;&lt;/span&gt;).gte(search.getCreatedAtBegin()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(search.getCreatedAtEnd() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			baseQuery.must(QueryBuilders.rangeQuery(&lt;span class=&quot;string&quot;&gt;&quot;created_at&quot;&lt;/span&gt;).lte(search.getCreatedAtBegin()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log.info(&lt;span class=&quot;string&quot;&gt;&quot;查询语句:&amp;#123;&amp;#125;&quot;&lt;/span&gt;,baseQuery.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		SearchResponse response = client.prepareSearch(&lt;span class=&quot;string&quot;&gt;&quot;index1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.setTypes(&lt;span class=&quot;string&quot;&gt;&quot;type1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.setSearchType(SearchType.DFS_QUERY_THEN_FETCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.setQuery(baseQuery)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.setFrom(search.getOffset()).setSize(search.getLimit()).setExplain(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.execute()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.actionGet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是针对餐厅名称，用户名和来源同时查询时，打印出来的拼接的查询语句:&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;   &lt;span class=&quot;attr&quot;&gt;&quot;bool&quot;&lt;/span&gt; : &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;attr&quot;&gt;&quot;must&quot;&lt;/span&gt; : [ &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;term&quot;&lt;/span&gt; : &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;attr&quot;&gt;&quot;come_from&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;, &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;query_string&quot;&lt;/span&gt; : &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;attr&quot;&gt;&quot;query&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;测试餐厅&quot;&lt;/span&gt;,         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;attr&quot;&gt;&quot;default_field&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;restaurant_name&quot;&lt;/span&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &amp;#125; ],     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;attr&quot;&gt;&quot;should&quot;&lt;/span&gt; : &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 	&lt;span class=&quot;attr&quot;&gt;&quot;term&quot;&lt;/span&gt; : &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 		&lt;span class=&quot;attr&quot;&gt;&quot;user_name&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;123123123&quot;&lt;/span&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 		&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 	&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可是上面只是缩减版的订单model，一个订单的属性有20多个 所以每个属性都判断是否为null，代码就太不漂亮了,而且可读性差，不易维护，所以就想通过注解和反射来精简代码。&lt;/p&gt;
&lt;h4 id=&quot;EsGiraffe的主要内容&quot;&gt;&lt;a href=&quot;#EsGiraffe的主要内容&quot; class=&quot;headerlink&quot; title=&quot;EsGiraffe的主要内容&quot;&gt;&lt;/a&gt;EsGiraffe的主要内容&lt;/h4&gt;&lt;p&gt;EsGiraffe主要是自定义了一些注解，将一些诸如model属性对应的搜索引擎的字段，查询的类型，要查询的index名，要查询的document名用注解标注在model类上，然后在工具类中利用反射获取注解的值 拼接查询语句。下面是几个比较重要的注解:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index注解 DocumentType注解&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只能在类上使用 Index代表要在哪个索引中查询， Document代表要查询的文档 可以指定多个索引或文档用”,”分割&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Index&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;index&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@DocumentType&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;document1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;model&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;EsField注解&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在类的属性上使用 值为该属性对应的索引字段名 如果value为空，那么对应的索引名就是该属性名。这个注解主要是考虑到在Java习惯驼峰式的命名，而搜索引擎中往往是下划线，所以需要一个注解将他们对应起来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Index&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;index&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@DocumentType&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;document1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;model&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;come_from&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer comeFrom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过，这两个注解只适用于在查询前就确定要查询的索引和文档时使用。如果要根据查询的内容才能&lt;br&gt;确定要查询的文档，目前没有想到什么好的解决办法，这种情况只能不用Index和DocumentType注解了。比如做活动查询时，活动索引到搜索引擎中是按照活动所属的城市存储到不同的文档，举个栗子🌰，如果活动1的城市id是1,那么活动1就存在在文档activity_1,如果活动2的城市id是3，那么活动2就存在在文档activity_3中，这种情况就不能靠通过注解的方式获得查询的文档了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bool注解&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最重要的注解，里面包含5个元素value,type,escape,fuzziness,prefix。其中&lt;strong&gt;value&lt;/strong&gt;是MatchType(枚举类)类型，代表了该Bool查询是MUST，MUST_NOT还是SHOULD，默认是MUST。&lt;strong&gt;type&lt;/strong&gt;的值是EsSearchType(枚举类)类型，代表对该字段采用什么类型的查询。默认值是TERMS，支持的其他类型还有TERM,RANGE_FROM, RANGE_TO, RANGE_GT,RANGE_LT, RANGE_GTE, RANGE_LTE, FUZZY, SHOULD_TERM, QUERY_STRING, MATCH。&lt;strong&gt;escape&lt;/strong&gt;是布尔类型的，代表是否需要进行特殊字符(eg: !$()等)的转换，默认值是false。&lt;strong&gt;fuzziness&lt;/strong&gt;和&lt;strong&gt;prefix&lt;/strong&gt;是在新版本中针对type=EsSearchType.FUZZY做的扩展而新增的元素。分别代表Fuzzy Query中的fuzziness和prefix_length,这两个参数的意思可以到&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html#_string_fields_2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;上看，fuzziness的值只能为[0,1,2],否则会报错“org.elasticsearch.ElasticsearchIllegalArgumentException: Valid edit distances are [0, 1, 2]”，不要问我为什么知道。要注意的是这两个元素只有在type=EsSearchType.FUZZY时才有效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Index&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;index&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@DocumentType&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;document1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;model&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;come_from&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.TERM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer comeFrom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;created_at&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.RANGE_GTE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String createdAtBegin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的注解代表的查询语句是&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;   &lt;span class=&quot;attr&quot;&gt;&quot;bool&quot;&lt;/span&gt; : &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;attr&quot;&gt;&quot;must&quot;&lt;/span&gt; : [ &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 	&lt;span class=&quot;attr&quot;&gt;&quot;term&quot;&lt;/span&gt; : &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 		&lt;span class=&quot;attr&quot;&gt;&quot;come_from&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 		&amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 	&amp;#125;, &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 	&lt;span class=&quot;attr&quot;&gt;&quot;range&quot;&lt;/span&gt; : &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 		&lt;span class=&quot;attr&quot;&gt;&quot;created_at&quot;&lt;/span&gt; : &amp;#123;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 			&lt;span class=&quot;attr&quot;&gt;&quot;from&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;2015-02-03&quot;&lt;/span&gt;,          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 			 &lt;span class=&quot;attr&quot;&gt;&quot;to&quot;&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 			 &lt;span class=&quot;attr&quot;&gt;&quot;include_lower&quot;&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 			 &lt;span class=&quot;attr&quot;&gt;&quot;include_upper&quot;&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 			 &amp;#125;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 		&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 	&amp;#125; ]   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;From,Size,Sort注解&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这三个注解也是用到类的属性上的，如果一个属性上标有From注解，代表这个字段的值是查询分页的起始位置；如果一个属性上标有Size注解，代表这个字段的值是分页的长度；如果一个属性上标有Sort注解，代表查询结果按该字段排序，Sort的值有SortType.ASC和SortType.DESC两种。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ElasticBaseSearch中两个工具方法 getIndexAndType和getQueryBuilder&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;已经在类和属性添加了注解，那么就需要写两个方法分别通过反射获取类和属性上的值 来拼接对应的查询语句。&lt;br&gt;其中getQueryBuilder是根据属性上的注解拼装查询语句并返回一个QueryBuilder对象，getIndexAndType是根据注解获得要查询的索引，文档等信息，并返回一个SearchRequestBuilder对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用EsGiraffe简化代码&quot;&gt;&lt;a href=&quot;#使用EsGiraffe简化代码&quot; class=&quot;headerlink&quot; title=&quot;使用EsGiraffe简化代码&quot;&gt;&lt;/a&gt;使用EsGiraffe简化代码&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;下面是使用EsGiraffe简化后的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查询model类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Index&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;index1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@DocumentType&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;type1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OrderModel&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;user_name&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.QUERY_STRING, value = MatchType.SHOULD, escape=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String userName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;restaurant_id&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.TERM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer restaurantId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;order_mode&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.TERM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer orderMode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;usr_phone&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.TERM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String userPhone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;come_from&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.TERM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer comeFrom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;restaurant_name&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.QUERY_STRING,escape=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String restaurantName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;created_at&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.RANGE_GTE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String createdAtBegin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;meta&quot;&gt;@EsField&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;created_at&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;meta&quot;&gt;@Bool&lt;/span&gt;(type = EsSearchType.RANGE_LTE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String createdAtEnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@From&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer offset = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer limit = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//省略getter和setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接口类，也无需写大量的业务逻辑，只需要调用两个工具方法即可&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;searchOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SearchOrderModel search)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IllegalAccessException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.info(&lt;span class=&quot;string&quot;&gt;&quot;查询参数:&amp;#123;&amp;#125;&quot;&lt;/span&gt;, search.toString());     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QueryBuilder baseQuery = ElasticBaseSearch.getInstance().getQueryBuilder(search);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(baseQuery != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	log.info(baseQuery.toString());        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SearchResponse response = ElasticBaseSearch.getInstance().getIndexAndType(client, search).setQuery(baseQuery).execute().actionGet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.info(response.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用了EsGiraffe之后，大大简化了查询接口的代码，无需挨个属性判断是否为null。而且在model类上使用注解，使得程序变得更加可读，每个属性对应搜索引擎中哪个字段，采用哪种查询方式一目了然。下面是使用EsGiraffe之后，对餐厅名称，用户名和来源查询时打印的查询语句，和不用注解生成的是一样的。&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;   &lt;span class=&quot;attr&quot;&gt;&quot;bool&quot;&lt;/span&gt; : &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;attr&quot;&gt;&quot;must&quot;&lt;/span&gt; : [ &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;term&quot;&lt;/span&gt; : &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;attr&quot;&gt;&quot;come_from&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;, &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;query_string&quot;&lt;/span&gt; : &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;attr&quot;&gt;&quot;query&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;测试餐厅&quot;&lt;/span&gt;,         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;attr&quot;&gt;&quot;default_field&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;restaurant_name&quot;&lt;/span&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &amp;#125; ],     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;attr&quot;&gt;&quot;should&quot;&lt;/span&gt; : &amp;#123;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 	&lt;span class=&quot;attr&quot;&gt;&quot;term&quot;&lt;/span&gt; : &amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 		&lt;span class=&quot;attr&quot;&gt;&quot;user_name&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;123123123&quot;&lt;/span&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 		&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 	&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;EsGiraffe&quot;&gt;&lt;a href=&quot;#EsGiraffe&quot; class=&quot;headerlink&quot; title=&quot;EsGiraffe&quot;&gt;&lt;/a&gt;EsGiraffe&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;封闭开发结束，终于有时间可以整理一下了。EsGiraffe是一个利用注解和反射开发一套工具类，用来生成elastisearch的查询语句。为什么要叫Giraffe呢？一是因为我喜欢长颈鹿，二是希望可以通过工具类把像长颈鹿脖子一样长的代码简化一下，三是希望这个工具类可以像桥梁一样连接java和elaticsearch。实在编不下去了，其实就是因为喜欢长颈鹿。目前只适用于简单的查询，不过会在工作学习中慢慢完善的。由于目前在工作中用到最多的就是Bool查询，所以目前生成的查询语句最外层就是bool查询，git 地址：&lt;a href=&quot;https://github.com/giraffe0813/EsGiraffe&quot;&gt;https://github.com/giraffe0813/EsGiraffe&lt;/a&gt;。生成的大致的样子如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;query&amp;quot;: {
     &amp;quot;bool&amp;quot;: {
              &amp;quot;must&amp;quot;: [
                      ...
              ],
              &amp;quot;must_not&amp;quot;: [
                      ...
              ],
              &amp;quot;should&amp;quot;: [
                      ...
              ]
          }
      }
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yemengying.com/categories/elasticsearch/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="elasticsearch" scheme="http://yemengying.com/tags/elasticsearch/"/>
    
      <category term="annotation" scheme="http://yemengying.com/tags/annotation/"/>
    
      <category term="reflect" scheme="http://yemengying.com/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记---深入理解Java虚拟机1</title>
    <link href="http://yemengying.com/2015/11/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA1/"/>
    <id>http://yemengying.com/2015/11/12/读书笔记-深入理解Java虚拟机1/</id>
    <published>2015-11-12T09:23:23.000Z</published>
    <updated>2016-02-02T06:25:01.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近看书总是看不进去，所以。。。决定边看边画画图，做个总结。下面是深入理解Java虚拟机这本书的第二，三章的总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/深入理解java虚拟机1.jpg&quot; alt=&quot;深入理解java虚拟机1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/深入理解java虚拟机2.jpg&quot; alt=&quot;深入理解java虚拟机2&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近看书总是看不进去，所以。。。决定边看边画画图，做个总结。下面是深入理解Java虚拟机这本书的第二，三章的总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/深入理解java虚拟机1.jpg&quot; alt=&quot;深入理解
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="读书笔记" scheme="http://yemengying.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【译】如何在java中使用ConcurrentHashMap</title>
    <link href="http://yemengying.com/2015/11/06/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E5%9C%A8java%E4%B8%AD%E4%BD%BF%E7%94%A8ConcurrentHashMap/"/>
    <id>http://yemengying.com/2015/11/06/【译】如何在java中使用ConcurrentHashMap/</id>
    <published>2015-11-06T05:20:37.000Z</published>
    <updated>2016-02-26T10:26:49.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;原文来自一个java大牛的技术博客 地址&lt;a href=&quot;http://javarevisited.blogspot.com/2013/02/concurrenthashmap-in-java-example-tutorial-working.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javarevisited.blogspot.com/2013/02/concurrenthashmap-in-java-example-tutorial-working.html&lt;/a&gt; 博客讲解了如何在java中使用ConcurrentHashMap。马上要封闭开发10天，连上15天班，真酸爽。下面是原文的翻译：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;ConcurrentHashMap(简称&lt;code&gt;CHM&lt;/code&gt;)是在Java 1.5作为&lt;code&gt;Hashtable&lt;/code&gt;的替代选择新引入的，是concurrent包的重要成员。在Java 1.5之前，如果想要实现一个可以在多线程和并发的程序中安全使用的Map,只能在HashTable和synchronized Map中选择，因为HashMap并不是线程安全的。但再引入了CHM之后，我们有了更好的选择。CHM不但是线程安全的，而且比HashTable和synchronizedMap的性能要好。相对于HashTable和synchronizedMap锁住了整个Map，CHM只锁住部分Map。CHM允许并发的读操作，同时通过同步锁在写操作时保持数据完整性。我们已经在&lt;a href=&quot;http://javarevisited.blogspot.sg/2013/02/concurrent-collections-from-jdk-56-java-example-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Top 5 Java Concurrent Collections from JDK 5 and 6&lt;/a&gt;中学习了CHM的基础知识，在这篇博客中我将介绍以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CHM在Java中如何实现的&lt;/li&gt;
&lt;li&gt;什么情况下应该使用CHM&lt;/li&gt;
&lt;li&gt;在Java中使用CHM的例子&lt;/li&gt;
&lt;li&gt;CHM的一些重要特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Java中ConcurrentHashMap的实现&quot;&gt;&lt;a href=&quot;#Java中ConcurrentHashMap的实现&quot; class=&quot;headerlink&quot; title=&quot;Java中ConcurrentHashMap的实现&quot;&gt;&lt;/a&gt;Java中ConcurrentHashMap的实现&lt;/h3&gt;&lt;p&gt;CHM引入了分割，并提供了HashTable支持的所有的功能。在CHM中，支持多线程对Map做读操作，并且不需要任何的&lt;a href=&quot;http://javarevisited.blogspot.com/2012/02/what-is-blocking-methods-in-java-and.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blocking&lt;/a&gt;。这得益于CHM将Map分割成了不同的部分，在执行更新操作时只锁住一部分。根据默认的并发级别(&lt;code&gt;concurrency level&lt;/code&gt;)，Map被分割成16个部分，并且由不同的锁控制。这意味着，同时最多可以有16个写线程操作Map。试想一下，由只能一个线程进入变成同时可由16个写线程同时进入(读线程几乎不受限制)，性能的提升是显而易见的。但由于一些更新操作，如put(),remove(),putAll(),clear()只锁住操作的部分，所以在检索操作不能保证返回的是最新的结果。&lt;/p&gt;
&lt;p&gt;另一个重要点是在迭代遍历CHM时，keySet返回的iterator是弱一致和&lt;a href=&quot;http://javarevisited.blogspot.in/2012/02/fail-safe-vs-fail-fast-iterator-in-java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fail-safe&lt;/a&gt;的，可能不会返回某些最近的改变，并且在遍历过程中，如果已经遍历的数组上的内容变化了，不会抛出ConcurrentModificationExceptoin的异常。&lt;/p&gt;
&lt;p&gt;CHM默认的并发级别是16，但可以在创建CHM时通过构造函数改变。毫无疑问，并发级别代表着并发执行更新操作的数目，所以如果只有很少的线程会更新Map，那么建议设置一个低的并发级别。另外，CHM还使用了ReentrantLock来对segments加锁。&lt;/p&gt;
&lt;h3 id=&quot;Java中ConcurrentHashMap-putifAbsent方法的例子&quot;&gt;&lt;a href=&quot;#Java中ConcurrentHashMap-putifAbsent方法的例子&quot; class=&quot;headerlink&quot; title=&quot;Java中ConcurrentHashMap putifAbsent方法的例子&quot;&gt;&lt;/a&gt;Java中ConcurrentHashMap putifAbsent方法的例子&lt;/h3&gt;&lt;p&gt;很多时候我们希望在元素不存在时插入元素，我们一般会像下面那样写代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(map)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (map.get(key) == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map.put(key, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map.get(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这段代码在HashMap和HashTable中是好用的，但在CHM中是有出错的风险的。这是因为CHM在put操作时并没有对整个Map加锁，所以一个线程正在put(k,v)的时候，另一个线程调用get(k)会得到null，这就会造成一个线程put的值会被另一个线程put的值所覆盖。当然，你可以将代码封装到synchronized代码块中，这样虽然线程安全了，但会使你的代码变成了单线程。CHM提供的putIfAbsent(key,value)方法原子性的实现了同样的功能，同时避免了上面的线程竞争的风险。&lt;/p&gt;
&lt;h3 id=&quot;什么时候使用ConcurrentHashMap&quot;&gt;&lt;a href=&quot;#什么时候使用ConcurrentHashMap&quot; class=&quot;headerlink&quot; title=&quot;什么时候使用ConcurrentHashMap&quot;&gt;&lt;/a&gt;什么时候使用ConcurrentHashMap&lt;/h3&gt;&lt;p&gt;CHM适用于读者数量超过写者时，当写者数量大于等于读者时，CHM的性能是低于Hashtable和synchronized Map的。这是因为当锁住了整个Map时，读操作要等待对同一部分执行写操作的线程结束。CHM适用于做cache,在程序启动时初始化，之后可以被多个请求线程访问。正如Javadoc说明的那样，CHM是HashTable一个很好的替代，但要记住，CHM的比HashTable的同步性稍弱。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;现在我们知道了什么是ConcurrentHashMap和什么时候该用ConcurrentHashMap，下面我们来复习一下CHM的一些关键点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CHM允许并发的读和线程安全的更新操作&lt;/li&gt;
&lt;li&gt;在执行写操作时，CHM只锁住部分的Map&lt;/li&gt;
&lt;li&gt;并发的更新是通过内部根据并发级别将Map分割成小部分实现的&lt;/li&gt;
&lt;li&gt;高的并发级别会造成时间和空间的浪费，低的并发级别在写线程多时会引起线程间的竞争&lt;/li&gt;
&lt;li&gt;CHM的所有操作都是线程安全&lt;/li&gt;
&lt;li&gt;CHM返回的迭代器是弱一致性，fail-safe并且不会抛出ConcurrentModificationException异常&lt;/li&gt;
&lt;li&gt;CHM不允许null的键值&lt;/li&gt;
&lt;li&gt;可以使用CHM代替HashTable，但要记住CHM不会锁住整个Map&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上就是Java中CHM的实现和使用场景&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自一个java大牛的技术博客 地址&lt;a href=&quot;http://javarevisited.blogspot.com/2013/02/concurrenthashmap-in-java-example-tutorial-working.html&quot;&gt;http://javarevisited.blogspot.com/2013/02/concurrenthashmap-in-java-example-tutorial-working.html&lt;/a&gt; 博客讲解了如何在java中使用ConcurrentHashMap。马上要封闭开发10天，连上15天班，真酸爽。下面是原文的翻译：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
      <category term="hashmap" scheme="http://yemengying.com/categories/java/hashmap/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】Java8中的扩展(default/extension)方法</title>
    <link href="http://yemengying.com/2015/11/01/Java-8%E4%B8%AD%E7%9A%84%E6%89%A9%E5%B1%95-Default-Defender-Extension-%E6%96%B9%E6%B3%95/"/>
    <id>http://yemengying.com/2015/11/01/Java-8中的扩展-Default-Defender-Extension-方法/</id>
    <published>2015-11-01T14:11:06.000Z</published>
    <updated>2016-02-03T08:19:23.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;原文来自一个java大牛的技术博客 地址&lt;a href=&quot;http://javarevisited.blogspot.hk/2014/07/default-defender-or-extension-method-of-Java8-example-tutorial.html#uds-search-results&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javarevisited.blogspot.hk/2014/07/default-defender-or-extension-method-of-Java8-example-tutorial.html#uds-search-results&lt;/a&gt; 博客讲解了Java 8中新引入的可以在接口中定义扩展方法。下面是原文的翻译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java 8允许开发者使用&lt;code&gt;default&lt;/code&gt;和&lt;code&gt;static&lt;/code&gt;两个关键字在接口中加入非抽象的方法。带有default关键字的方法在Java中也被称作defender方法或defaul方法。在Java 8之前，想要改变一个已经发布的接口几乎是不可能的，任何改动(例如增加一个新的方法)都会影响该接口现有的实现类。这也是为什么在Java 8想要改变内部iterator的实现，使用forEach()方法时面临了一个巨大的挑战，因为这会破坏了现有的Iterable接口的实现类。毫无疑问，向后兼容是Java工程师最优先考虑的事，所以要破坏现有的实现类是不可行的。因此，他们提出了一个解决办法，引入default方法。这是一个绝妙的想法，因为现在你可以用扩展现有的接口。JDK本身也使用了许多default方法,java.util.Map接口扩展了许多default方法，例如replaceAll(),putIfAbsent(Key k,Value v)….。另外，由于default方法可以扩展现有的接口也被称作extension方法。一个接口中的default方法是数量不受限制的。我相信，在这次改变之后，将不再需要抽象类来提供骨架实现(skeletal implementation),例如List接口有AbstractList，Collection接口有AbstractCollection，Set接口有AbstractSet，Map接口有AbstractMap。我们可以通过在接口中定义default方法来替代创建一个新的抽象类。相似的，static方法的引入也使得接口的工具类变得冗余。例如，Collection接口的Collections类，Path接口的Paths类，因为你可以直接在接口中定义静态工具方法。如果你想了解更多关于Java 8的新特性，我建议阅读Cay S. Horstmann写的Java SE 8 Really Impatient。这是我最喜欢的关于Java 8的书之一，它详细的介绍了Java7与Java 8不同的特性。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Default方法的例子&quot;&gt;&lt;a href=&quot;#Default方法的例子&quot; class=&quot;headerlink&quot; title=&quot;Default方法的例子&quot;&gt;&lt;/a&gt;Default方法的例子&lt;/h3&gt;&lt;p&gt;Java 8让我们可以通过default关键字为接口添加非抽象的方法。这一特性也被称作Extension(扩展)方法。下面是第一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Multiplication&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; multiply(a, a); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了抽象方法multiply()之外，接口Multiplication还包含一个default方法square()。任何实现Multiplication接口的类只需实现抽象方法multiply，default方法square()可以直接使用。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Multiplication product = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Multiplication()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x*y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; square = product.square(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; multiplication = product.multiply(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;product是个匿名类。这段代码有点啰嗦了，用了6行实现一个简单地乘法的功能。我们可以利用lambda表达式来简化一下代码，lambda表达式也是Java 8中新引入的。因为我们的接口只包含一个抽象方法，而且lambda表达式也是SAM(Single Abstract method单一抽象方法)类型的。我们可以用lambda表达式来替代匿名类将代码简化成下面的样子。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Multiplication lambda = (x, y) -&amp;gt; x*y; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; product = lambda.multiply(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; square = lambda.square(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上就是在接口中使用default方法的例子。现在，你可以毫无顾虑的在旧的接口中扩展新的方法，只要这些方法是default或static的就不用担心会破坏接口的实现类。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**Java Program to demonstrate use of default method in Java 8. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * You can define non-abstract method by using default keyword, and more &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * than one default method is permitted, which allows you to ship default skeletal &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * implementation on interface itself. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Javin Paul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Java8DefaultMethodDemo&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Implementing interface using Anonymous class &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Multiplication product = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Multiplication()&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x*y; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; squareOfTwo = product.square(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cubeOfTwo = product.cube(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Square of Two : &quot;&lt;/span&gt; + squareOfTwo); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Cube of Two : &quot;&lt;/span&gt; + cubeOfTwo); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Since Multiplication has only one abstract method, it can &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// also be implemented using lambda expression in Java 8 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Multiplication lambda = (x, y) -&amp;gt; x*y; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; squareOfThree = lambda.square(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cubeOfThree = lambda.cube(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Square of Three : &quot;&lt;/span&gt; + squareOfThree); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Cube of Three : &quot;&lt;/span&gt; + cubeOfThree);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Multiplication&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; multiply(a, a); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; multiply(multiply(a, a), a); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Output :  Square of Two : &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 Cube of Two : &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 Square of Three : &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 Cube of Three : &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是个很好的关于如何使用default方法在接口中方便的添加方法的例子。也展示了如何避免一个额外的帮助类，比如Collections类。它仅仅提供了一些用于Collection的工具方法，而现在我们可以直接在Collection中定义这些方法。在上面的例子中，我们有一个包含一个抽象方法multiply(a,b)的接口Multiplication，接口还包括两个依赖于multiply(a,b)方法的非抽象方法square(a)和cube(b)。接口的实现类只需要实现multiply(a,b)方法，就可以直接使用square(a)和cube(b)方法了。&lt;/p&gt;
&lt;h3 id=&quot;default方法的关键点&quot;&gt;&lt;a href=&quot;#default方法的关键点&quot; class=&quot;headerlink&quot; title=&quot;default方法的关键点&quot;&gt;&lt;/a&gt;default方法的关键点&lt;/h3&gt;&lt;p&gt;现在让我们来复习我们刚刚学到了什么，记一下关于default方法的关键点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/default.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Java8中你可以在接口中添加default方法&lt;/li&gt;
&lt;li&gt;default方法的出现使得接口和抽象类的不同变得模糊。所以，当在面试中被问到这个问题，别忘了提一下，以前只能通过抽象类实现的事情，现在也可以通过default方法实现了。&lt;/li&gt;
&lt;li&gt;default并不是一个新的关键字，在JDK1.1中就是保留关键字&lt;/li&gt;
&lt;li&gt;接口中default方法的数量没有限制&lt;/li&gt;
&lt;li&gt;如果接口C继承了接口A和B，如果A和B中拥有一样的default方法，编译器在编译过程中会报错。为了避免歧义，这在Java 8中是不允许的。所以当default方法有冲突时，是不可以多继承的&lt;/li&gt;
&lt;li&gt;在JDK1.8中有许多关于default方法的例子，比如forEach方法。也可以查看java.util.Map中新添的putIfAbsent方法，在JDK1.8之前，我们只能ConcurrentMap来使用它。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上就是default方法。不得不说，这是一个巨大的突破，使我们可以更好更方便的使用接口。了解CurrentMap的putIfAbsent方法可以帮助我们更好的记住default方法。在JDK1.7中，putIfAbsent方法并不存在于Map接口中，所以为了使用putIfAbsent方法，必须将Map接口指向的ConcurrentMap对象强制转换成ConcurrentMap。但Java 8引入扩展方法之后，Map接口中也有了putIfAbsent方法。想了解更多的关于Java8的新特性，可以阅读&lt;code&gt;Manning&amp;#39;s Java 8 in Action&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自一个java大牛的技术博客 地址&lt;a href=&quot;http://javarevisited.blogspot.hk/2014/07/default-defender-or-extension-method-of-Java8-example-tutorial.html#uds-search-results&quot;&gt;http://javarevisited.blogspot.hk/2014/07/default-defender-or-extension-method-of-Java8-example-tutorial.html#uds-search-results&lt;/a&gt; 博客讲解了Java 8中新引入的可以在接口中定义扩展方法。下面是原文的翻译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java 8允许开发者使用&lt;code&gt;default&lt;/code&gt;和&lt;code&gt;static&lt;/code&gt;两个关键字在接口中加入非抽象的方法。带有default关键字的方法在Java中也被称作defender方法或defaul方法。在Java 8之前，想要改变一个已经发布的接口几乎是不可能的，任何改动(例如增加一个新的方法)都会影响该接口现有的实现类。这也是为什么在Java 8想要改变内部iterator的实现，使用forEach()方法时面临了一个巨大的挑战，因为这会破坏了现有的Iterable接口的实现类。毫无疑问，向后兼容是Java工程师最优先考虑的事，所以要破坏现有的实现类是不可行的。因此，他们提出了一个解决办法，引入default方法。这是一个绝妙的想法，因为现在你可以用扩展现有的接口。JDK本身也使用了许多default方法,java.util.Map接口扩展了许多default方法，例如replaceAll(),putIfAbsent(Key k,Value v)….。另外，由于default方法可以扩展现有的接口也被称作extension方法。一个接口中的default方法是数量不受限制的。我相信，在这次改变之后，将不再需要抽象类来提供骨架实现(skeletal implementation),例如List接口有AbstractList，Collection接口有AbstractCollection，Set接口有AbstractSet，Map接口有AbstractMap。我们可以通过在接口中定义default方法来替代创建一个新的抽象类。相似的，static方法的引入也使得接口的工具类变得冗余。例如，Collection接口的Collections类，Path接口的Paths类，因为你可以直接在接口中定义静态工具方法。如果你想了解更多关于Java 8的新特性，我建议阅读Cay S. Horstmann写的Java SE 8 Really Impatient。这是我最喜欢的关于Java 8的书之一，它详细的介绍了Java7与Java 8不同的特性。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="interface" scheme="http://yemengying.com/tags/interface/"/>
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】以生产者消费者为例阐述如何使用wait，notify和notifyAll</title>
    <link href="http://yemengying.com/2015/10/29/%E8%AF%91-%E4%BB%A5%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%BA%E4%BE%8B%E9%98%90%E8%BF%B0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8wait%EF%BC%8Cnotify%E5%92%8CnotifyAll/"/>
    <id>http://yemengying.com/2015/10/29/译-以生产者消费者为例阐述如何使用wait，notify和notifyAll/</id>
    <published>2015-10-29T06:34:55.000Z</published>
    <updated>2016-02-03T09:59:21.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;原文来自一个java大牛的技术博客 地址&lt;a href=&quot;http://javarevisited.blogspot.com/2015/07/how-to-use-wait-notify-and-notifyall-in.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javarevisited.blogspot.com/2015/07/how-to-use-wait-notify-and-notifyall-in.html&lt;/a&gt; 博客以生产者和消费者为例 讲解了如何使用wait,notify,notifyAll进行多个线程之间的通信。下面是原文的翻译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Java中可以利用use,notify,notifyAll来完成线程之间的通信。举个例子，假设你的程序中有两个线程(eg:&lt;code&gt;Producer&lt;/code&gt;(生产者)和&lt;code&gt;Consumer&lt;/code&gt;(消费者))，Producer要和Consumer通信，通知Consumer队列中有元素了可以开始消费。相似的，Consumer也需要通知Producer队列中有空闲可以插入元素了。一个线程可以可以在一定条件下调用wait方法暂停什么都不做。比如，在Producer和consumer的问题中，当队列满了时Producer需要调用wait，当队列为空时Consumer需要调用wait方法。如果一些线程在等待某些条件变为真，可以在条件改变时使用notify和notifyAll通知他们并唤醒他们。Notify方法和NotifyAll方法都可以发送通知，不同的是，notify只能向等待的线程中的一个发送通知，不保证接受到通知的是哪个线程，而NotifyAll会向所有线程发送通知。所以如果只有一个线程等待对象锁，notify和notifyAll都会通知到它。在这个java多线程的教程中，将利用生产者，消费者的例子讲述在Java中如何使用wait，notify和notifyAll实现线程内部通信。另外，如果大家对掌握多线程和并发很感兴趣，强烈建议大家阅读&lt;code&gt;Brian Goetz&lt;/code&gt;写的&lt;code&gt;Java Concurrency in Practice&lt;/code&gt;。如果没看过这本书，你的Java多线程之旅是不完整的🙀。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;在代码中展示如何使用wait和notify&quot;&gt;&lt;a href=&quot;#在代码中展示如何使用wait和notify&quot; class=&quot;headerlink&quot; title=&quot;在代码中展示如何使用wait和notify&quot;&gt;&lt;/a&gt;在代码中展示如何使用wait和notify&lt;/h3&gt;&lt;p&gt;尽管wait和notify是相当基础的概念，并且他们定义在&lt;code&gt;Object&lt;/code&gt;类中，但要想在代码中使用他们并非易事。你可以在面试中让面试者通过手写代码解决Producer者和Consumer者问题来验证，我相信大多数人都会犯在错误的地方同步，没有在正确的对象上调用wait之类的错。讲真，这些常常会困惑许多程序员。第一个困惑点来自怎样调用wait方法，因为wait方法并不是定义在Thread类中，所以不能简单的Thread.wait()。而许多Java开发者习惯于Thread.sleep(),所以常常错误的想用同样的方式调用wait。实际上，wait()方法需要在一个被两个线程共享的对象上调用，例如在Producer者和消费Consumer的问题中，两个线程共享对象是一个队列。第二个困惑点来自wait方法应该在同步块还是同步方法中调用？如果使用同步块，那么哪个对象应该放到同步块中？这个对象和你想要获得锁的对象应该是同一个。在我们的例子中，这个对象就是两个线程共享的队列。&lt;br&gt;&lt;img src=&quot;/images/wait1.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;在循环中使用wait和notify，而不是If代码块中&quot;&gt;&lt;a href=&quot;#在循环中使用wait和notify，而不是If代码块中&quot; class=&quot;headerlink&quot; title=&quot;在循环中使用wait和notify，而不是If代码块中&quot;&gt;&lt;/a&gt;在循环中使用wait和notify，而不是If代码块中&lt;/h3&gt;&lt;p&gt;在你已经了解需要在一个共享的对象上调用wait方法后，接下来就是学会避免许多java开发者犯的错—在If代码块中调用wait而不是while循环中。因为需要在一定的条件下调用wait，比如Producer线程要在队列满了的情况下调用wait，所以第一反应都是使用If语句。但是，在If代码块中调用wait会产生&lt;code&gt;bug&lt;/code&gt;，因为线程存在一定的可能在等待条件没有改变的情况下&lt;code&gt;假唤醒(spurious wake up)&lt;/code&gt;。所以如果没有使用循环在线程唤醒后检查等待条件，可能会造成尝试在已经满了的队列中插入元素或者在空了的队列中取元素。这就是为什么我们要在while循环中调用wait而不是if。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// The standard idiom for calling the wait method in Java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (sharedObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (condition) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sharedObject.wait();&lt;span class=&quot;comment&quot;&gt;// (Releases lock, and reacquires on wakeup)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;span class=&quot;comment&quot;&gt;// do action based upon condition e.g. take or put into queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正如我建议的，我们应该在一个循环中调用wait。这个循环用于在线程休眠之前和之后检查condition。&lt;/p&gt;
&lt;h3 id=&quot;Java中使用wait-notify-notifyAll-的例子&quot;&gt;&lt;a href=&quot;#Java中使用wait-notify-notifyAll-的例子&quot; class=&quot;headerlink&quot; title=&quot;Java中使用wait(),notify(),notifyAll()的例子&quot;&gt;&lt;/a&gt;Java中使用wait(),notify(),notifyAll()的例子&lt;/h3&gt;&lt;p&gt;下面是在Java中使用wait(),notify(),notifyAll()的例子。在这个程序中，有两个线程(PRODUCTOR和CONSUMER)，用继承了Thread类的Producer和Consumer类实现。Prodcuer和Consumer的业务逻辑写在他们各自的run()方法中。并且实现一个LinkedList，当做共享队列。Producer在一个死循环中不断在队列中插入随机数，直到队列满了。我们会检查while(queue.size == maxSize),需要注意的是在检查之前需要给队列加上同步锁以保证在检查时没有另一个线程修改队列。如果队列满了，PRODUCER线程就会休眠，直到CONSUMER消费了队列中的元素并且调用notify()方法通知PRODUCER线程。&lt;code&gt;wait和notify都是在共享的对象(我们的例子中是队列)上调用的&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.LinkedList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Random;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Simple Java program to demonstrate How to use wait, notify and notifyAll()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * method in Java by solving producer consumer problem.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Javin Paul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MultipleThread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;How to use wait and notify method in Java&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Solving Producer Consumper Problem&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Queue&amp;lt;Integer&amp;gt; buffer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread producer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Producer(buffer, maxSize, &lt;span class=&quot;string&quot;&gt;&quot;PRODUCER&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread consumer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Consumer(buffer, maxSize, &lt;span class=&quot;string&quot;&gt;&quot;CONSUMER&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        producer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        consumer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Producer Thread will keep producing values for Consumer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * to consumer. It will use wait() method when Queue is full&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * and use notify() method to send notification to Consumer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Thread.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; WINDOWS 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Producer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Queue&amp;lt;Integer&amp;gt; queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Queue&amp;lt;Integer&amp;gt; queue, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxSize, String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.queue = queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxSize = maxSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (queue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (queue.size() == maxSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        System.out .println(&lt;span class=&quot;string&quot;&gt;&quot;Queue is full, &quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;Producer thread waiting for &quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;consumer to take something from queue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        queue.wait();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ex.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Random random = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = random.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Producing value : &quot;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                queue.add(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                queue.notifyAll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Consumer Thread will consumer values form shared queue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * It will also use wait() method to wait if queue is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * empty. It will also use notify method to send * notification to producer thread after consuming values&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * from queue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; WINDOWS 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; **/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Consumer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Queue&amp;lt;Integer&amp;gt; queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Queue&amp;lt;Integer&amp;gt; queue, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxSize, String name)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.queue = queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxSize = maxSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (queue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (queue.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Queue is empty,&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;Consumer thread is waiting&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot; for producer thread to put something in queue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        queue.wait();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ex.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Consuming value : &quot;&lt;/span&gt; + queue.remove());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                queue.notifyAll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;How to use wait and notify method in Java &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Solving Producer Consumper Problem &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Queue is empty,Consumer thread is waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; producer thread to put something in queue &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : -&lt;span class=&quot;number&quot;&gt;1692411980&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : &lt;span class=&quot;number&quot;&gt;285310787&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : -&lt;span class=&quot;number&quot;&gt;1045894970&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : &lt;span class=&quot;number&quot;&gt;2140997307&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : &lt;span class=&quot;number&quot;&gt;1379699468&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : &lt;span class=&quot;number&quot;&gt;912077154&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : -&lt;span class=&quot;number&quot;&gt;1635438928&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : -&lt;span class=&quot;number&quot;&gt;500696499&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : -&lt;span class=&quot;number&quot;&gt;1985700664&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Producing value : &lt;span class=&quot;number&quot;&gt;961945684&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Queue is full, Producer thread waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; consumer to take something from queue Consuming value : -&lt;span class=&quot;number&quot;&gt;1692411980&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consuming value : &lt;span class=&quot;number&quot;&gt;285310787&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consuming value : -&lt;span class=&quot;number&quot;&gt;1045894970&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consuming value : &lt;span class=&quot;number&quot;&gt;2140997307&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consuming value : &lt;span class=&quot;number&quot;&gt;1379699468&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consuming value : &lt;span class=&quot;number&quot;&gt;912077154&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consuming value : -&lt;span class=&quot;number&quot;&gt;1635438928&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consuming value : -&lt;span class=&quot;number&quot;&gt;500696499&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consuming value : -&lt;span class=&quot;number&quot;&gt;1985700664&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consuming value : &lt;span class=&quot;number&quot;&gt;961945684&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Queue is empty,Consumer thread is waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; producer thread to put something in queue&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了更好的理解这个程序，我建议大家使用debug模式运行。&lt;/p&gt;
&lt;h3 id=&quot;使用wait，notify，notifyAll需要注意的&quot;&gt;&lt;a href=&quot;#使用wait，notify，notifyAll需要注意的&quot; class=&quot;headerlink&quot; title=&quot;使用wait，notify，notifyAll需要注意的&quot;&gt;&lt;/a&gt;使用wait，notify，notifyAll需要注意的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在Java中可以使用wait，notify，notifyAll完成多线程(不仅仅是两个线程)的内部通信。&lt;/li&gt;
&lt;li&gt;在同步方法或同步块中使用wait，notify，notifyAll，否则JVM会抛出IllegalMonitorStateException&lt;/li&gt;
&lt;li&gt;在循环中调用wait，notify。&lt;/li&gt;
&lt;li&gt;在线程共享的对象上调用wait&lt;/li&gt;
&lt;li&gt;偏向选择notifyAll，而不是notify，原因在这篇&lt;a href=&quot;http://javarevisited.blogspot.sg/2012/10/difference-between-notify-and-notifyall-java-example.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;里&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/wait2.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自一个java大牛的技术博客 地址&lt;a href=&quot;http://javarevisited.blogspot.com/2015/07/how-to-use-wait-notify-and-notifyall-in.html&quot;&gt;http://javarevisited.blogspot.com/2015/07/how-to-use-wait-notify-and-notifyall-in.html&lt;/a&gt; 博客以生产者和消费者为例 讲解了如何使用wait,notify,notifyAll进行多个线程之间的通信。下面是原文的翻译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Java中可以利用use,notify,notifyAll来完成线程之间的通信。举个例子，假设你的程序中有两个线程(eg:&lt;code&gt;Producer&lt;/code&gt;(生产者)和&lt;code&gt;Consumer&lt;/code&gt;(消费者))，Producer要和Consumer通信，通知Consumer队列中有元素了可以开始消费。相似的，Consumer也需要通知Producer队列中有空闲可以插入元素了。一个线程可以可以在一定条件下调用wait方法暂停什么都不做。比如，在Producer和consumer的问题中，当队列满了时Producer需要调用wait，当队列为空时Consumer需要调用wait方法。如果一些线程在等待某些条件变为真，可以在条件改变时使用notify和notifyAll通知他们并唤醒他们。Notify方法和NotifyAll方法都可以发送通知，不同的是，notify只能向等待的线程中的一个发送通知，不保证接受到通知的是哪个线程，而NotifyAll会向所有线程发送通知。所以如果只有一个线程等待对象锁，notify和notifyAll都会通知到它。在这个java多线程的教程中，将利用生产者，消费者的例子讲述在Java中如何使用wait，notify和notifyAll实现线程内部通信。另外，如果大家对掌握多线程和并发很感兴趣，强烈建议大家阅读&lt;code&gt;Brian Goetz&lt;/code&gt;写的&lt;code&gt;Java Concurrency in Practice&lt;/code&gt;。如果没看过这本书，你的Java多线程之旅是不完整的🙀。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
      <category term="thread" scheme="http://yemengying.com/categories/java/thread/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>使用基于注解的mybatis时,利用反射和注解生成sql语句</title>
    <link href="http://yemengying.com/2015/10/28/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84mybatis%E6%8F%92%E5%85%A5%E5%AF%B9%E8%B1%A1%E6%97%B6%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90sql%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yemengying.com/2015/10/28/基于注解的mybatis插入对象时利用反射生成sql语句/</id>
    <published>2015-10-28T05:21:29.000Z</published>
    <updated>2016-02-03T06:33:30.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在开发时遇到一个问题，在使用基于注解的mybatis插入一个对象到mysql时，在写sql语句时需要列出对象的所有属性，所以在插入一个拥有10个以上属性的对象时sql语句就会变得很长，写起来也很不方便,也很容易拼错。google了一下也没有找到什么解决方式(可能是姿势不对😜)，在stackoverflow上提的&lt;a href=&quot;http://stackoverflow.com/questions/33383134/how-to-insert-an-objectmore-than-10-properties-into-mysql-via-mybatis-based-on&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;问题&lt;/a&gt;截止目前还没有人回答。所以自己想了一个基于反射和注解的解决办法&lt;br&gt;git地址：&lt;a href=&quot;https://github.com/giraffe0813/spring-mybatis-utils&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/giraffe0813/spring-mybatis-utils&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;下面是之前的代码片段:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Insert&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;insert into poi_shop(name,brand,tags,status,phone,mobile,business_time,address,city,lng,lat,business_type,attribute_json) values(#&amp;#123;name&amp;#125;,#&amp;#123;brand&amp;#125;,#&amp;#123;tags&amp;#125;,#&amp;#123;status&amp;#125;,#&amp;#123;phone&amp;#125;,#&amp;#123;mobile&amp;#125;,#&amp;#123;business_time&amp;#125;,#&amp;#123;address&amp;#125;,#&amp;#123;city&amp;#125;,#&amp;#123;lng&amp;#125;,#&amp;#123;lat&amp;#125;,#&amp;#123;business_type&amp;#125;,#&amp;#123;attribute_json&amp;#125;)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Options&lt;/span&gt;(useGeneratedKeys = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, keyProperty = &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;, keyColumn = &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Long &lt;span class=&quot;title&quot;&gt;insertPoiInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PoiBo poiBo)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是不是too looooooooooooong：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/baoman1.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一版-利用反射&quot;&gt;&lt;a href=&quot;#第一版-利用反射&quot; class=&quot;headerlink&quot; title=&quot;第一版(利用反射)&quot;&gt;&lt;/a&gt;第一版(利用反射)&lt;/h3&gt;&lt;p&gt;首先想到的是可以利用反射获得对象的所有属性，然后拼接成sql语句。所以写了一个基于反射拼装sql语句的方法，然后基于mybatis动态获得sql语句的方式 获得完整的sql 具体的代码如下:&lt;br&gt;接口层改为下面的样子，sql语句的生成放到PoiSqlProvider的insertPoiBo方法中&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@InsertProvider&lt;/span&gt;(type = PoiSqlProvider.class, method = &lt;span class=&quot;string&quot;&gt;&quot;insertPoiBo&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Long &lt;span class=&quot;title&quot;&gt;insertPoiInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Param(&lt;span class=&quot;string&quot;&gt;&quot;poiBo&quot;&lt;/span&gt;)&lt;/span&gt;PoiBo poiBo)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PoiSqlProvider.class&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;insertPoiBo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Map&amp;lt;String,Object&amp;gt; map)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       PoiBo poiBo = (PoiBo)map.get(&lt;span class=&quot;string&quot;&gt;&quot;poiBo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       StringBuilder sql = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;string&quot;&gt;&quot;insert into poi_shop &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//get sql via reflection&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Map&amp;lt;String,String&amp;gt; sqlMap = getAllPropertiesForSql(poiBo, &lt;span class=&quot;string&quot;&gt;&quot;poiBo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       sql.append(sqlMap.get(&lt;span class=&quot;string&quot;&gt;&quot;field&quot;&lt;/span&gt;)).append(sqlMap.get(&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       System.out.println(sql.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sql.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//根据传入的对象 基于反射生成两部分sql语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;  Map&amp;lt;String,String&amp;gt; &lt;span class=&quot;title&quot;&gt;getAllPropertiesForSql&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object obj, String objName)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Map&amp;lt;String,String&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String,String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == obj) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       StringBuilder filedSql = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       StringBuilder valueSql = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;string&quot;&gt;&quot;value (&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Field[] fields = obj.getClass().getDeclaredFields();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fields.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           filedSql.append(fields[i].getName() + &lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueSql.append(&lt;span class=&quot;string&quot;&gt;&quot;#&amp;#123;&quot;&lt;/span&gt; + objName + &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt; + fields[i].getName() + &lt;span class=&quot;string&quot;&gt;&quot;&amp;#125;,&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//remove last &#39;,&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valueSql.deleteCharAt(valueSql.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       filedSql.deleteCharAt(filedSql.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valueSql.append(&lt;span class=&quot;string&quot;&gt;&quot;) &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       filedSql.append(&lt;span class=&quot;string&quot;&gt;&quot;) &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       map.put(&lt;span class=&quot;string&quot;&gt;&quot;field&quot;&lt;/span&gt;,filedSql.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       map.put(&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;, valueSql.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;database filed sql: &quot;&lt;/span&gt; + filedSql.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;value sql:&quot;&lt;/span&gt; + valueSql.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是基于反射生成的两部分sq语句和最后拼接的语句&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;database filed sql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(id,name,brand,tags,status,phone,mobile,business_time,address,city,lng,lat,business_type,attribute_json,updated_at,created_at)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value sql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value(#&amp;#123;poiBo.id&amp;#125;,#&amp;#123;poiBo.name&amp;#125;,#&amp;#123;poiBo.brand&amp;#125;,#&amp;#123;poiBo.tags&amp;#125;,#&amp;#123;poiBo.status&amp;#125;,#&amp;#123;poiBo.phone&amp;#125;,#&amp;#123;poiBo.mobile&amp;#125;,#&amp;#123;poiBo.business_time&amp;#125;,#&amp;#123;poiBo.address&amp;#125;,#&amp;#123;poiBo.city&amp;#125;,#&amp;#123;poiBo.lng&amp;#125;,#&amp;#123;poiBo.lat&amp;#125;,#&amp;#123;poiBo.business_type&amp;#125;,#&amp;#123;poiBo.attribute_json&amp;#125;,#&amp;#123;poiBo.updated_at&amp;#125;,#&amp;#123;poiBo.created_at&amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;insert into poi_shop (id,name,brand,tags,status,phone,mobile,business_time,address,city,lng,lat,business_type,attribute_json,updated_at,created_at) value (#&amp;#123;poiBo.id&amp;#125;,#&amp;#123;poiBo.name&amp;#125;,#&amp;#123;poiBo.brand&amp;#125;,#&amp;#123;poiBo.tags&amp;#125;,#&amp;#123;poiBo.status&amp;#125;,#&amp;#123;poiBo.phone&amp;#125;,#&amp;#123;poiBo.mobile&amp;#125;,#&amp;#123;poiBo.business_time&amp;#125;,#&amp;#123;poiBo.address&amp;#125;,#&amp;#123;poiBo.city&amp;#125;,#&amp;#123;poiBo.lng&amp;#125;,#&amp;#123;poiBo.lat&amp;#125;,#&amp;#123;poiBo.business_type&amp;#125;,#&amp;#123;poiBo.attribute_json&amp;#125;,#&amp;#123;poiBo.updated_at&amp;#125;,#&amp;#123;poiBo.created_at&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要注意的是如果数据库的字段名和插入对象的属性名不一致，那么不能使用生成的database filed sql。&lt;/p&gt;
&lt;h3 id=&quot;最终版-加入注解&quot;&gt;&lt;a href=&quot;#最终版-加入注解&quot; class=&quot;headerlink&quot; title=&quot;最终版(加入注解)&quot;&gt;&lt;/a&gt;最终版(加入注解)&lt;/h3&gt;&lt;p&gt;上面的getAllPropertiesForSql方法有个缺点，如果数据库的字段名和类的属性名不一致，就不能依靠反射获得sql了。所以借鉴老大的ORM框架也写了一个注解Column，用于model类的属性上，表明属性所对应数据库字段。下面是Column注解的snippet。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.ElementType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Retention;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.RetentionPolicy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 定义字段的注解*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*该注解只能用在成员变量上*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;(ElementType.FIELD)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; Column &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 用来存放字段的名字 如果未指定列名，默认列名使用成员变量名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后在model类属性上加入对应的注解,省略getter和setter。Column的name为空时，代表属性名和字段名一致。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PoiBo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;poi_name&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;span class=&quot;comment&quot;&gt;//表示name属性对应数据库poi_name字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;poi_brand&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String brand;&lt;span class=&quot;comment&quot;&gt;//表示brand属性对应数据库poi_brand字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String tags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Integer status;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String phone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String mobile;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String business_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Float average_price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String city;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Double lng;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Double lat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String business_type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String attribute_json;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Timestamp updated_at;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Timestamp created_at;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改getAllPropertiesForSql方法，通过获取类属性上的注解获得数据库字段名。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;  Map&amp;lt;String,String&amp;gt; &lt;span class=&quot;title&quot;&gt;getAllPropertiesForSql&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object obj, String objName)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Map&amp;lt;String,String&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String,String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == obj) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuilder filedSql = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuilder valueSql = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;string&quot;&gt;&quot;value (&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Field[] fields = obj.getClass().getDeclaredFields();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Field field : fields) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 判断该成员变量上是不是存在Column类型的注解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!field.isAnnotationPresent(Column.class)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Column c = field.getAnnotation(Column.class);&lt;span class=&quot;comment&quot;&gt;// 获取实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 获取元素值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String columnName = c.name();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 如果未指定列名，默认列名使用成员变量名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(columnName.trim())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    columnName = field.getName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filedSql.append(columnName + &lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            valueSql.append(&lt;span class=&quot;string&quot;&gt;&quot;#&amp;#123;&quot;&lt;/span&gt; + objName + &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt; + field.getName() + &lt;span class=&quot;string&quot;&gt;&quot;&amp;#125;,&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//remove last &#39;,&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        valueSql.deleteCharAt(valueSql.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filedSql.deleteCharAt(filedSql.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        valueSql.append(&lt;span class=&quot;string&quot;&gt;&quot;) &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filedSql.append(&lt;span class=&quot;string&quot;&gt;&quot;) &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map.put(&lt;span class=&quot;string&quot;&gt;&quot;field&quot;&lt;/span&gt;,filedSql.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map.put(&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;, valueSql.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;database filed sql: &quot;&lt;/span&gt; + filedSql.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;value sql:&quot;&lt;/span&gt; + valueSql.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;利用反射+注解之后的输出结果，可以看到sql语句正确按照name的Column注解的输出了name属性对应的数据库字段是poi_name.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;database filed sql: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(id,poi_name,poi_brand,tags,status,phone,mobile,business_time,average_price,address,city,lng,lat,business_type,attribute_json,updated_at,created_at) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value sql:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value(#&amp;#123;poiBo.id&amp;#125;,#&amp;#123;poiBo.name&amp;#125;,#&amp;#123;poiBo.brand&amp;#125;,#&amp;#123;poiBo.tags&amp;#125;,#&amp;#123;poiBo.status&amp;#125;,#&amp;#123;poiBo.phone&amp;#125;,#&amp;#123;poiBo.mobile&amp;#125;,#&amp;#123;poiBo.business_time&amp;#125;,#&amp;#123;poiBo.average_price&amp;#125;,#&amp;#123;poiBo.address&amp;#125;,#&amp;#123;poiBo.city&amp;#125;,#&amp;#123;poiBo.lng&amp;#125;,#&amp;#123;poiBo.lat&amp;#125;,#&amp;#123;poiBo.business_type&amp;#125;,#&amp;#123;poiBo.attribute_json&amp;#125;,#&amp;#123;poiBo.updated_at&amp;#125;,#&amp;#123;poiBo.created_at&amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;insert into poi_shop &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(id,poi_name,poi_brand,tags,status,phone,mobile,business_time,average_price,address,city,lng,lat,business_type,attribute_json,updated_at,created_at) value (#&amp;#123;poiBo.id&amp;#125;,#&amp;#123;poiBo.name&amp;#125;,#&amp;#123;poiBo.brand&amp;#125;,#&amp;#123;poiBo.tags&amp;#125;,#&amp;#123;poiBo.status&amp;#125;,#&amp;#123;poiBo.phone&amp;#125;,#&amp;#123;poiBo.mobile&amp;#125;,#&amp;#123;poiBo.business_time&amp;#125;,#&amp;#123;poiBo.average_price&amp;#125;,#&amp;#123;poiBo.address&amp;#125;,#&amp;#123;poiBo.city&amp;#125;,#&amp;#123;poiBo.lng&amp;#125;,#&amp;#123;poiBo.lat&amp;#125;,#&amp;#123;poiBo.business_type&amp;#125;,#&amp;#123;poiBo.attribute_json&amp;#125;,#&amp;#123;poiBo.updated_at&amp;#125;,#&amp;#123;poiBo.created_at&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写的好累放张萌图吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cat.jpg&quot; alt=&quot;cat&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在开发时遇到一个问题，在使用基于注解的mybatis插入一个对象到mysql时，在写sql语句时需要列出对象的所有属性，所以在插入一个拥有10个以上属性的对象时sql语句就会变得很长，写起来也很不方便,也很容易拼错。google了一下也没有找到什么解决方式(可能是姿势不对😜)，在stackoverflow上提的&lt;a href=&quot;http://stackoverflow.com/questions/33383134/how-to-insert-an-objectmore-than-10-properties-into-mysql-via-mybatis-based-on&quot;&gt;问题&lt;/a&gt;截止目前还没有人回答。所以自己想了一个基于反射和注解的解决办法&lt;br&gt;git地址：&lt;a href=&quot;https://github.com/giraffe0813/spring-mybatis-utils&quot;&gt;https://github.com/giraffe0813/spring-mybatis-utils&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="mybatis" scheme="http://yemengying.com/tags/mybatis/"/>
    
      <category term="reflection" scheme="http://yemengying.com/tags/reflection/"/>
    
      <category term="anntation" scheme="http://yemengying.com/tags/anntation/"/>
    
  </entry>
  
  <entry>
    <title>【译】如何重置一个ArrayList--clear vs removeAll</title>
    <link href="http://yemengying.com/2015/10/26/%E8%AF%91-%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE%E4%B8%80%E4%B8%AAArrayList-clear-vs-removeAll/"/>
    <id>http://yemengying.com/2015/10/26/译-如何重置一个ArrayList-clear-vs-removeAll/</id>
    <published>2015-10-26T15:20:04.000Z</published>
    <updated>2016-02-03T09:59:33.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;安利一个APP–开发者头条，在上面发现一个不错的英文技术类博客，地址&lt;a href=&quot;http://javarevisited.blogspot.com/，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javarevisited.blogspot.com/，&lt;/a&gt;  会不定期的翻译一些 翻译不好见谅啊😼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://javarevisited.blogspot.co.uk/2015/09/how-to-reset-arraylist-in-java-clear-vs-removeAll-example.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javarevisited.blogspot.co.uk/2015/09/how-to-reset-arraylist-in-java-clear-vs-removeAll-example.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很多时候为了重用我们会想要重置一个ArrayList，这里的重置是指清空列表或移除列表所有的元素。在Java中，有两个方法可以帮助我们实现重置&lt;code&gt;clear&lt;/code&gt;或&lt;code&gt;removeAll&lt;/code&gt;。在列表长度很小的情况下(eg:10或100个元素)，可以放心的使用这两种方法。但如果列表很大(eg:10M个元素)，那么选择clear还是removeAll会对你java应用的性能造成巨大的影响。甚至有时，在列表过大的情况下，重置会耗费许多时间，那么重新创建一个新的列表比将老的列表重置要好。但需要提醒的是，必须要确保老的列表可以被垃圾回收，否则，有很大的风险会出现&lt;code&gt;java.lang.OutOfMemoryError: Java Heap Space&lt;/code&gt;。言归正传，让我们看看clear()和removeAll()两个方法。大家应该常常会选择用clear(),因为他的复杂度是O(n),而相比之下，removeAll(Collection C)的性能要差一些，它的复杂度是O(n^2)。这也是为什么在重置大的列表的时候两个方法会有巨大的差异。如果阅读他们的源码并运行下面的例子程序，差异会更明显。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Clear-vs-RemoveAll-Collection-c&quot;&gt;&lt;a href=&quot;#Clear-vs-RemoveAll-Collection-c&quot; class=&quot;headerlink&quot; title=&quot;Clear() vs RemoveAll(Collection c)&quot;&gt;&lt;/a&gt;Clear() vs RemoveAll(Collection c)&lt;/h3&gt;&lt;p&gt;为了更好的比较这两个方法，阅读他们源码是很重要的。可以在&lt;code&gt;java.utils.ArrayList&lt;/code&gt;类中找到clear()方法，不过为了方便我将它引入到了这里。下面的代码来自JDK 1.7.0_40版本。如果你想要学习更多的有关性能监控和调优的知识，我强烈建议阅读&lt;code&gt;Scott Oaks&lt;/code&gt;写的&lt;code&gt;Java Performance the Definitive Guide&lt;/code&gt;,它包含了java 7和一点java 8。下面是clear()的代码片段:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Removes all of the elements from this list.The list will &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * be empty after this call returns. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	modCount++; &lt;span class=&quot;comment&quot;&gt;// clear to let GC do its work &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		elementData[i] = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	size = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大家可以看出，clear()在循环遍历ArrayList，并且将每一个元素都置为null，使它们在没有被外部引用的情况下可以被垃圾回收。相似的，我们可以在&lt;code&gt;java.util.AbstractCollection&lt;/code&gt;类中查看removeAll(Collention c)的代码，下面是代码片段:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Collection&amp;lt;?&amp;gt; c)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//判断对象是否为null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Objects.requireNonNull(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; modified = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Iterator&amp;lt;?&amp;gt; it = iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (it.hasNext()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c.contains(it.next())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              it.remove();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              modified = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; modified;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法会检查迭代器顺序返回的每个元素是否包含在特定的集合中。如果存在，调用迭代器的remove方法将它从集合中移除。因为会用到contains方法，removeAll的复杂度是O(n^2)。所以在想要重置一个大的ArrayList时，这种方法是绝对不可取的。下面我们比较一下两者在重置一个包含100K个元素时的性能差异。&lt;/p&gt;
&lt;h3 id=&quot;删除一个包含100k个元素的列表中的所有元素&quot;&gt;&lt;a href=&quot;#删除一个包含100k个元素的列表中的所有元素&quot; class=&quot;headerlink&quot; title=&quot;删除一个包含100k个元素的列表中的所有元素&quot;&gt;&lt;/a&gt;删除一个包含100k个元素的列表中的所有元素&lt;/h3&gt;&lt;p&gt;我本来想在例子中尝试重置一个包含10M个元素的列表，不过在超过半个小时等待removeAll()结束后，我决定将元素的数量降为100K。在这种情况下，两个方法的差距也是很明显的。removeAll()比clear()多花费了10000倍的时间。事实上，在API中clear()和removeAll(Collection c)这两个方法的目的是不同的。clear()方法是为了通过删除所有元素而重置列表，而removeAll(Collection c)是为了从集合中删除某些存在于另一个提供的集合中的元素，并不是为了从集合中移除所有元素。所以如果你的目的是删除所有元素，用clear(),如果你的目的是删除某些存在于另一集合的元素，那么选择removeAll(Collection c)方法。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Java Program to remove all elements from list in Java and comparing &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * performance of clearn() and removeAll() method. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Javin Paul &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ArrayListResetTest&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SIZE = &lt;span class=&quot;number&quot;&gt;100_000&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;// Two ArrayList for clear and removeAll &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	ArrayList numbers = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList(SIZE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	ArrayList integers = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList(SIZE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;// Initialize ArrayList with 10M integers &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;amp;lt; SIZE; i++) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		numbers.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Integer(i)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		integers.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Integer(i)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;// Empty ArrayList using clear method &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; startTime = System.nanoTime(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	numbers.clear(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; elapsed = System.nanoTime() - startTime; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Time taken by clear to empty ArrayList of 1M elements (ns): &quot;&lt;/span&gt; + elapsed); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;// Reset ArrayList using removeAll method &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	startTime = System.nanoTime(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	integers.removeAll(integers); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; time = System.nanoTime() - startTime; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Time taken by removeAll to reset ArrayList of 1M elements (ns): &quot;&lt;/span&gt; + time); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	Output: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	Time taken by clear to empty ArrayList of &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt; elements (ns): &lt;span class=&quot;number&quot;&gt;889619&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	Time taken by removeAll to reset ArrayList of &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt; elements (ns): &lt;span class=&quot;number&quot;&gt;36633112126&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于程序使用了两个arrayList存储Integers，所以在运行时要确保有足够的内存，尤其是你想比较在列表存有1M个元素时，两种方法的性能差异。另外，由于使用了在数字中加入下划线的特性，所以需要java7来运行。如果没有JDK7，也可以移除SIZE常量中的下划线。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以上就是关于如何重置一个ArrayList的内容。我们不仅仅学到了两种从列表中删除元素的方法，也学到了clear()和removeAll()方法的区别。我们明白了为什么在列表过大时，removeAll()性能很差。&lt;br&gt; PS：当使用clear()方法也消耗很长的时间时，考虑创建一个新的列表，因为java可以很快的创建一个新的对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;扩展阅读：&quot;&gt;&lt;a href=&quot;#扩展阅读：&quot; class=&quot;headerlink&quot; title=&quot;扩展阅读：&quot;&gt;&lt;/a&gt;扩展阅读：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2014/07/java-optimization-empty-arraylist-and-Hashmap-cost-less-memory-jdk-17040-update.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ArrayList and HashMap Performance Improvement in JDK 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2012/01/convert-arraylist-to-set-java-example.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to convert ArrayList to Set?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2012/01/how-to-sort-arraylist-in-java-example.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to sort an ArrayList in reverse order in Java?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2012/12/how-to-remove-duplicates-elements-from-ArrayList-Java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to remove duplicate elements from ArrayList in Java?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2014/03/how-to-clone-collection-in-java-deep-copy-vs-shallow.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to clone an ArrayList in Java?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2011/12/how-to-convert-map-to-list-in-java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How do you convert a Map to List in Java?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2014/03/binary-search-vs-contains-performance.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Performance comparison of contains() vs binarySearch()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2012/12/how-to-initialize-list-with-array-in-java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to initialize an ArrayList with values in Java?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2015/07/java-arraylist-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The ArrayList Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2011/09/difference-vector-vs-arraylist-in-java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The difference between an ArrayList and a Vector in Java?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javarevisited.blogspot.sg/2012/07/create-read-only-list-map-set-example-java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to make an ArrayList unmodifiable in Java?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;安利一个APP–开发者头条，在上面发现一个不错的英文技术类博客，地址&lt;a href=&quot;http://javarevisited.blogspot.com/，&quot;&gt;http://javarevisited.blogspot.com/，&lt;/a&gt;  会不定期的翻译一些 翻译不好见谅啊😼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://javarevisited.blogspot.co.uk/2015/09/how-to-reset-arraylist-in-java-clear-vs-removeAll-example.html&quot;&gt;http://javarevisited.blogspot.co.uk/2015/09/how-to-reset-arraylist-in-java-clear-vs-removeAll-example.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很多时候为了重用我们会想要重置一个ArrayList，这里的重置是指清空列表或移除列表所有的元素。在Java中，有两个方法可以帮助我们实现重置&lt;code&gt;clear&lt;/code&gt;或&lt;code&gt;removeAll&lt;/code&gt;。在列表长度很小的情况下(eg:10或100个元素)，可以放心的使用这两种方法。但如果列表很大(eg:10M个元素)，那么选择clear还是removeAll会对你java应用的性能造成巨大的影响。甚至有时，在列表过大的情况下，重置会耗费许多时间，那么重新创建一个新的列表比将老的列表重置要好。但需要提醒的是，必须要确保老的列表可以被垃圾回收，否则，有很大的风险会出现&lt;code&gt;java.lang.OutOfMemoryError: Java Heap Space&lt;/code&gt;。言归正传，让我们看看clear()和removeAll()两个方法。大家应该常常会选择用clear(),因为他的复杂度是O(n),而相比之下，removeAll(Collection C)的性能要差一些，它的复杂度是O(n^2)。这也是为什么在重置大的列表的时候两个方法会有巨大的差异。如果阅读他们的源码并运行下面的例子程序，差异会更明显。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
      <category term="list" scheme="http://yemengying.com/categories/java/list/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Mac系统下Idea和STS的快捷键对比</title>
    <link href="http://yemengying.com/2015/10/23/Idea%E5%92%8CSTS%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AF%B9%E6%AF%94/"/>
    <id>http://yemengying.com/2015/10/23/Idea和STS的快捷键对比/</id>
    <published>2015-10-23T08:15:42.000Z</published>
    <updated>2016-02-02T06:34:22.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;又被朋友安利了一遍Idea 所以决定尝试着把IDE由STS切换成Idea。不过发现好多快捷键都不一致，所以在熟悉Idea的过程中顺便记录一下两者的常用快捷键对比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;STS(Spring Tool Suite)&lt;/th&gt;
&lt;th&gt;Idea&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Run&lt;/td&gt;
&lt;td&gt;shift+command+F11&lt;/td&gt;
&lt;td&gt;shift + control + r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debug&lt;/td&gt;
&lt;td&gt;command + F11&lt;/td&gt;
&lt;td&gt;shift + control + d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;复制当前行&lt;/td&gt;
&lt;td&gt;alt + command + 向下方向键&lt;/td&gt;
&lt;td&gt;command + d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;剪贴当前行&lt;/td&gt;
&lt;td&gt;command + x&lt;/td&gt;
&lt;td&gt;command + x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除当前行&lt;/td&gt;
&lt;td&gt;command + d&lt;/td&gt;
&lt;td&gt;command + x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;搜索&lt;/td&gt;
&lt;td&gt;command + f&lt;/td&gt;
&lt;td&gt;command + f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;搜索替换&lt;/td&gt;
&lt;td&gt;command + f&lt;/td&gt;
&lt;td&gt;command + r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Preferences&lt;/td&gt;
&lt;td&gt;command + ,&lt;/td&gt;
&lt;td&gt;command + ,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;光标移到代码块最后&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;option+command+]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;光标移到代码块最前&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;option+command+[&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rename&lt;/td&gt;
&lt;td&gt;alt+command+r&lt;/td&gt;
&lt;td&gt;shift+F6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;所选语句上移&lt;/td&gt;
&lt;td&gt;option+向上方向键&lt;/td&gt;
&lt;td&gt;shift+command+向上方向键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;所选语句下移&lt;/td&gt;
&lt;td&gt;option+向下方向键&lt;/td&gt;
&lt;td&gt;shift+command+向下方向键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;选择实现父类的方法&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;control+o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;generate(setter/constructor/toString)&lt;/td&gt;
&lt;td&gt;option+command+s&lt;/td&gt;
&lt;td&gt;command+n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step over&lt;/td&gt;
&lt;td&gt;F6&lt;/td&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step into&lt;/td&gt;
&lt;td&gt;F5&lt;/td&gt;
&lt;td&gt;F7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step out&lt;/td&gt;
&lt;td&gt;F7&lt;/td&gt;
&lt;td&gt;shift+F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop&lt;/td&gt;
&lt;td&gt;option+command+s&lt;/td&gt;
&lt;td&gt;command+F2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;又被朋友安利了一遍Idea 所以决定尝试着把IDE由STS切换成Idea。不过发现好多快捷键都不一致，所以在熟悉Idea的过程中顺便记录一下两者的常用快捷键对比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="STS" scheme="http://yemengying.com/tags/STS/"/>
    
      <category term="Idea" scheme="http://yemengying.com/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>使代码更简洁(三)---利用Builder Pattern为对象属性赋值</title>
    <link href="http://yemengying.com/2015/09/26/%E4%BD%BF%E4%BB%A3%E7%A0%81%E6%9B%B4%E7%AE%80%E6%B4%81-%E4%B8%89-%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E9%93%BE%E4%B8%BA%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/"/>
    <id>http://yemengying.com/2015/09/26/使代码更简洁-三-利用方法链为对象属性赋值/</id>
    <published>2015-09-26T07:18:12.000Z</published>
    <updated>2016-02-03T07:38:09.000Z</updated>
    
    <content type="html">&lt;p&gt;以前写在segmentFault上的一篇文章，搬移到这里&lt;/p&gt;
&lt;p&gt;有一个有很多属性的类，在为它的属性赋值时，通常有两种方式，使用构造函数和使用set方法。可是使用构造函数有时会忘了各个字段的顺序 ，直接使用set方法，又比较麻烦。所以同事提出可以使用方法链。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cityId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; buId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; roleId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String pinyinName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getPinyinName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pinyinName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPinyinName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String pinyinName)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pinyinName = pinyinName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setSex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sex)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sex = sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCityId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cityId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setCityId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cityId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cityId = cityId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBuId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; buId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBuId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; buId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.buId = buId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getRoleId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; roleId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setRoleId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; roleId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.roleId = roleId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id, String name, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sex, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cityId, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; buId,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; roleId, String pinyinName)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sex = sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cityId = cityId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.buId = buId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.roleId = roleId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pinyinName = pinyinName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类似于StringBuilder的append方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder().append(&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;).append(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .append(&lt;span class=&quot;string&quot;&gt;&quot; 2 &quot;&lt;/span&gt;).append(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).toString();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让bean的每个属性的set方法都返回一个对象本身的引用，将User类的set方法改写成下面的样子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;setSex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sex)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sex = sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;setCityId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cityId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cityId = cityId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;setBuId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; buId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.buId = buId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;setRoleId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; roleId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.roleId = roleId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;setPinyinName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String pinyinName)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pinyinName = pinyinName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样在对User的属性赋值时就简洁了许多。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;User user = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User().setId(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).setAge(&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						.setBuId(&lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						.setRoleId(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						.setName(&lt;span class=&quot;string&quot;&gt;&quot;giraffe&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						.setCityId(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						.setSex(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						.setPinyinName(&lt;span class=&quot;string&quot;&gt;&quot;gif&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大部分IDE默认生成无返回值的setter，不过Idea也支持生成返回this对象的方式。在生成setter时把template由default改为builder。如下图:&lt;br&gt;&lt;img src=&quot;/images/setter1.jpg&quot; alt=&quot;default setter&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/setter2.jpg&quot; alt=&quot;builder setter&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过不知道这样写会不会有什么不好的地方~~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;以前写在segmentFault上的一篇文章，搬移到这里&lt;/p&gt;
&lt;p&gt;有一个有很多属性的类，在为它的属性赋值时，通常有两种方式，使用构造函数和使用set方法。可是使用构造函数有时会忘了各个字段的顺序 ，直接使用set方法，又比较麻烦。所以同事提出可以使用方法链。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
  </entry>
  
</feed>
