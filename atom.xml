<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giraffe&#39;s Home</title>
  <subtitle>A Stupid Giraffe</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yemengying.com/"/>
  <updated>2017-03-18T03:24:37.000Z</updated>
  <id>http://yemengying.com/</id>
  
  <author>
    <name>Mengying Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译】Executor, ExecutorService 和 Executors 间的不同</title>
    <link href="http://yemengying.com/2017/03/17/difference-between-executor-executorService/"/>
    <id>http://yemengying.com/2017/03/17/difference-between-executor-executorService/</id>
    <published>2017-03-17T06:07:21.000Z</published>
    <updated>2017-03-18T03:24:37.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;搁了好久没更博客，再不写要被某人 BS 了，咦。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://javarevisited.blogspot.jp/2017/02/difference-between-executor-executorservice-and-executors-in-java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;p&gt;&lt;code&gt;java.util.concurrent.Executor&lt;/code&gt;, &lt;code&gt;java.util.concurrent.ExecutorService&lt;/code&gt;, &lt;code&gt;java.util.concurrent. Executors&lt;/code&gt; 这三者均是 Java Executor 框架的一部分，用来提供线程池的功能。因为创建和管理线程非常心累，并且操作系统通常对线程数有限制，所以建议使用线程池来并发执行任务，而不是每次请求进来时创建一个线程。使用线程池不仅可以提高应用的响应时间，还可以避免&lt;code&gt;&amp;quot;java.lang.OutOfMemoryError: unable to create new native thread&amp;quot;&lt;/code&gt; 之类的错误。&lt;/p&gt;
&lt;p&gt;在 Java 1.5 时，开发者需要关心线程池的创建和管理，但在 Java 1.5 之后 Executor 框架提供了多种内置的线程池,例如：FixedThreadPool(包含固定数目的线程)，CachedThreadPool(可根据需要创建新的线程)等等。&lt;/p&gt;
&lt;h2 id=&quot;Executor&quot;&gt;&lt;a href=&quot;#Executor&quot; class=&quot;headerlink&quot; title=&quot;Executor&quot;&gt;&lt;/a&gt;Executor&lt;/h2&gt;&lt;p&gt;Executor, ExecutorService, 和 Executors 最主要的区别是 Executor 是一个抽象层面的核心接口(大致代码如下)。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Executor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable command)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不同于 &lt;code&gt;java.lang.Thread&lt;/code&gt; 类将任务和执行耦合在一起， Executor 将任务本身和执行任务分离，可以阅读 &lt;a href=&quot;http://javarevisited.blogspot.sg/2016/12/difference-between-thread-and-executor.html来看看&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;difference between Thread and Executor&lt;/a&gt; 来了解 Thread 和 Executor 间更多的不同。&lt;/p&gt;
&lt;h2 id=&quot;ExecutorService&quot;&gt;&lt;a href=&quot;#ExecutorService&quot; class=&quot;headerlink&quot; title=&quot;ExecutorService&quot;&gt;&lt;/a&gt;ExecutorService&lt;/h2&gt;&lt;p&gt;ExecutorService 接口 对 Executor 接口进行了扩展，提供了返回 Future 对象，终止，关闭线程池等方法。当调用 &lt;code&gt;shutDown&lt;/code&gt; 方法时，线程池会停止接受新的任务，但会完成正在 pending 中的任务。&lt;/p&gt;
&lt;p&gt;Future 对象提供了异步执行，这意味着无需等待任务执行的完成，只要提交需要执行的任务，然后在需要时检查 Future 是否已经有了结果，如果任务已经执行完成，就可以通过 Future.get() 方法获得执行结果。需要注意的是，Future.get() 方法是一个阻塞式的方法，如果调用时任务还没有完成，会等待直到任务执行结束。&lt;/p&gt;
&lt;p&gt;通过 ExecutorService.submit() 方法返回的 Future 对象，还可以取消任务的执行。Future 提供了 cancel() 方法用来取消执行 pending 中的任务。&lt;/p&gt;
&lt;p&gt;ExecutorService 部分代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Executor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;Future&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Callable&amp;lt;T&amp;gt; task)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;Future&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable task, T result)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;T&amp;gt; List&amp;lt;Future&amp;lt;T&amp;gt;&amp;gt; invokeAll(Collection&amp;lt;? extends Callable&amp;lt;T&amp;gt;&amp;gt; tasks, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; timeout, TimeUnit unit) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; InterruptedException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Executors&quot;&gt;&lt;a href=&quot;#Executors&quot; class=&quot;headerlink&quot; title=&quot;Executors&quot;&gt;&lt;/a&gt;Executors&lt;/h2&gt;&lt;p&gt;Executors 是一个工具类，类似于 Collections。提供工厂方法来创建不同类型的线程池，比如 FixedThreadPool 或 CachedThreadPool。&lt;/p&gt;
&lt;p&gt;Executors 部分代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Executors&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ExecutorService &lt;span class=&quot;title&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nThreads)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(nThreads, nThreads, &lt;span class=&quot;number&quot;&gt;0L&lt;/span&gt;, TimeUnit.MILLISECONDS,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ExecutorService &lt;span class=&quot;title&quot;&gt;newCachedThreadPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, Integer.MAX_VALUE, &lt;span class=&quot;number&quot;&gt;60L&lt;/span&gt;, TimeUnit.SECONDS, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SynchronousQueue&amp;lt;Runnable&amp;gt;());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面详细看一下三者的区别：&lt;/p&gt;
&lt;h2 id=&quot;Executor-vs-ExecutorService-vs-Executors&quot;&gt;&lt;a href=&quot;#Executor-vs-ExecutorService-vs-Executors&quot; class=&quot;headerlink&quot; title=&quot;Executor vs ExecutorService vs Executors&quot;&gt;&lt;/a&gt;Executor vs ExecutorService vs Executors&lt;/h2&gt;&lt;p&gt;正如上面所说，这三者均是 Executor 框架中的一部分。Java 开发者很有必要学习和理解他们，以便更高效的使用 Java 提供的不同类型的线程池。总结一下这三者间的区别，以便大家更好的理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executor 和 ExecutorService 这两个接口主要的区别是：ExecutorService 接口继承了 Executor 接口，是 Executor 的子接口&lt;/li&gt;
&lt;li&gt;Executor 和 ExecutorService 第二个区别是：Executor 接口定义了 &lt;code&gt;execute()&lt;/code&gt;方法用来接收一个&lt;code&gt;Runnable&lt;/code&gt;接口的对象，而 ExecutorService 接口中的 &lt;code&gt;submit()&lt;/code&gt;方法可以接受&lt;code&gt;Runnable&lt;/code&gt;和&lt;code&gt;Callable&lt;/code&gt;接口的对象。&lt;/li&gt;
&lt;li&gt;Executor 和 ExecutorService 接口第三个区别是 Executor 中的 &lt;code&gt;execute()&lt;/code&gt; 方法不返回任何结果，而 ExecutorService 中的 &lt;code&gt;submit()&lt;/code&gt;方法可以通过一个 Future 对象返回运算结果。&lt;/li&gt;
&lt;li&gt;Executor 和 ExecutorService 接口第四个区别是除了允许客户端提交一个任务，ExecutorService 还提供用来控制线程池的方法。比如：调用 &lt;code&gt;shutDown()&lt;/code&gt; 方法终止线程池。可以通过 &lt;a href=&quot;http://www.amazon.com/dp/0321349601/?tag=javamysqlanta-20&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Java Concurrency in Practice》&lt;/a&gt; 一书了解更多关于关闭线程池和如何处理 pending 的任务的知识。&lt;/li&gt;
&lt;li&gt;Executors 类提供工厂方法用来创建不同类型的线程池。比如: &lt;code&gt;newSingleThreadExecutor()&lt;/code&gt; 创建一个只有一个线程的线程池，&lt;code&gt;newFixedThreadPool(int numOfThreads)&lt;/code&gt;来创建固定线程数的线程池，&lt;code&gt;newCachedThreadPool()&lt;/code&gt;可以根据需要创建新的线程，但如果已有线程是空闲的会重用已有线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;下表列出了 Executor 和 ExecutorService 的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Executor&lt;/th&gt;
&lt;th&gt;ExecutorService&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Executor 是 Java 线程池的核心接口，用来并发执行提交的任务&lt;/td&gt;
&lt;td&gt;ExecutorService 是 Executor 接口的扩展，提供了异步执行和关闭线程池的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;提供execute()方法用来提交任务&lt;/td&gt;
&lt;td&gt;提供submit()方法用来提交任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execute()方法无返回值&lt;/td&gt;
&lt;td&gt;submit()方法返回Future对象，可用来获取任务执行结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不能取消任务&lt;/td&gt;
&lt;td&gt;可以通过Future.cancel()取消pending中的任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;没有提供和关闭线程池有关的方法&lt;/td&gt;
&lt;td&gt;提供了关闭线程池的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;译者注&quot;&gt;&lt;a href=&quot;#译者注&quot; class=&quot;headerlink&quot; title=&quot;译者注&quot;&gt;&lt;/a&gt;译者注&lt;/h2&gt;&lt;p&gt;个人觉得，利用 Executors 类提供的工厂方法来创建一个线程池是很方便，但对于需要根据实际情况自定义线程池某些参数的场景，就不太适用了。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;br&gt;当线程池中的线程均处于工作状态，并且线程数已达线程池允许的最大线程数时，就会采取指定的饱和策略来处理新提交的任务。总共有四种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbortPolicy: 直接抛异常&lt;/li&gt;
&lt;li&gt;CallerRunsPolicy: 用调用者的线程来运行任务&lt;/li&gt;
&lt;li&gt;DiscardOldestPolicy: 丢弃线程队列里最近的一个任务，执行新提交的任务&lt;/li&gt;
&lt;li&gt;DiscardPolicy 直接将新任务丢弃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果使用 Executors 的工厂方法创建的线程池，那么饱和策略都是采用默认的 AbortPolicy，所以如果我们想当线程池已满的情况，使用调用者的线程来运行任务，就要自己创建线程池，指定想要的饱和策略，而不是使用 Executors 了。&lt;/p&gt;
&lt;p&gt;所以我们可以根据需要创建 ThreadPoolExecutor(ExecutorService接口的实现类) 对象，自定义一些参数，而不是调用 Executors 的工厂方法创建。&lt;/p&gt;
&lt;p&gt;当然，在使用 Spring 框架的项目中，也可以使用 Spring 提供的 ThreadPoolTaskExecutor 类来创建线程池。ThreadPoolTaskExecutor 与 ThreadPoolExecutor 类似，也提供了许多参数用来自定义线程池，比如：核心线程池大小，线程池最大数量，饱和策略，线程活动保持时间等等。&lt;/p&gt;
&lt;h2 id=&quot;相关文档&quot;&gt;&lt;a href=&quot;#相关文档&quot; class=&quot;headerlink&quot; title=&quot;相关文档&quot;&gt;&lt;/a&gt;相关文档&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Executors java api doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;搁了好久没更博客，再不写要被某人 BS 了，咦。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://javarevisited.blogspot.jp/2017/02/difference-between-executor-executorservice-and-executors-in-java.html&quot;&gt;原文链接&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>谈谈 NoSuchBeanDefinitionException</title>
    <link href="http://yemengying.com/2017/02/18/something-about-noSuchBeanDefinitionException/"/>
    <id>http://yemengying.com/2017/02/18/something-about-noSuchBeanDefinitionException/</id>
    <published>2017-02-18T07:55:50.000Z</published>
    <updated>2017-02-18T14:59:33.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这篇博客是来自对两篇文章的翻译，原文链接如下。这两篇文章都总结了在使用 Spring 框架时可能造成 &lt;code&gt;NoSuchBeanDefinitionException&lt;/code&gt; 的情况，以及应该如何解决。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  
&lt;h2 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;原文链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/39173982/what-is-a-nosuchbeandefinitionexception-and-how-do-i-fix-it&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java - What is a NoSuchBeanDefinitionException and how do I fix it? - Stack Overflow&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.baeldung.com/spring-nosuchbeandefinitionexception&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring NoSuchBeanDefinitionException | Baeldung&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;org.springframework.beans.factory.NoSuchBeanDefinitionException&lt;/code&gt; 是很常见的异常，可以说绝大多数使用过 Spring 的人都曾遇到过它。本文旨在总结下NoSuchBeanDefinitionException（以下简称 NSBDE）的含义，哪些情况下可能抛出 NSBDE，和如何解决（文中配置均用 JavaConfig）。&lt;/p&gt;
&lt;h2 id=&quot;什么是-NoSuchBeanDefinitionException&quot;&gt;&lt;a href=&quot;#什么是-NoSuchBeanDefinitionException&quot; class=&quot;headerlink&quot; title=&quot;什么是 NoSuchBeanDefinitionException&quot;&gt;&lt;/a&gt;什么是 NoSuchBeanDefinitionException&lt;/h2&gt;&lt;p&gt;从字面其实就很好理解，NoSuchBeanDefinitionException 就是没有找到指定 Bean 的 Definition。NoSuchBeanDefinitionException 的 JavaDoc是这样定义的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception thrown when a BeanFactory is asked for a bean instance for which it cannot find a definition. This may point to a non-existing bean, a non-unique bean, or a manually registered singleton instance without an associated bean definition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面看看可能抛出 NSBDE 的一些情况。&lt;/p&gt;
&lt;h2 id=&quot;情况1-No-qualifying-bean-of-type-…-found-for-dependency&quot;&gt;&lt;a href=&quot;#情况1-No-qualifying-bean-of-type-…-found-for-dependency&quot; class=&quot;headerlink&quot; title=&quot;情况1: No qualifying bean of type […] found for dependency&quot;&gt;&lt;/a&gt;情况1: No qualifying bean of type […] found for dependency&lt;/h2&gt;&lt;p&gt;最常见的抛出 NSBDE 的情况就是在一个 BeanA 中注入 BeanB 时找不到  BeanB 的定义。例子如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanA&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; BeanB dependency;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当在 BeanA 中注入 BeanB 时，如果在 Spring 上下文中找不到 BeanB 的定义，就会抛出 NSBDE。异常信息如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;org.springframework.beans.factory.NoSuchBeanDefinitionException: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;No qualifying bean of type [org.baeldung.packageB.BeanB]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  found for dependency: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;expected at least 1 bean which qualifies as&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  autowire candidate for this dependency. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Dependency annotations: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;@org.springframework.beans.factory.annotation.Autowired(required=true)&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;抛异常的原因在异常信息中说的很清楚：&lt;code&gt;expected at least 1 bean which qualifies as autowire candidate for this dependency&lt;/code&gt;。所以要么是 BeanB 不存在在 Spring 上下文中（比如没有标注 @ Component，@Repository，@Service, @Controller等注解） ，要么就是 BeanB 所在的包没有被 Spring 扫描到。&lt;/p&gt;
&lt;p&gt;解决办法就是先确认 BeanB 有没有被某些注解声明为 Bean：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; org.baeldung.packageB;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanB&lt;/span&gt; &lt;/span&gt;&amp;#123; ...&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果 BeanB 已经被声明为一个 Bean，就再确认 BeanB 所在的包有没有被扫描。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ComponentScan&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;org.baeldung.packageB&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContextWithJavaConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;情况2-No-qualifying-bean-of-type-…-is-defined&quot;&gt;&lt;a href=&quot;#情况2-No-qualifying-bean-of-type-…-is-defined&quot; class=&quot;headerlink&quot; title=&quot;情况2: No qualifying bean of type […] is defined&quot;&gt;&lt;/a&gt;情况2: No qualifying bean of type […] is defined&lt;/h2&gt;&lt;p&gt;还有一种可能抛出 NSBDE 的情况是在上下文中存在着两个 Bean，比如有一个接口 IBeanB，它有两个实现类 BeanB1 和 BeanB2。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanB1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IBeanB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanB2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IBeanB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在，如果 BeanA 按照下面的方式注入，那么 Spring 将不知道要注入两个实现中的哪一个，就会抛出 NSBDE。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanA&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IBeanB dependency;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;异常信息如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;No qualifying bean of type&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [org.baeldung.packageB.IBeanB] is defined: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;expected single matching bean but found 2: beanB1,beanB2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;仔细看异常信息会发现，并不是直接抛出 NSBDE，而是它的子类 &lt;code&gt;NoUniqueBeanDefinitionException&lt;/code&gt;，这是 Spring 3.2.1 之后引入的新异常，目的就是为了和第一种找不到 Bean Definition 的情况作区分。&lt;/p&gt;
&lt;p&gt;解决办法1就是利用 &lt;code&gt;@Qualifier&lt;/code&gt; 注解，明确指定要注入的 Bean 的名字(BeanB2 默认的名字就是 beanB2)。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanA&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Qualifier&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;beanB2&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IBeanB dependency;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除了指定名字，我们还可以将其中一个 Bean 加上 &lt;code&gt;@Primary&lt;/code&gt;的注解,这样会选择加了 Primary 注解的 Bean 来注入，而不会抛异常：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Primary&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanB1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IBeanB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样 Spring 就能够知道到底应该注入哪个 Bean 了。&lt;/p&gt;
&lt;h2 id=&quot;情况3-No-Bean-Named-…-is-defined&quot;&gt;&lt;a href=&quot;#情况3-No-Bean-Named-…-is-defined&quot; class=&quot;headerlink&quot; title=&quot;情况3: No Bean Named […] is defined&quot;&gt;&lt;/a&gt;情况3: No Bean Named […] is defined&lt;/h2&gt;&lt;p&gt;NSBDE 还可能在从 Spring 上下文中通过名字获取一个 Bean 时抛出。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InitializingBean&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ApplicationContext context;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        context.getBean(&lt;span class=&quot;string&quot;&gt;&quot;someBeanName&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这种情况中，如果找不到指定名字 Bean 的 Definition，就会抛出如下异常：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;No bean named &amp;apos;someBeanName&amp;apos; is defined&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;情况4-代理-Beans&quot;&gt;&lt;a href=&quot;#情况4-代理-Beans&quot; class=&quot;headerlink&quot; title=&quot;情况4: 代理 Beans&quot;&gt;&lt;/a&gt;情况4: 代理 Beans&lt;/h2&gt;&lt;p&gt;Spring 通过 &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-introduction-proxies&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AOP 代理&lt;/a&gt; 实现了许多高级功能，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Transactional&lt;/a&gt;完成 &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/transaction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;事务管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Cacheable&lt;/a&gt;实现缓存&lt;/li&gt;
&lt;li&gt;通过 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Async&lt;/a&gt;和 &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Scheduled&lt;/a&gt;实现任务调度和异步执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring 有两种方式实现代理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JDK 动态代理机制&lt;/a&gt; ，在运行时为&lt;code&gt;实现了某些接口&lt;/code&gt;的类动态创建一个实现了同样接口的代理对象。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://github.com/cglib/cglib/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CGLIB&lt;/a&gt;，CGLIB 可以在运行期扩展Java类与实现Java接口,也就是说当一个类没有实现接口时，必须用 CGLIB 生成代理对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，当 Spring 上下文中的一个实现了某个接口的 Bean 通过JDK 动态代理机制被代理时，代理类并不是继承了目标类，而是实现同样的接口。&lt;/p&gt;
&lt;p&gt;也正因为如此，如果一个 Bean 通过接口注入时，可以成功被注入。但如果是通过真正的类注入，那么 Spring 将无法找到匹配这个类的 Definition——因为代理类并没有继承这个类。&lt;/p&gt;
&lt;p&gt;以 Spring 中比较常见的事务管理为例，假设 ServiceA 中要注入 ServiceB，两个 Service 均标注了 &lt;code&gt;@Transactional&lt;/code&gt;注解来进行事务管理，那么下面的注入方式是不会正常 work 的。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IServiceA&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ServiceB serviceB;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IServiceB&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解决办法就是通过接口来进行注入：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IServiceA&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IServiceB serviceB;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IServiceB&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;今天天气好好啊~&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2017-02-18-145102.jpg?imageMogr2/thumbnail/250x400!&quot; alt=&quot;小脑腐&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇博客是来自对两篇文章的翻译，原文链接如下。这两篇文章都总结了在使用 Spring 框架时可能造成 &lt;code&gt;NoSuchBeanDefinitionException&lt;/code&gt; 的情况，以及应该如何解决。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yemengying.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq 如何处理异常</title>
    <link href="http://yemengying.com/2017/01/30/how-does-rabbitmq-handle-exception/"/>
    <id>http://yemengying.com/2017/01/30/how-does-rabbitmq-handle-exception/</id>
    <published>2017-01-30T11:37:21.000Z</published>
    <updated>2017-02-05T07:55:48.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这应该是过年假期的最后一篇，如果不是，那你一定看到了假博客。(๑•̀ㅂ•́)و✧  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在消费 RabbitMq 中的 Message 时，常常会出现异常，可能是 Message 本身格式不对，或者由于某些原因无法被处理。我一般都是 catch 异常然后抛个 &lt;code&gt;AmqpRejectAndDontRequeueException&lt;/code&gt;  (以下简称 ARADRE )，也出啥问题，不过还是仔细看下，rabbitmq 是如何对待消费消息时出现的异常，是会将消息直接丢弃还是有其他操作。&lt;/p&gt;
&lt;p&gt;其实 Spring-amqp &lt;a href=&quot;http://docs.spring.io/spring-amqp/reference/html/_reference.html#exception-handling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;上对于 RabbitMq 是如何处理异常的说的已经很明白了，不过都是大段的文字可能不太好理解，还是配着代码看一下。&lt;/p&gt;
&lt;p&gt;代码版本： 1.6.3.RELEASE&lt;/p&gt;
&lt;p&gt;根据官方文档，当 listener 在消费消息时抛出一个异常的时候，该异常会被包装在 &lt;code&gt;ListenerExecutionFailedException&lt;/code&gt; 中抛出，并根据 &lt;code&gt;listenerContainer&lt;/code&gt; 中 &lt;code&gt;defaultRequeueRejected&lt;/code&gt; 设定的值来决定是否将该消息重新加入队列，默认是会重新加入队列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2017-01-30-145142.jpg?imageMogr2/thumbnail/700x300!&quot; alt=&quot;ListenerExecutionFailedException结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，如果抛出的异常是 ARADRE 或其他被 RabbitMq 认为是致命错误的异常，即便 defaultRequeueRejected 的值为 true ， 该消息也不会重新加入队列，而是会被直接丢弃或加入 dead-letter-exchange 中(如果有配置 dead-letter-exchange)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2017-01-30-dead-letters.jpeg?imageMogr2/thumbnail/400x300!&quot; alt=&quot;来源https://derickbailey.com/2016/03/28/dealing-with-dead-letters-and-poison-messages-in-rabbitmq/&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 1.6.3. RELEASE 中被 RabbitMq 认为是致命错误的异常有以下 6 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;o.s.amqp…MessageConversionException&lt;/li&gt;
&lt;li&gt;o.s.messaging…MessageConversionException&lt;/li&gt;
&lt;li&gt;o.s.messaging…MethodArgumentNotValidException&lt;/li&gt;
&lt;li&gt;o.s.messaging…MethodArgumentTypeMismatchException&lt;/li&gt;
&lt;li&gt;java.lang.NoSuchMethodException&lt;/li&gt;
&lt;li&gt;java.lang.ClassCastException&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说，当抛出以上异常及 ARADRE 时，该消息一定不会重新入队，即便 defaultRequeueRejected 的值为 true。&lt;/p&gt;
&lt;p&gt;下面看看 Spring-RabbitMq 是如何实现的：&lt;/p&gt;
&lt;p&gt;在源码中，异常在 &lt;code&gt;AbstractMessageListenerContainer&lt;/code&gt; 中被包装在 ListenerExecutionFailedException 中之后还会经由 &lt;code&gt;ErrorHandler&lt;/code&gt; 的 &lt;code&gt;handleError&lt;/code&gt; 方法处理， 默认的 ErrorHandler 是 &lt;code&gt;ConditionalRejectingErrorHandler&lt;/code&gt; 。 &lt;/p&gt;
&lt;p&gt;我们也可以实现自己的 ErrorHandler 来控制需要丢弃消息的异常，只要实现  &lt;code&gt;org.springframework.util.ErrorHandler&lt;/code&gt; 接口，然后将&lt;code&gt;listenerContainer&lt;/code&gt; 中的 &lt;code&gt;errorHandler&lt;/code&gt; 参数指定我们自定义的 handler 即可。 &lt;/p&gt;
&lt;p&gt;ConditionalRejectingErrorHandler 中配置有 &lt;code&gt;FatalExceptionStrategy&lt;/code&gt;，会调用 FatalExceptionStrategy 中的 isFatal 方法来判断异常是不是属于致命异常。&lt;/p&gt;
&lt;p&gt;ConditionalRejectingErrorHandler 的具体实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConditionalRejectingErrorHandler&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ErrorHandler&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; FatalExceptionStrategy exceptionStrategy;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.logger.isWarnEnabled()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.logger.warn(&lt;span class=&quot;string&quot;&gt;&quot;Execution of Rabbit message listener failed.&quot;&lt;/span&gt;, t);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果是致命异常，则转为 AmqpRejectAndDontRequeueException 抛出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.causeChainContainsARADRE(t) &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.exceptionStrategy.isFatal(t)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AmqpRejectAndDontRequeueException(&lt;span class=&quot;string&quot;&gt;&quot;Error Handler converted exception to fatal&quot;&lt;/span&gt;, t);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; true if the cause chain already contains an&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; AmqpRejectAndDontRequeueException&amp;#125;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;causeChainContainsARADRE&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Throwable cause = t.getCause();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (cause != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; AmqpRejectAndDontRequeueException) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		cause = cause.getCause();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Default implementation of &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; FatalExceptionStrategy&amp;#125;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 1.6.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DefaultExceptionStrategy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FatalExceptionStrategy&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 判断传入参数 是不是 致命异常&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isFatal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (t &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; ListenerExecutionFailedException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;amp;&amp;amp; isCauseFatal(t.getCause())) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ConditionalRejectingErrorHandler.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.logger.isWarnEnabled()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				ConditionalRejectingErrorHandler.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.logger.warn(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;							&lt;span class=&quot;string&quot;&gt;&quot;Fatal message conversion error; message rejected; &quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;							+ &lt;span class=&quot;string&quot;&gt;&quot;it will be dropped or routed to a dead letter exchange, if so configured: &quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;							+ ((ListenerExecutionFailedException) t).getFailedMessage());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isCauseFatal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable cause)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MessageConversionException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; org.springframework.messaging.converter.MessageConversionException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MethodArgumentNotValidException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MethodArgumentTypeMismatchException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; NoSuchMethodException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| cause &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; ClassCastException&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				|| isUserCauseFatal(cause);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * 通过重写该方法来添加自定义的异常&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * Subclasses can override this to add custom exceptions.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; cause the cause&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; true if the cause is fatal.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isUserCauseFatal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable cause)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码比较长，简单来说，就是 ConditionalRejectingErrorHandler 的 handleError 会先判断接到的异常中的 cause 是不是 ARADRE，如果不是再调用 FatalExceptionStrategy 的 isFatal 方法，判断是不是致命异常中的一种，如果是，则将异常转为 ARADRE 抛出，该消息也就不会重新入队。&lt;/p&gt;
&lt;p&gt;如果想要把自定义的异常加入到 fatalException， 一个简单的办法就是提供新的 FatalExceptionStrategy ，只要继承 ConditionalRejectingErrorHandler.DefaultExceptionStrategy 并重写 isUserCauseFatal(Throwable cause) 方法，在方法里对于需要丢弃消息的异常返回 true即可。&lt;/p&gt;
&lt;p&gt;再简单看下，RabbitMq 判断是否需要将消息重入队列的部分逻辑。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// We should always requeue if the container was stopping&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; shouldRequeue = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.defaultRequeuRejected || ex &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; MessageRejectedWhileStoppingException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Throwable t = ex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (shouldRequeue &amp;amp;&amp;amp; t != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (t &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; AmqpRejectAndDontRequeueException) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			shouldRequeue = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	t = t.getCause();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据上面的代码，如果处理消息时出现异常，在判断是否需要入队时，会将 shouldRequeue 变量等于 this.defaultRequeuRejected ||ex instanceof MessageRejectedWhileStoppingException 的值，然后如果异常是 ARADRE， 不管之前 shouldRequeue 的值是什么，都会被置为 false。最后根据 shouldRequeue 的值来决定是否需要重新入队。 &lt;/p&gt;
&lt;p&gt;可以用下图总结一下：&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2017-02-05-j%20-1-.png?imageMogr2/thumbnail/667x618!&quot; alt=&quot;总结&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后。。Cookie 宝宝祝大家新春快乐~~&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2017-01-28-1.pic.jpg?imageMogr2/thumbnail/500x800!&quot; alt=&quot;cookie 宝宝&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这应该是过年假期的最后一篇，如果不是，那你一定看到了假博客。(๑•̀ㅂ•́)و✧  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="rabbitmq" scheme="http://yemengying.com/categories/rabbitmq/"/>
    
    
      <category term="rabbitmq" scheme="http://yemengying.com/tags/rabbitmq/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>为Rabbitmq中的Jackson2JsonMessageConverter自定义ClassMapper</title>
    <link href="http://yemengying.com/2017/01/03/rabbitmq-classMapper/"/>
    <id>http://yemengying.com/2017/01/03/rabbitmq-classMapper/</id>
    <published>2017-01-03T14:40:30.000Z</published>
    <updated>2017-01-08T08:52:34.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;新年第一篇~~ 🐣🐥🐤🐔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;消息队列算是各个系统间通信比较常见的方式了。我们公司用的是是基于 AMQP 协议的 &lt;a href=&quot;http://www.rabbitmq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RabbitMq&lt;/a&gt;。在 Spring-AMQP 中比较重要的类就是 &lt;code&gt;Message&lt;/code&gt;，因为要发送的消息必须要构造成一个 Message 对象来进行传输。Message 对象包括两部分 Body 和 Properties，Body 就是真正要发送的消息内容，Properties 就是和消息相关的一些属性(消息头，要发送的交换机，routingKey等等)，主要结构如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; MessageProperties messageProperties;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] body;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;消息生产者构造好 Message 之后，就会将 Message 发送到指定的 Exchange (交换机)，再根据 Exchange 的类型及 routing-key 将消息路由到相应的 queue 中，最后被监听该 queue 的消费者消费，大致如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2017-01-07-122.pic.jpg?imageMogr2/thumbnail/700x500!&quot; alt=&quot;流程1&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过每次发消息都要自己构造 Message 对象比较麻烦。Spring-AMQP 允许我们直接使用自定义的类，然后会利用指定好的 &lt;code&gt;MessageConverter&lt;/code&gt; 将自定义的类转换为 Message 进行发送，在接收时也会利用 MessageConverter 将接收到的 Message 对象转成需要的对象。Spring-AMQP 提供了多种 MessageConverter，比如 SimpleMessageConverter，SerializerMessageConverter，Jackson2JsonMessageConverter，MarshallingMessageConverter等等，如果发送的消息对象不是 Message 实例，并且没有指定 MessageConverter 的话，默认用 SimpleMessageConverter。以上各种 MessageConverter 归根结底都是实现了 MessageConverter 接口，该接口只有两个方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MessageConverter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;Message &lt;span class=&quot;title&quot;&gt;toMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object object, MessageProperties messageProperties)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; MessageConversionException&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;fromMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message message)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; MessageConversionException&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两个方法一个是在发送消息时将我们的消息对象转换成标准的 Message 对象，另一个是在接受消息时将 Message 对象转换为相应的对象。&lt;br&gt;比较常用的 Converter 就是 Jackson2JsonMessageConverter(以下简称 JsonMessageConverter)，在发送消息时，它会先将自定义的消息类序列化成json格式，再转成byte构造 Message，在接收消息时，会将接收到的 Message 再反序列化成自定义的类。大致流程如下图：&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2017-01-08-3.pic_hd.jpg&quot; alt=&quot;流程2&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过使用 JsonMessageConverter 时有一个小问题，在&lt;code&gt;不对它进行任何改造的前提下&lt;/code&gt;，发送消息的类和接受消息的类必须是一样的，不仅是要里面的字段一样，类名一样，连类的包路径都要一样。&lt;/p&gt;
&lt;p&gt;所以当系统1使用 JsonMessageConverter 发送消息类A给系统2时，系统2可以有如下几种方式来接收：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.依赖系统1的jar包,直接使用类A来接收 &lt;/li&gt;
&lt;li&gt;2.不依赖系统1的jar包，自己建一个和A一模一样的类，连名称，包路径都一样&lt;/li&gt;
&lt;li&gt;3.负责监听 queue 的类实现 MessageListener 接口，直接接收 Message 类，再自己转换 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面三个方法都不是很好，按照正常的想法，我们肯定是期望系统2直接使用自己的类来接收就可以了，只要与A类的字段名一样即可。那有没有方法可以让系统2既不依赖无用的jar包，也不用建立个与自己命名规范不相符的类， 也无需自己转换呢?&lt;/p&gt;
&lt;p&gt;要解决这个问题，就要先看看 JsonMessageConverter 是如何将 Message 进行反序列化的。&lt;br&gt;在 JsonMessageConverter 的 fromMessage 方法中有这么一段:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getClassMapper() == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	JavaType targetJavaType = getJavaTypeMapper()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		.toJavaType(message.getMessageProperties());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	content = convertBytesToObject(message.getBody(), encoding, targetJavaType);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Class&amp;lt;?&amp;gt; targetClass = getClassMapper().toClass(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		message.getMessageProperties());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	content = convertBytesToObject(message.getBody(), encoding, targetClass);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就是说默认情况下，JsonMessageConverter 使用的 ClassMapper 是 &lt;code&gt;DefaultJackson2JavaTypeMapper&lt;/code&gt;，在转换时通过 Message 的 Properties 来获取要转换的目标类的类型。通过 Debug 可以发现，目标类的类型是存储在 Message 的 Proterties 的 一个 headers 的 Map 中，Key 叫“__TypeId__”。所以只要想办法在传输消息时更改__TypeId__的值即可。&lt;/p&gt;
&lt;p&gt;下面是解决办法，在消息的生产者端为 JsonMessageConverter， 设置一个自定义的 ClassMapper，重写 fromClass 方法，将 __TypeId__ 的值设为消费端用来接收的类的路径+名称。当然了，也可以在消费者端重写toClass方法，直接返回想要转换的目标类的类类型。两种选一种就可以。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Jackson2JsonMessageConverter &lt;span class=&quot;title&quot;&gt;customConverter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Jackson2JsonMessageConverter converter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Jackson2JsonMessageConverter();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  converter.setClassMapper(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassMapper() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; toClass(MessageProperties properties) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UnsupportedOperationException(&lt;span class=&quot;string&quot;&gt;&quot;this mapper is only for outbound, do not use for receive message&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fromClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;?&amp;gt; clazz, MessageProperties properties)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      properties.setHeader(&lt;span class=&quot;string&quot;&gt;&quot;__TypeId__&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;com.xxx.B&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; converter;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;感觉自己语言组织能力退化了。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;新年第一篇~~ 🐣🐥🐤🐔&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="rabbitmq" scheme="http://yemengying.com/categories/rabbitmq/"/>
    
    
      <category term="rabbitmq" scheme="http://yemengying.com/tags/rabbitmq/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>log 不打印异常堆栈</title>
    <link href="http://yemengying.com/2016/12/18/log4j-not-printing-stacktrace-for-eception/"/>
    <id>http://yemengying.com/2016/12/18/log4j-not-printing-stacktrace-for-eception/</id>
    <published>2016-12-18T06:17:33.000Z</published>
    <updated>2016-12-18T09:18:43.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;和上篇内容并不重复 🙃&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;最近由于规则引擎有问题，导致产线上的一个 job 会抛 NullPointerException。本来这是个已知的问题，也没什么，已经联系对应的人去修复了。可由此发现了另外一个问题， fireman 的告警邮件只有异常的名称，而没有异常堆栈。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2016-12-18-Screen%20Shot%202016-12-18%20at%204.22.52%20PM.png&quot; alt=&quot;fireman&quot;&gt;&lt;/p&gt;
&lt;p&gt;这就很令人懵圈了，因为不知道是已知的规则引擎的问题还是其他问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2016-12-18-20161124115359_ea5b38d19df10fbb8797c371754cb5d8_1_mwpm_03200403.jpeg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;？？&quot;&gt;&lt;/p&gt;
&lt;p&gt;先看了下对应 job 的代码，确认打印异常的姿势是正确的, 本地也可以正常打印。然后去搜了下对应日期的 log 文件，确实有一堆 NPE 的报错，不过惊喜的发现在一开始的时候其实是有打出堆栈的，只是到后面就没有了。&lt;/p&gt;
&lt;p&gt;最后终于在 &lt;a href=&quot;http://stackoverflow.com/questions/2295015/log4j-not-printing-the-stacktrace-for-exceptions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt; 上找到了答案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The compiler in the server VM now provides correct stack backtraces for all “cold” built-in exceptions. For performance purposes, when such an exception is thrown a few times, the method may be recompiled. After recompilation, the compiler may choose a faster tactic using preallocated exceptions that do not provide a stack trace. To disable completely the use of preallocated exceptions, use this new flag: -XX:-OmitStackTraceInFastThrow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;个人理解就是，JVM 为了性能会做优化，如果频繁的抛出某个异常，会重新编译，不再打印异常堆栈。&lt;br&gt;解决这个问题也比较简单，如果不想每次都去查前面的 log 去看堆栈，只要在启动参数加上 &lt;code&gt;-XX:-OmitStackTraceInFastThrow&lt;/code&gt;，就可以禁用该优化，强制打印异常堆栈。这样可能会导致，log 文件过大，不过产线上今天之前的 log 文件都会被压缩，所以感觉问题也不大。&lt;/p&gt;
&lt;p&gt;Ps:用 iPic 上传图片真是好用到飞起，非常适合我这种喜欢插图星人，多谢洪菊的良心推荐。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2016-12-18-maimeng.png&quot; alt=&quot;敲好用&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;和上篇内容并不重复 🙃&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Clean Code, Clean Log</title>
    <link href="http://yemengying.com/2016/11/18/clean-code-clean-log/"/>
    <id>http://yemengying.com/2016/11/18/clean-code-clean-log/</id>
    <published>2016-11-18T03:14:13.000Z</published>
    <updated>2016-11-20T09:14:08.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近提的 PR 都有关于 Log 的 comment，不能忍，以下内容总结整理自明佳的 Comment 和网络资料，只是为了以后提 PR 之前过来扫一眼，尽量避免 Log 上的疏忽，不一定适用于所有人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在程序中的适当位置打 Log 的重要性就不用多说了，很多人应该都体会过线上有 Bug 却由于没有打 log 而不好 troubleshooting 的经历。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/giraffe/chuilei.gif&quot; alt=&quot;T^T&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关文档（康桑哈密达）&quot;&gt;&lt;a href=&quot;#相关文档（康桑哈密达）&quot; class=&quot;headerlink&quot; title=&quot;相关文档（康桑哈密达）&quot;&gt;&lt;/a&gt;相关文档（康桑哈密达）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nurkiewicz.com/2010/05/clean-code-clean-logs-use-appropriate.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clean code, clean logs&lt;/a&gt;(👍很赞)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;SLF4J-VS-Log4J&quot;&gt;&lt;a href=&quot;#SLF4J-VS-Log4J&quot; class=&quot;headerlink&quot; title=&quot;SLF4J VS Log4J&quot;&gt;&lt;/a&gt;SLF4J VS Log4J&lt;/h3&gt;&lt;p&gt;有很多关于打 Log 的第三方库，也没有多研究过，接触过的就是 &lt;code&gt;SLF4J&lt;/code&gt; 和 &lt;code&gt;Log4J&lt;/code&gt; 了，不过墙裂建议用 &lt;a href=&quot;http://www.slf4j.org/manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLF4J&lt;/a&gt;，使用占位符 {} 真的比加号拼接字符串可读性提高N倍啊！！！&lt;/p&gt;
&lt;p&gt;感受一下&amp;lt;(￣︶￣)&amp;gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// SLF4J, good&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.error(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan failed, loan Id: &amp;#123;&amp;#125;, error: &amp;#123;&amp;#125;&quot;&lt;/span&gt;, loanId, errorMsg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Log4J, bad&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.error(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan failed, loan Id:&quot;&lt;/span&gt; + loanId + &lt;span class=&quot;string&quot;&gt;&quot; error: &quot;&lt;/span&gt; + errorMsg);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，SLF4J 还有其他的优点，比如不用字符串拼接，节省了创建 String 对象所耗费的资源之类的。不过我最看重的就是可读性高了。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/giraffe/jiaocao.gif&quot; alt=&quot;喵喵呜&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Logging-Level&quot;&gt;&lt;a href=&quot;#Logging-Level&quot; class=&quot;headerlink&quot; title=&quot;Logging Level&quot;&gt;&lt;/a&gt;Logging Level&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ERROR - 记录一些比较严重的错误，比如一些严重异常，数据库链接不可用等等&lt;/li&gt;
&lt;li&gt;WARN - 记录一些系统可以容忍的异常，或者是一些警示信息。比如:”Current data unavailable, using cached values”。&lt;/li&gt;
&lt;li&gt;INFO - 记录一些比较重要的操作，能反映程序运行状态的。比如:”[Who] booked ticket from [Where] to [Where]”&lt;/li&gt;
&lt;li&gt;DEBUG - 一些帮助调试的信息&lt;/li&gt;
&lt;li&gt;TRACE - 嗯，这个级别俺也没用过。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Pay-attention&quot;&gt;&lt;a href=&quot;#Pay-attention&quot; class=&quot;headerlink&quot; title=&quot;Pay attention&quot;&gt;&lt;/a&gt;Pay attention&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Log 信息首字母大写&lt;br&gt;这点完全是为了看上去舒服，至于到底需不需要大写，见仁见智吧~，不过我还是要注意一下，要大写。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.error(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan failed, loan Id: &amp;#123;&amp;#125;, error: &amp;#123;&amp;#125;&quot;&lt;/span&gt;, loanId, errorMsg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.error(&lt;span class=&quot;string&quot;&gt;&quot;invest loan failed, loan Id: &amp;#123;&amp;#125;, error: &amp;#123;&amp;#125;&quot;&lt;/span&gt;, loanId, errorMsg);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免 Log 中的 NullPointerException&lt;br&gt;如果像下面这样记 Log，要注意确保 loan 不会为null, 不然打 Log 时抛个 NPE，想想就蛋疼。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;log.info(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan : &amp;#123;&amp;#125;&quot;&lt;/span&gt;, loan.getId());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log 的信息简洁有用&lt;br&gt;Log 的内容一定要是有用的，能反映出程序的运行状态，能帮助定位错误。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.info(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan with id:&amp;#123;&amp;#125;&quot;&lt;/span&gt;, loanId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log.info(&lt;span class=&quot;string&quot;&gt;&quot;Invest loan&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;记录某些方法的入参和出参&lt;br&gt;记录方法的入参和出参，也可以帮助我们定位问题。特别是调用提供接口给其他系统调用的时候，记录入参可以帮助分辨到底是谁的锅🌚。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;printDocument&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Document doc, Mode mode)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  log.debug(&lt;span class=&quot;string&quot;&gt;&quot;Entering printDocument(doc=&amp;#123;&amp;#125;, mode=&amp;#123;&amp;#125;)&quot;&lt;/span&gt;, doc, mode);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  String id = &lt;span class=&quot;comment&quot;&gt;//Lengthy printing operation&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  log.debug(&lt;span class=&quot;string&quot;&gt;&quot;Leaving printDocument(): &amp;#123;&amp;#125;&quot;&lt;/span&gt;, id);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;合适的记录异常&lt;br&gt;大家都知道要在记录程序运行中抛出的异常，但有的时候方式可能是不对的。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;string&quot;&gt;&quot;Just for test&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(e);        &lt;span class=&quot;comment&quot;&gt;//A &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(e, e);        &lt;span class=&quot;comment&quot;&gt;//B &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; + e);        &lt;span class=&quot;comment&quot;&gt;//C &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(e.toString());        &lt;span class=&quot;comment&quot;&gt;//D &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(e.getMessage());        &lt;span class=&quot;comment&quot;&gt;//E &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, e);        &lt;span class=&quot;comment&quot;&gt;//F &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, e);        &lt;span class=&quot;comment&quot;&gt;//G&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#125;&quot;&lt;/span&gt;, e);        &lt;span class=&quot;comment&quot;&gt;//H &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#125;&quot;&lt;/span&gt;, e.getMessage());        &lt;span class=&quot;comment&quot;&gt;//I &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;Error reading configuration file: &quot;&lt;/span&gt; + e);        &lt;span class=&quot;comment&quot;&gt;//J &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;Error reading configuration file: &quot;&lt;/span&gt; + e.getMessage());        &lt;span class=&quot;comment&quot;&gt;//K &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   log.error(&lt;span class=&quot;string&quot;&gt;&quot;Error reading configuration file&quot;&lt;/span&gt;, e);        &lt;span class=&quot;comment&quot;&gt;//L&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面 12 种打印异常的方式中，只有 G 和 L是正确的。A 和 B 在使用 SLF4J 时会编译不通过， 其他的几种要么不会打印异常堆栈，要么会打印出不正确的信息。比如，E 的方式只会打印”Just for test”的信息，而不会打印异常类型和异常堆栈。在 SLF4J 中，第一个参数是文本信息，简单描述一下异常；第二个参数要传异常本身，而不是&lt;code&gt;e.getMessage()&lt;/code&gt;或&lt;code&gt;e.toString()&lt;/code&gt;,这样才能打印出异常堆栈，方便定位问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望可以消灭和 Log 有关的 Comment。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/moon.jpeg?imageMogr2/thumbnail/200x200!&quot; alt=&quot;biu biu biu~&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论~(≧▽≦)/~。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近提的 PR 都有关于 Log 的 comment，不能忍，以下内容总结整理自明佳的 Comment 和网络资料，只是为了以后提 PR 之前过来扫一眼，尽量避免 Log 上的疏忽，不一定适用于所有人。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【转】EVE 早期成员面基</title>
    <link href="http://yemengying.com/2016/11/15/i-love-eve/"/>
    <id>http://yemengying.com/2016/11/15/i-love-eve/</id>
    <published>2016-11-15T05:12:46.000Z</published>
    <updated>2016-11-16T03:14:26.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;第一次转别人的博客，想看原文的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/11/13/with-sunshine-after-one-year/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三“观”茅庐&lt;/a&gt;，我才不会告诉你们原文有大神高清无码照的！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先说点自己想说的， EVE 是毕业后第一份工作做的第一个产品(也可以说第一份工作做得唯一的产品，后面的那个我实在不想承认是我写的🙄)，做 EVE 的那段日子是到目前为止毕业后最开心的时光，学习到了很多东西也认识了很多很棒的小伙伴，不过也就是因为那段时光太过美好，才导致在部门拆分，EVE 团队大换血之后萌生了离职的念头。唉，没有对比就没有伤害啊。不过还是很感谢前前司，老大还有磊哥收留技艺不精的我。&lt;/p&gt;
&lt;p&gt;上周和之前的 EVE 小伙伴搞了次聚餐，见到了一年多没见的 sunshine 大神，之前做 EVE 时，前期一直和大神联调，虽未看过大神的代码，但也在 API 文档评审时深刻感受到了大神的代码洁癖。嗯，有代码洁癖的人代码一定写的好。&lt;/p&gt;
&lt;p&gt;最后，希望下次聚餐可以听到大神讲段子😏。&lt;/p&gt;
&lt;p&gt;—————————————分割线，以下内容来自hongju’s blog—————————————————&lt;/p&gt;
&lt;p&gt;这次面基的成因主要还是因为前两天看微信通讯录，sunshine 大神的头像换成了一只狗。于是就聊了起来，然后就有了今晚的这次聚餐~ sunshine 大神去年离职后，大约在十月一之前聚过一次餐，当时住的也比较近，后来大神搬到浦东，于是一年未见。于是又约到阿姨，卢神，凑了一次烤肉。&lt;/p&gt;
&lt;p&gt;未经大神同意，先偷偷的放一张 sunshine 的照片吧~&lt;/p&gt;
&lt;p&gt;&amp;lt;此处应该有照片&amp;gt;&lt;/p&gt;
&lt;p&gt;大神，阿姨，卢神和我们当时一起做在 * 公司做 EVE 这款产品，阿姨和卢神是EVE的后端主力，sunshine 算是我的 mentor，带着我用 cordova 做客户端，说白了就是用 H5 技术来做客户端。那段日子学到了很多东西，sunshine 大神的代码一直很 clean，给我做了非常好的榜样。以至于这一年多来，没见过比大神更加干净的代码。也就说，当我看那些人代码的时候，抑制不住吐槽的情绪。在 sunshine 的良好影响下，我自己也尽量写最干净的代码。&lt;/p&gt;
&lt;p&gt;除了代码之外，sunshine 对技术的追求也给我树立了很好的榜样。其实，在公司就会感觉到很多人对技术仅限于表面，或者能用就行。一点点追求都没有，这点，很致命。&lt;/p&gt;
&lt;p&gt;说完技术，再说说 sunshine 大神的 RP，大神不仅技术也好，做朋友也很好。非常踏实，有追求，因此我觉得自己非常幸运，能在自己毕业正式签约的第一家公司就能遇到这么好的 mentor。可惜的是，sunshine 离职，丢下的 EVE 这款美丽的产品于不靠谱的 sjn 之手。这里不再吐槽了。最近得知，EVE 这款产品更名 **。靠！&lt;/p&gt;
&lt;p&gt;说完，sunshine ， 这篇文章基本就算完事了。&lt;/p&gt;
&lt;p&gt;EVE 的早期成员都是非常靠谱，小团队，又能成事，现在很多人离开了公司，一部分人也分布在不同的业务线上，并且都混得很不错。期待着，哪一天能再次聚在一起~也不枉一起为了 EVE 熬了许多夜。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一次转别人的博客，想看原文的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/11/13/with-sunshine-after-one-year/&quot;&gt;三“观”茅庐&lt;/a&gt;，我才不会告诉你们原文有大神高清无码照的！！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="转载" scheme="http://yemengying.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Something about Spring Transaction</title>
    <link href="http://yemengying.com/2016/11/14/something-about-spring-transaction/"/>
    <id>http://yemengying.com/2016/11/14/something-about-spring-transaction/</id>
    <published>2016-11-14T13:30:34.000Z</published>
    <updated>2016-11-14T16:56:14.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;记录一个上周遇到的小问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;后端开发免不了要和事务打交道，比较常用的就是利用 Spring 框架的声明式事务管理，简单的说就是在需要事务管理的类或方法上添加 &lt;code&gt;@Transactional&lt;/code&gt; 注解，然后在配置类上添加 &lt;code&gt;@EnableTransactionManagement&lt;/code&gt;注解(这里配置采用 JavaConfig 的方式，如果是 XML， 是要在 XML 文件中添加&lt;code&gt;&amp;lt;tx:annotation-driven/&amp;gt;&lt;/code&gt;)。然后 Spring 框架会利用 AOP 在相关方法调用的前后进行事务管理。&lt;/p&gt;
&lt;p&gt;一直以来也没出什么岔子，直到。。。。。。。。&lt;/p&gt;
&lt;p&gt;上周写了段大概长下面样纸的代码。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Giraffe&amp;gt; giraffes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Giraffe giraffe : giraffes) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      B(giraffe);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Giraffe giraffe)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 1: update something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 2: insert something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 3: update something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大概就是 Service 中有一个方法 A，会内部调用方法 B， 方法 A 没有事务管理，方法 B 采用了声明式事务，通过在方法上声明 Transactional 的注解来做事务管理。&lt;/p&gt;
&lt;p&gt;然鹅，通过下面的 Junit 测试方法 A 的时候发现方法 B 的事务并没有开启， 而直接调用方法 B 事务是正常开启的。 &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeServiceTest&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; GiraffeService giraffeService;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 没有开启事务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	giraffeService.A();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 正常开启事务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	giraffeService.B();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/lei.jpg&quot; alt=&quot;T^T&quot;&gt;&lt;/p&gt;
&lt;p&gt;问了下明佳和超哥之后，终于有点明白了🤔&lt;/p&gt;
&lt;p&gt;Spring 在加载目标 Bean 的时候，会为声明了 @Transactional 的 目标 Bean 创造一个代理类，而&lt;code&gt;目标类本身并不能感知到代理类的存在&lt;/code&gt;。调用通过 Spring 上下文注入的 Bean 的方法， 并不是直接调用目标类的方法。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/direct-call.png&quot; alt=&quot;不是&quot;&gt;&lt;br&gt;而是先调用代理类的方法，再调用目标类的。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/proxy-call.png?imageMogr2/thumbnail/400x350!&quot; alt=&quot;是&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于加了@Transactional注解的方法来说，在调用代理类的方法时，会先通过拦截器&lt;code&gt;TransactionInterceptor&lt;/code&gt;开启事务，然后在调用目标类的方法，最后在调用结束后，TransactionInterceptor 会提交或回滚事务，大致流程如下图。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/transaction.png?imageMogr2/thumbnail/800x400!&quot; alt=&quot;transaction manager&quot;&gt;&lt;/p&gt;
&lt;p&gt;而对于第一段的代码，我在方法 A 中调用方法 B，实际上是通过“this”的引用，也就是直接调用了目标类的方法，而非通过 Spring 上下文获得的代理类，所以。。。事务是不会开启滴。&lt;/p&gt;
&lt;p&gt;解决办法也蛮简单，通过实现ApplicationContextAware接口获得 Spring 的上下文，然后获得目标类的代理类，通过代理类的对象，调用方法 B，即可。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;ApplicationContextAware&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;@Setter&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ApplicationContext applicationContext;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Giraffe&amp;gt; giraffes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    GiraffeService service = applicationContext.getBean(GiraffeService.class);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Giraffe giraffe : giraffes) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      service.B(giraffe);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Giraffe giraffe)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 1: update something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 2: insert something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// Step 3: update something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;stackoverflow 上也有相关的问题:&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1099025/spring-transactional-what-happens-in-background&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Transactional - What happens in background?&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23931698/spring-transactional-annotation-self-invocation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Transactional Annotation : Self Invocation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;唉，都快写完了，还没等来 wuli 悦儿&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/72bace62ed926caa5fb52a9ecca08e61.png?imageMogr2/thumbnail/500x350!&quot; alt=&quot;wuli 悦儿&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录一个上周遇到的小问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Running Man 7012</title>
    <link href="http://yemengying.com/2016/10/27/runningman-7012/"/>
    <id>http://yemengying.com/2016/10/27/runningman-7012/</id>
    <published>2016-10-27T13:47:17.000Z</published>
    <updated>2016-11-15T02:29:51.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;前两天刷微博时突然看到 Gary 即将从 《Running Man》(以下简称 RM) 下车的消息，有点伤感，却并不惊讶。可能从2016年开始，就隐约感到节目到了瓶颈，收视率也一直上不来，作为一个铁杆粉丝也不得不承认 RM 没有以前好看了，很长时间没有一期看好几遍的情况了。不过追了 RM 四年，看 RM 早已不是为了娱乐搞笑，而变成了自己生活的一部分，只要看到他们七个就开心。也许在不久的将来连 RM 都会停播了，但现在只要 RM 更新一期，就会看一期，哪怕就是他们几个嗑瓜子闲聊天。即便有再火再好看的节目，自己也早没了当初的心境去追了。改编我前女神的一句歌词就是“有的综艺说不清哪里好，但就是谁都替代不了”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;好了，结束伤感的话题。&lt;/p&gt;
&lt;p&gt;本来想写篇 RM 科普文，但对 RM 不感冒估计怎么说也不会感兴趣吧。所以就简单写点，纪念下我爱的七只和第一次也是最后一次追了四年看过每一期的 RM。部分资料和图片来源于网络，权侵删。&lt;/p&gt;
&lt;h3 id=&quot;七只&quot;&gt;&lt;a href=&quot;#七只&quot; class=&quot;headerlink&quot; title=&quot;七只&quot;&gt;&lt;/a&gt;七只&lt;/h3&gt;&lt;p&gt;RM 能收获那么的喜爱和关注，虽然离不开制作组的精心制作和创意，但更重要的是七个 MC 的人格魅力。So…..就从介绍七只开始，聊聊 RM 吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;刘在石&lt;/strong&gt;:&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/1.jpeg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;刘大神&quot;&gt;&lt;br&gt;  外号：刘大神、刘鲁斯·威利斯、刘姆斯·邦德、蚂蚱/蚱蜢、刘赫&lt;/p&gt;
&lt;p&gt;  国民 MC，也应该是目前韩国地位最高的 MC 了。RM 的灵魂人物，美好的一塌糊涂(我是不是和驴得水里面的教育部长一样不会用词🤓)。会记住工作人员的名字，会在录制中去帮助路边的市民，会隐藏自己努力突出其他人，亲民，谦逊，幽默，温暖(此处省略10万字)。跑步很快，所以有个外号叫刘鲁斯·威利斯。如果硬要说一个缺点的话，那就是。。。。。恩，摘了眼睛颜值骤降。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/liu2.png?imageMogr2/thumbnail/300x600!&quot; alt=&quot;萌萌哒&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;池石镇&lt;/strong&gt;：&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/2_1.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;池石镇&quot;&gt;&lt;br&gt;  外号：王鼻子、黑斑羚、Race Starter&lt;/p&gt;
&lt;p&gt;  王👃大叔，RM 中年龄最大的，擅长身体搞笑。是 RM 中的最弱体, 监狱三人组之一。几乎每次撕名牌都是最先去监狱的，所以也被称为“Race Starter”(比赛开始)。其实鼻子大叔对 RM 的贡献是很大的，在前期所有人的定位还不明确的时候，RM 的笑点都是靠大神和鼻子大叔扛起来的，鼻子叔是那种身体素质一般，但口才超棒的人，很会制造笑料。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;宋智孝&lt;/strong&gt;：&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/5_2.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;宋智孝&quot;&gt;&lt;br&gt;  外号：懵智、不良智孝、Ace、金智孝、周一情侣&lt;/p&gt;
&lt;p&gt;  RM 中唯一的女 MC。第一眼感觉就是漂亮，很耐看。但深入了解下去，才发现漂亮在智孝身上已经算不上什么闪光点了。第一次见到刚睡醒顶着一头乱乱的头发就去录影的女演员；第一次见到在车上张着嘴睡的女演员；能摔跤，能劈砖，能下泥潭，能蹦极，完全不输给男生；气急了还会爆两句粗口，瞬间变身不良智孝;很聪明，是 RM 中单独获胜次数最多的；这样的懵智怎么可能不喜欢😍&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/zhixiao_shaozi.png?imageMogr2/thumbnail/300x200!&quot; alt=&quot;宋智孝&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;金钟国&lt;/strong&gt;：&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/3.jpeg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;金钟国&quot;&gt;&lt;br&gt;  外号：能力者、老虎、钟淑、斯巴达国&lt;/p&gt;
&lt;p&gt;  很具有反转魅力的一个人。唱歌时嗓音很细腻温柔，撕名牌时却以一抵十；看身材很剽悍，实际却很爱卖萌。是 RM 中的能力者，撕遍天下无敌手，不过也因为太强，经常在撕名牌时被围剿😭。要说能力者有什么怕的，应该就是“背叛长颈鹿”（李光洙）了，就是本能坑害老虎。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/tumblr_mitpqwkvFE1qgnyjgo6_r1_250.gif&quot; alt=&quot;︿(￣︶￣)︿&quot;&gt;&lt;br&gt;  咳咳，只是为了节目效果，国儿和光洙还是很有爱的🙃。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/tumblr_mitpqwkvFE1qgnyjgo2_r2_250.gif&quot; alt=&quot;相亲相爱&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;姜gary&lt;/strong&gt;:&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/61.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;姜gary&quot;&gt;&lt;br&gt;  外号：狗哥、平和Gary、偶尔能力者、鱿鱼、周一情侣&lt;/p&gt;
&lt;p&gt;  本职工作是音乐人，但却因为综艺火了起来。在节目中，总是不经意的爆发一下，所以被称为偶尔能力者，前两期的最强者特辑， gary 都是最后的获胜者。gary 的诸多定位中，最火的应该就是和智孝的周一情侣了。虽然在2016年的节目中，制作组特意淡化了周一cp间的互动，但我一直觉得 gary 就是智孝的“姜盖里”，会偷偷放走她的“姜盖里”。多亏了周一情侣，让我在看综艺的同时，也看了部偶像剧🌚&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/gary_cp.jpg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;周一情侣&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;哈哈&lt;/strong&gt;：&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/4.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;哈哈&quot;&gt;&lt;br&gt;  外号：Haroro、企鹅、花心哈哈&lt;/p&gt;
&lt;p&gt;  哈哈，本名河东勋，不过还是更习惯哈哈这个名字。早期在 RM 的定位是“花心哈哈”，每次一来女嘉宾，就会说“成为我最后的爱吧 (｡♥‿♥｡)”。不过这些只是为了活跃气氛，结婚之后“花心哈哈”的定位就没有，变成了“顾家好男人”，最近听说哈哈马上要有第二个孩子了，在渡汉江那期说的愿望也要实现了。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/8643d6ee56de7eaa046af99a222f3060.gif&quot; alt=&quot;☆´∀｀☆&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;李光洙&lt;/strong&gt;:&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/7.jpg?imageMogr2/thumbnail/150x150!&quot; alt=&quot;李光洙&quot;&gt;&lt;br&gt;  外号：长颈鹿、亚洲王子、李光子、光凡达、光蟾蜍、情景剧发烧友&lt;/p&gt;
&lt;p&gt;  绝对的男神，我博客的标准结尾。其实在一开始，光洙可以说是最不起眼的，作为一个综艺新手，没有大神，国儿，haha从以前节目积累下的观众缘，没有王鼻子老练，没有 gary 有那么多的歌迷，也没有宋仲基那么明显的颜值优势。但在自己的努力和其他人的帮助下，一点点找到了自己的定位（陷害光洙，easy 兄弟，长颈鹿)。在节目中，光洙最明显的特质应该就是“背叛”了，每次都让人觉得好气啊，然后就又笑的肚子疼。。。。不知道为什么七个 MC 中，最最喜欢光洙，连带着把很多网站的用户名都换成了 giraffe，可能天生就对这种又努力又逗比的人没有抵抗力吧。&lt;br&gt;  放一下女装造型&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/liguangzi.jpeg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;李光子&quot;&gt;&lt;br&gt;  不过一开始的胡子造型真是亮瞎了我的卡姿兰大眼睛。&lt;br&gt;  &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/huzi.jpg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;😱&quot;&gt;&lt;br&gt;  哈哈哈哈，原谅我，爱到深处自然黑啊。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;墙裂推荐&quot;&gt;&lt;a href=&quot;#墙裂推荐&quot; class=&quot;headerlink&quot; title=&quot;墙裂推荐&quot;&gt;&lt;/a&gt;墙裂推荐&lt;/h3&gt;&lt;p&gt;本来想按照好看程度排个最好看的十期，最后发现实在选不出来。每一期都敲好看，都值得看。就随便推几期吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/KwvzbxLDWls/C7eeyc6dRVI.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20130825 &lt;/a&gt;&lt;br&gt; 按照电影雪国列车为主题拍摄的一期，玩游戏整理排名，国儿和大神互打手掌那段简直笑屎我了。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/KwvzbxLDWls/_kGbJeh5ayM.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20130526&lt;/a&gt;&lt;br&gt; 嘉宾是金秀贤和李玹雨，全集高能，我大神叼着接力棒吃洋葱圈简直萌翻我。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/v9hwf_w5zyk/kDnxaOAcKsY.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141123&lt;/a&gt;&lt;br&gt; 这集造型极其哇撒，放张图，大家憋说话，用心感受&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/alien.jpg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;(￣▽￣)~*&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/v9hwf_w5zyk/RzktO2d9L1o.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141012&lt;/a&gt;&lt;br&gt; 七个成员都变成了超级英雄，高空测试胆量那段笑的我肚子疼。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/v9hwf_w5zyk/AKR3BwkXzV8.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141109&lt;/a&gt;&lt;br&gt; 女装特辑，最爱wuli光子和钟淑了。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/KwvzbxLDWls/JTRj3UG6Nsg.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20130915&lt;/a&gt;&lt;br&gt; 很多人应该冲着嘉宾是Bigbang看过这期了，但我推荐这期是因为这期有我周一情侣的荧屏初吻，我的少女心啊😍&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/v_19rrn6uwpg.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20141214&lt;/a&gt;&lt;br&gt; 通过一张图就能知道大神为了赢有多拼。&lt;br&gt; &lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/u=288559190,3305279898&amp;amp;fm=21&amp;amp;gp=0.jpg?imageMogr2/thumbnail/300x200!&quot; alt=&quot;&amp;lt;(￣︶￣)&amp;gt;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XMTUyMjI3MTEwNA==.html?from=y1.6-85.3.1.7712090c9d5a11e5a080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20160403&lt;/a&gt;&lt;br&gt; 2016年里的觉得最好看的一期。特别是wuli光洙被haha愚弄的那段。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/w_19rr63053t.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20111225&lt;/a&gt;&lt;br&gt; 第一期最强者特辑。RM 每年都会有一期是最强者特辑，遗憾的是国儿还从来没有赢过，希望下一期最强者战可以是国儿赢。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/zongyi/20130130/379d4aa0b603dec5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20120624&lt;/a&gt;&lt;br&gt; RM 第一百期特辑，诸神之战， 嘉宾是金喜善， 结局蛮不错的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tudou.com/albumplay/O8GDpd7v8RA/v3YuwBHAY4M.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20150125&lt;/a&gt;&lt;br&gt; 刘姆斯邦德 vs 光佛岩，结尾狗哥真是蠢萌的让人心疼&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iqiyi.com/w_19rt38lku1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20110911&lt;/a&gt;&lt;br&gt; 狗哥做间谍🕵的一期，不应该说是狗哥以为他做间谍，但是其他成员其实都知道他是间谍，他并不知道其他成员知道他是间谍的一期。。。艾玛啊，说的好绕🙃&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;又到睡觉觉的时候了&quot;&gt;&lt;a href=&quot;#又到睡觉觉的时候了&quot; class=&quot;headerlink&quot; title=&quot;又到睡觉觉的时候了&quot;&gt;&lt;/a&gt;又到睡觉觉的时候了&lt;/h3&gt;&lt;p&gt;写的差不多了，这么点内容根本表达不出 RM 带给我的快乐。生活大爆炸也开始更新第十季了，很有可能是最后一季，说不定过两天又要写篇文章纪念下贱萌贱萌的 Sheldon, 总被压迫的 Leonard 和女汉纸 Penny 了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/42a98226cffc1e17bf5c71db4e90f603728de97d.jpg?imageMogr2/thumbnail/600x400!&quot; alt=&quot;7012&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前两天刷微博时突然看到 Gary 即将从 《Running Man》(以下简称 RM) 下车的消息，有点伤感，却并不惊讶。可能从2016年开始，就隐约感到节目到了瓶颈，收视率也一直上不来，作为一个铁杆粉丝也不得不承认 RM 没有以前好看了，很长时间没有一期看好几遍的情况了。不过追了 RM 四年，看 RM 早已不是为了娱乐搞笑，而变成了自己生活的一部分，只要看到他们七个就开心。也许在不久的将来连 RM 都会停播了，但现在只要 RM 更新一期，就会看一期，哪怕就是他们几个嗑瓜子闲聊天。即便有再火再好看的节目，自己也早没了当初的心境去追了。改编我前女神的一句歌词就是“有的综艺说不清哪里好，但就是谁都替代不了”。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>滚蛋吧~ XML 君</title>
    <link href="http://yemengying.com/2016/10/15/javaConfig-vs-XML/"/>
    <id>http://yemengying.com/2016/10/15/javaConfig-vs-XML/</id>
    <published>2016-10-15T07:20:20.000Z</published>
    <updated>2016-10-19T09:01:38.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Long long time ago, 在《Spring In Action》一书中看到这么一句话&lt;strong&gt; JavaConfig is the preferred option for explicit configuration because it’s more powerful, type-safe, and refactor-friendly &lt;/strong&gt;。不过当时并不知道 &lt;code&gt;JavaConfig&lt;/code&gt; 是神马东东就选择性忽略了。最近新的项目采用了 Spring Boot + JavaConfig ,接触了一个星期的 JavaConfig，感觉还不错，简单比较下它和 XML。由于接连看了 4 部韩国灾难片心情比较蓝瘦，就暂时不要指正错误了，错就错吧(づ｡◕‿‿◕｡)づ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/alibaba.jpg&quot; alt=&quot;lalala&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot; title=&quot;XML&quot;&gt;&lt;/a&gt;XML&lt;/h3&gt;&lt;p&gt;虽然早在 Spring 3 中就开始支持以 &lt;code&gt;JavaConfig&lt;/code&gt; 的方式配置项目，但感觉目前主流的还是以 &lt;code&gt;XML + Annotation&lt;/code&gt; 的方式，很少见到使用 JavaConfig 的。可能有点以偏概全了，但在前司和前前司接触到的项目都是以 XML + Annotation 混合的方式配置的，即在 XML 配置文件中开启注解扫描, 业务 bean 的配置注入采用注解( @Serivce, @Autowire 等等)，全局的一些配置(如 MyBatis 的 DataSource,SqlSessionFactory ，web.xml 等等)使用 XML。&lt;/p&gt;
&lt;p&gt;虽然 XML + Annotation 的方式比纯用 XML 配置的方式少写了很多 XML，但本质上还是基于 XML 的。&lt;/p&gt;
&lt;p&gt;XML 的配置文件比较冗长，不易书写，而且可读性也不高。不知道大家感觉怎么样，反正我看着是挺头疼的╥﹏╥…&lt;/p&gt;
&lt;h3 id=&quot;JavaConfig&quot;&gt;&lt;a href=&quot;#JavaConfig&quot; class=&quot;headerlink&quot; title=&quot;JavaConfig&quot;&gt;&lt;/a&gt;JavaConfig&lt;/h3&gt;&lt;p&gt;先简单介绍一下 JavaConfig，JavaConfig即Java Configuration, 即用纯 Java 的方式来配置 Spring&lt;br&gt; IoC 容器,允许开发者用代码来表示配置逻辑，不再需要 XML。粗略翻了两本关于 Spring Boot的书， JavaConfig 都是最推荐的配置方式。&lt;/p&gt;
&lt;p&gt;使用 JavaConfig 的好处，Spring 官方文档中说的很清楚：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JavaConfig 为依赖注入提供了一个真正面向对象的机制，这意味着开发者可以在配置代码中充分利用 Java 重用、继承和多态性等特性。&lt;/li&gt;
&lt;li&gt;开发者可以完全控制实例化和依赖注入，即使是最复杂的对象也可以很优雅地处理。&lt;/li&gt;
&lt;li&gt;因为使用 JavaConfig 只需要 Java，可以很容易的 refactor 代码，而无需再 IDE 之外使用特殊的工具或插件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JavaConfig 其实很简单，主要是通过 @Configuration 和 @Bean 来进行配置。@Configuration 注解的作用是声明当前类是一个配置类， 就相当于一个 XML 文件。 @Bean 注解声明当前方法返回的是一个 bean。&lt;/p&gt;
&lt;p&gt;可能这样说对于用惯了 XML 的人还是比较抽象的，下面看看这些注解与 XML 配置的对应关系。&lt;/p&gt;
&lt;h3 id=&quot;JavaConfig-与-XML&quot;&gt;&lt;a href=&quot;#JavaConfig-与-XML&quot; class=&quot;headerlink&quot; title=&quot;JavaConfig 与 XML&quot;&gt;&lt;/a&gt;JavaConfig 与 XML&lt;/h3&gt;&lt;p&gt;1.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;: @Configuration&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;:&lt;/p&gt;
  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:tx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:util&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/util&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xmlns:p&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	   http://www.springframework.org/schema/beans/spring-beans.xsd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      http://www.springframework.org/schema/tx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	   http://www.springframework.org/schema/tx/spring-tx.xsd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      http://www.springframework.org/schema/util&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      http://www.springframework.org/schema/util/spring-util.xsd&quot;&amp;gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;: @Bean&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;:&lt;/p&gt;
  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;jdbc:mysql://127.0.0.1:3307/giraffe&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ymy&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;666666&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;：@ComponentScan&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;：&lt;br&gt;  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;br&gt;&lt;strong&gt;JavaConfig&lt;/strong&gt;：@Import&lt;br&gt;&lt;strong&gt;XML&lt;/strong&gt;：&lt;br&gt;   &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;resource&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;XXX.xml&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比如要配置一个 dataSource， 在 XML 中通常的做法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;drMainDataSource&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.url&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.username&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.password&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;maxActive&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;mysql.datasource.max-active&amp;#125;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对应的 JavaConfig 是酱紫的：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataAccessConfig&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConfigurationSupport&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSource &lt;span class=&quot;title&quot;&gt;mysqlDataSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Value(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.url&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String url,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.username&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String username,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.password&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String password,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.driverClass&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; String driver,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    @&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;mysql.datasource.max-active&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxActive) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    DruidAbstractDataSource dataSource = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DruidDataSource();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setDriverClassName(driver);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setUrl(url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setUsername(username);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setPassword(password);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource.setMaxActive(maxActive);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataSource;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;虽然才接触了一周的 JavaConfig, 但是相见恨晚啊, 个人还是更喜欢 JavaConfig 的配置方式的。JavaConfig 的配置文件可读性更高也更容易学习，记住简单的几个注解即可；借助 IDE 的力量，更不容易出错；而且脑袋再也不用在 Java 和 XML 间来回切换了，在搭配上 Gradle 简直破费科特！！！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/WechatIMG1.png&quot; alt=&quot;开森&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关文档&quot;&gt;&lt;a href=&quot;#相关文档&quot; class=&quot;headerlink&quot; title=&quot;相关文档&quot;&gt;&lt;/a&gt;相关文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring-javaconfig/docs/1.0.0.M4/reference/html/pr01.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring JavaConfig Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Spring Boot 揭秘》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;——————————————-片 尾 彩 蛋 🎉🎉🎉—————————————————&lt;br&gt;咳咳，预警预警！！！下面的部分与本文主旨无关。&lt;/p&gt;
&lt;p&gt;首先，换了个新锅，可以预约煮粥，再也不用早起煮粥了，幸福感提升 200%。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/guo.jpg&quot; alt=&quot;我是锅&quot;&gt;&lt;br&gt;其次，在匿名人士的帮助下上线了新版未翻墙模式下的评论，优化了样式。唉，这是谁的男朋友这么有才华，好羡慕她哦︿(￣︶￣)︿&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/envy.png&quot; alt=&quot;&amp;lt;(￣︶￣)&amp;gt;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，嘿嘿，关注个公众号再走吧(&lt;em&gt;^__^&lt;/em&gt;)&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/qrcode.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Long long time ago, 在《Spring In Action》一书中看到这么一句话&lt;strong&gt; JavaConfig is the preferred option for explicit configuration because it’s more powerful, type-safe, and refactor-friendly &lt;/strong&gt;。不过当时并不知道 &lt;code&gt;JavaConfig&lt;/code&gt; 是神马东东就选择性忽略了。最近新的项目采用了 Spring Boot + JavaConfig ,接触了一个星期的 JavaConfig，感觉还不错，简单比较下它和 XML。由于接连看了 4 部韩国灾难片心情比较蓝瘦，就暂时不要指正错误了，错就错吧(づ｡◕‿‿◕｡)づ&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yemengying.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yemengying.com/tags/java/"/>
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>【译】S.O.L.I.D 原则在 Go 中的应用（上）</title>
    <link href="http://yemengying.com/2016/09/11/solid-go-design-1/"/>
    <id>http://yemengying.com/2016/09/11/solid-go-design-1/</id>
    <published>2016-09-11T07:09:18.000Z</published>
    <updated>2016-09-21T09:53:06.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近两个月没有好好的看书学习，导致博客也水了两个月没写什么正经的。上周收到仓鼠🐹君萌萌哒的邮件之后，又激起了我写博客的欲望。由于自己最近灵感枯竭，所以我决定翻译一篇别人的O(∩_∩)O~。作为一个一直想学 Go，但想了好久还没入门的人，我挑了篇写 Go 的，顺便帮自己熟悉一下 Go。原文是作者根据自己 GolangUK 的&lt;a href=&quot;https://www.youtube.com/watch?v=zzAdEt3xZ1M&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演讲&lt;/a&gt;所整理的，全文以 SOLID 原则为线路讲述了什么样的 Go 代码才算是好代码，当然 SOLID 原则也适用于其他语言。原文比较长，所以准备分成上下两部分，也有十分非常以及特别大的可能是上中下(捂脸)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咳咳，我果然是打脸体质，下翻译了一句就放弃了。不过，我把它交给了超靠谱的小伙伴。想看下的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/09/21/solid-go-design-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【译】S.O.L.I.D 原则在 Go 中的应用（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;捂。。。。。。。。还是不捂了，脸已经丢没了🙈&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://dave.cheney.net/2016/08/20/solid-go-design?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dave.cheney.net/2016/08/20/solid-go-design?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&lt;/a&gt;&lt;br&gt;原文作者：&lt;a href=&quot;http://dave.cheney.net/about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dave Cheney&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;世界上有多少个-Go-语言开发者？&quot;&gt;&lt;a href=&quot;#世界上有多少个-Go-语言开发者？&quot; class=&quot;headerlink&quot; title=&quot;世界上有多少个 Go 语言开发者？&quot;&gt;&lt;/a&gt;世界上有多少个 Go 语言开发者？&lt;/h4&gt;&lt;p&gt;介个世界上有多少 Go 开发者捏？在脑海中想一个数字，我们会在最后回到这个话题。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/think1.png&quot; alt=&quot;thinking&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Code-review&quot;&gt;&lt;a href=&quot;#Code-review&quot; class=&quot;headerlink&quot; title=&quot;Code review&quot;&gt;&lt;/a&gt;Code review&lt;/h4&gt;&lt;p&gt;有多少人将 code review 当做自己工作的一部分?[听演讲的人都举起了手]。为什么要做 code review？[一些人回答为了阻止不好的代码]&lt;/p&gt;
&lt;p&gt;如果 code review 是为了捕捉到不好的代码，那么问题来了，你怎么判断你正在 review 的代码是好还是不好呢？&lt;/p&gt;
&lt;p&gt;我们可以很容易的说出“这代码好辣眼睛”或者“这源码写的太吊了”，就像说“这画真美”，“这屋子真大气”一样。但是这些都是主观的，我希望找到一些客观的方法来衡量代码是好还是不好。&lt;/p&gt;
&lt;h4 id=&quot;Bad-code&quot;&gt;&lt;a href=&quot;#Bad-code&quot; class=&quot;headerlink&quot; title=&quot;Bad code&quot;&gt;&lt;/a&gt;Bad code&lt;/h4&gt;&lt;p&gt;下面看一下在 code review 中，一段代码有哪些特点会被认为是不好的代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rigid 代码是不是很僵硬？是否由于严格的类型和参数导致修改代码的成本提高&lt;/li&gt;
&lt;li&gt;Fragile 代码是不是很脆弱？是否一点小的改动就会造成巨大的破坏？&lt;/li&gt;
&lt;li&gt;Immobile 代码是否难以重构？&lt;/li&gt;
&lt;li&gt;Complex 代码是否是过度设计？&lt;/li&gt;
&lt;li&gt;Verbose 当你读这段代码时，能否清楚的知道它是做什么的？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👆这些都不是什么好听的词，没有人希望在别人 review 自己代码时听到这些词。&lt;/p&gt;
&lt;h4 id=&quot;Good-design&quot;&gt;&lt;a href=&quot;#Good-design&quot; class=&quot;headerlink&quot; title=&quot;Good design&quot;&gt;&lt;/a&gt;Good design&lt;/h4&gt;&lt;p&gt;了解了什么是不好的代码之后，我们可以说“我不喜欢这段代码因为它不易于修改”或者“这段代码并没有清晰的告诉我它要做什么”。但这些并没有带来积极的引导。&lt;/p&gt;
&lt;p&gt;如果我们不仅仅可以描述不好的设计，还可以客观的描述好的设计，是不是更有助于提高呢。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/excited.jpg&quot; alt=&quot;excited&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;SOLID&quot;&gt;&lt;a href=&quot;#SOLID&quot; class=&quot;headerlink&quot; title=&quot;SOLID&quot;&gt;&lt;/a&gt;SOLID&lt;/h4&gt;&lt;p&gt;2002年，&lt;code&gt;Robert Martin&lt;/code&gt; 出版了《敏捷软件开发:原则、模式与实践》一书，在书中他描述了可重用软件设计的五个原则，他称之为 &lt;strong&gt;SOLID&lt;/strong&gt; 原则(每个原则的首字母组合在一起)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一责任原则&lt;/li&gt;
&lt;li&gt;开放封闭原则&lt;/li&gt;
&lt;li&gt;里氏替换原则&lt;/li&gt;
&lt;li&gt;接口分离原则&lt;/li&gt;
&lt;li&gt;依赖倒置原则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这本书有点过时了，书中谈论的语言都已经超过了十年之久。尽管如此，在谈论什么样的 Go 代码才是好代码时，SOLID 的原则依然可以给我们一些启发。&lt;/p&gt;
&lt;p&gt;So，这也就是我花时间想在本文和大家一起讨论的。&lt;/p&gt;
&lt;h4 id=&quot;单一责任原则&quot;&gt;&lt;a href=&quot;#单一责任原则&quot; class=&quot;headerlink&quot; title=&quot;单一责任原则&quot;&gt;&lt;/a&gt;单一责任原则&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/single.png&quot; alt=&quot;忙成狗&quot;&gt;&lt;br&gt;SOLID 原则中的第一个原则就是&lt;code&gt;单一责任原则&lt;/code&gt;。&lt;code&gt;Robert C Martin&lt;/code&gt; 说过 A class should have one, and only one, reason to change(修改某个类的时候，原因有且只有一个)，说白了就是，一个类只负责一项职责。&lt;/p&gt;
&lt;p&gt;虽然 Go 语言中并没有类的概念–但我们有更鹅妹子嘤的 &lt;code&gt;composition&lt;/code&gt; (组合)的特性。&lt;/p&gt;
&lt;p&gt;为什么修改一段代码只负责一项职责如此重要呢？如果一个类有两个职责R1，R2，那么修改R1时，可能会导致也要修改R2。修改代码是痛苦的，但更痛苦的是修改代码的原因是由于修改其他代码引起的。&lt;/p&gt;
&lt;p&gt;所以当一个类只负责一个功能领域中的相应职责时，可以修改的它的原因也就最大限度的变少了。&lt;/p&gt;
&lt;h5 id=&quot;耦合-amp-内聚&quot;&gt;&lt;a href=&quot;#耦合-amp-内聚&quot; class=&quot;headerlink&quot; title=&quot;耦合 &amp;amp; 内聚&quot;&gt;&lt;/a&gt;耦合 &amp;amp; 内聚&lt;/h5&gt;&lt;p&gt;这两个词是用来形容一段代码是否易于修改的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;耦合&lt;/code&gt;是指两个东西需要一起修改—对其中一个的改动会影响到另一个。&lt;/p&gt;
&lt;p&gt;另一个相关但独立的概念是&lt;code&gt;内聚&lt;/code&gt;，一般指相互吸引的迷之力量。&lt;/p&gt;
&lt;p&gt;在软件开发领域中，内聚常常用来描述一段代码内各个元素彼此结合的紧密程度。&lt;/p&gt;
&lt;p&gt;下面我准备从 Go 的包模型开始，聊聊 Go 开发中的耦合与内聚。&lt;/p&gt;
&lt;h5 id=&quot;包名&quot;&gt;&lt;a href=&quot;#包名&quot; class=&quot;headerlink&quot; title=&quot;包名&quot;&gt;&lt;/a&gt;包名&lt;/h5&gt;&lt;p&gt;在Go中，所有代码都必须有一个所属的包。一个包名要描述它的用途，同时也是命名空间的前缀。下面是 Go 标准库中一些好的包名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;net/http，提供 http 的客户端和服务端。&lt;/li&gt;
&lt;li&gt;os/exec，可以运行运行外部命令。&lt;/li&gt;
&lt;li&gt;encoding/json，实现了 JSON 文件的编码和解码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;不好的包名&quot;&gt;&lt;a href=&quot;#不好的包名&quot; class=&quot;headerlink&quot; title=&quot;不好的包名&quot;&gt;&lt;/a&gt;不好的包名&lt;/h5&gt;&lt;p&gt;现在让我们来喷一些不好的包名。这些包名并没有很好的展现出它们的用途，当然了前提是它们有-_-|||。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;package server 是提供什么？。。。好吧就当是提供一个服务端吧，但是是什么协议呢?&lt;/li&gt;
&lt;li&gt;package private 是提供什么？一些我不应该看👀的东西？&lt;/li&gt;
&lt;li&gt;还有 package common， package utils，同样无法清楚的表达它们的用途，开发者也不易保持它们功能的专一性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面这些包很快就会变成堆放杂七杂八代码的垃圾堆，而且会由于功能太杂乱而频繁修改。&lt;/p&gt;
&lt;h5 id=&quot;Go-中的-UNIX-哲学&quot;&gt;&lt;a href=&quot;#Go-中的-UNIX-哲学&quot; class=&quot;headerlink&quot; title=&quot;Go 中的 UNIX 哲学&quot;&gt;&lt;/a&gt;Go 中的 UNIX 哲学&lt;/h5&gt;&lt;p&gt;在我看来，任何关于解耦设计的讨论如果没有提到 &lt;code&gt;Doug McIlroy&lt;/code&gt; 的 &lt;code&gt;UNIX 哲学&lt;/code&gt;都是不完整的。UNIX 哲学就是主张将若干简洁，清晰的模块组合起来完成复杂的任务，而且通常情况下这个任务都不是原作者所能预想到的。&lt;/p&gt;
&lt;p&gt;我想 Go 中的包正体现了 UNIX 哲学的精神。因为每一个包都是一个拥有单一责任的简洁的 Go 程序。&lt;/p&gt;
&lt;h4 id=&quot;开放封闭原则&quot;&gt;&lt;a href=&quot;#开放封闭原则&quot; class=&quot;headerlink&quot; title=&quot;开放封闭原则&quot;&gt;&lt;/a&gt;开放封闭原则&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/open.png&quot; alt=&quot;open or close&quot;&gt;&lt;br&gt;第二个原则，也就是 SOLID 当中的 O，是由 &lt;code&gt;Bertrand Meyer&lt;/code&gt; 提出的&lt;code&gt;开放封闭原则&lt;/code&gt;。1988年，Bertrand Mey 在他的著作《面向对象软件构造》一书中写道：Software entities should be open for extension,but closed for modification（软件实体应当对扩展开放，对修改关闭）。&lt;/p&gt;
&lt;p&gt;那么这个n年前的建议在 Go 语言中是如何应用的呢？&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; A &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	year &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(a A)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Hello GolangUK&quot;&lt;/span&gt;, a.year)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; B &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(b B)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Welcome to GolangUK&quot;&lt;/span&gt;, b.year)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	a.year = &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b B&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	b.year = &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	a.Greet()&lt;span class=&quot;comment&quot;&gt;//Hello GolangUK 2016&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	b.Greet()&lt;span class=&quot;comment&quot;&gt;//Welcome to GolangUK 2016&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码中，我们有类型A，包含属性 year 和一个方法 Greet。我们还有类型B，B中嵌入(embedding)了类型A，并且B提供了他自己的 Greet 方法，覆盖了A的。&lt;/p&gt;
&lt;p&gt;嵌入不仅仅是针对方法，还可以通过嵌入使用被嵌入类型的属性。我们可以看到，在上面的例子中，因为A和B定义在同一个包中，所以B可以像使用自己定义的属性一样使用A中的 private 的属性 year。&lt;/p&gt;
&lt;p&gt;所以，嵌入是实现 Go 类型对扩展开放非常鹅妹子嘤的手段。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Cat &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c Cat)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Legs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c Cat)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintLegs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, c.Legs())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; OctoCat &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Cat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c OctoCat)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Legs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; octo OctoCat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, octo.Legs())&lt;span class=&quot;comment&quot;&gt;// I have 5 legs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	octo.PrintLegs()&lt;span class=&quot;comment&quot;&gt;// I have 4 legs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，我们有一个 Cat 类型，它拥有一个 Legs 方法可以获得腿的数目。我们将 Cat 类型嵌入到一个新类型 OctoCat 中，然后声明 Octocat 有5条腿。然而，尽管 OctoCat 定义了它自己的 Legs 方法返回5，在调用 PrintLegs 方法时依旧会打印“I have 4 legs”。&lt;/p&gt;
&lt;p&gt;这是因为 PrintLegs 方法是定义在 Cat 类型中的，它将 Cat 作为接收者，所以会调用 Cat 类型的 Legs 方法。Cat 类型并不会感知到它被嵌入到其他类型中，所以它的方法也不会被更改。&lt;/p&gt;
&lt;p&gt;所以，我们可以说 Go 的类型是对扩展开放，对修改关闭的。&lt;/p&gt;
&lt;p&gt;实际上，Go 类型中的方法比普通函数多了一点语法糖—-将接收者作为一个预先声明的形参。(译者注：这块理解了好久😖。。。，不懂得可以看这篇&lt;a href=&quot;https://tiancaiamao.gitbooks.io/go-internals/content/zh/07.3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文档&lt;/a&gt;)&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c Cat)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintLegs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, c.Legs())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintLegs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c Cat)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;I have %d legs\n&quot;&lt;/span&gt;, c.Legs())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于 Go 并不支持函数重载，所以 OctoCat 类型并不能替代 Cat 类型。这也将引出下一个原则—里氏替换原则。&lt;/p&gt;
&lt;p&gt;且听下回分解。。。。。。。&lt;/p&gt;
&lt;p&gt;——————————————别看我，我只是个傲娇的分割线———————————————————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;终于完成了上的部分↖(^ω^)↗，尽量在下周完成下。由于并不了解 Go 难免会有错误或翻译生硬的地方，欢迎指正错误，欢迎一起讨论~(≧▽≦)/~。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;都看到这了，关注个公众号再走吧🙈&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/qrcode.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近两个月没有好好的看书学习，导致博客也水了两个月没写什么正经的。上周收到仓鼠🐹君萌萌哒的邮件之后，又激起了我写博客的欲望。由于自己最近灵感枯竭，所以我决定翻译一篇别人的O(∩_∩)O~。作为一个一直想学 Go，但想了好久还没入门的人，我挑了篇写 Go 的，顺便帮自己熟悉一下 Go。原文是作者根据自己 GolangUK 的&lt;a href=&quot;https://www.youtube.com/watch?v=zzAdEt3xZ1M&quot;&gt;演讲&lt;/a&gt;所整理的，全文以 SOLID 原则为线路讲述了什么样的 Go 代码才算是好代码，当然 SOLID 原则也适用于其他语言。原文比较长，所以准备分成上下两部分，也有十分非常以及特别大的可能是上中下(捂脸)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咳咳，我果然是打脸体质，下翻译了一句就放弃了。不过，我把它交给了超靠谱的小伙伴。想看下的请移步&lt;a href=&quot;http://kevin.doyeden.com/2016/09/21/solid-go-design-2/&quot;&gt;【译】S.O.L.I.D 原则在 Go 中的应用（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;捂。。。。。。。。还是不捂了，脸已经丢没了🙈&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yemengying.com/categories/go/"/>
    
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="go" scheme="http://yemengying.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>如何快速拥有产品的sense</title>
    <link href="http://yemengying.com/2016/08/23/how-to-get-pm-sense/"/>
    <id>http://yemengying.com/2016/08/23/how-to-get-pm-sense/</id>
    <published>2016-08-23T08:32:31.000Z</published>
    <updated>2016-09-21T08:32:49.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;趁着在家葛优躺的几天，培养培养自己在产品方面的技能，经过axure,sketch,xmind的重重磨炼，总结出来这篇文章，从三个方面讲讲如何才能在短时间内快速拥有产品的sense，画出高保真的原型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/no-dream.jpg&quot; alt=&quot;lalala&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;趁着在家葛优躺的几天，培养培养自己在产品方面的技能，经过axure,sketch,xmind的重重磨炼，总结出来这篇文章，从三个方面讲讲如何才能在短时间内快速拥有产品的sense，画出高保真的原型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【Spring】Xml解析相关</title>
    <link href="http://yemengying.com/2016/07/25/spring-xml/"/>
    <id>http://yemengying.com/2016/07/25/spring-xml/</id>
    <published>2016-07-25T14:37:18.000Z</published>
    <updated>2016-09-21T08:36:02.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;先请看下左上角，hiahia，新logo，si不si很漂酿，有个会设计的表哥就是好，又好又快，还不用钱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;总结下最近看的 Spring Xml 解析相关的一点点东东，还没有看完。。。。&lt;/p&gt;
&lt;h3 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-spring-resource/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring 资源访问剖析和策略模式应用&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h3&gt;&lt;p&gt;先说个在看源码时，发现的一个以前没有关注过的点。大神们在创建集合的时候，大多数都设置了一个预估的初始容量(2的幂数)，而不是直接采用默认的初始容量( HashMap 中是16)，就像下面这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map from dependency type to corresponding autowired value */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt; resolvableDependencies = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map of bean definition objects, keyed by bean name */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, BeanDefinition&amp;gt; beanDefinitionMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;String, BeanDefinition&amp;gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map of singleton and non-singleton bean names, keyed by dependency type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt; allBeanNamesByType = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt;(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Map of singleton-only bean names, keyed by dependency type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt; singletonBeanNamesByType = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, String[]&amp;gt;(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** List of bean definition names, in registration order */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; List&amp;lt;String&amp;gt; beanDefinitionNames = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** List of names of manually registered singletons, in registration order */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; Set&amp;lt;String&amp;gt; manualSingletonNames = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;String&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大神们这样写肯定是有好处的。不太了解其它集合类的实现，就以 HashMap 为例看一下。HashMap 底层的存储结构是一个 Entry 对象的数组(Java 8中是 Node 对象的数组)，默认初始容量是16，负载因子是0.75。也就是说当元素个数超过16*0.75=12时，就要进行扩容，将数组大小扩大一倍，并计算元素在新数组中的位置，这个过程是比较耗费性能的。所以，个人觉得大神们这样写是因为如果直接采用默认的初始容量，那么在元素个数较少时，会浪费空间；元素个数较多时，又会造成频繁的扩容，耗费性能。&lt;/p&gt;
&lt;p&gt;想起上次的需求，明明确定一定以及肯定评分只有5个，还是new了个默认容量(16)的map。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/renxing.jpeg&quot; alt=&quot;ren xing&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关接口&quot;&gt;&lt;a href=&quot;#相关接口&quot; class=&quot;headerlink&quot; title=&quot;相关接口&quot;&gt;&lt;/a&gt;相关接口&lt;/h3&gt;&lt;p&gt;先理一理加载xml配置文件的相关接口&lt;br&gt;&lt;strong&gt;1.Resource&lt;/strong&gt;：采用了策略模式，是 Spring 资源访问策略的抽象，该接口有多种实现类，每个实现类代表一种资源访问策略，负责具体的资源访问。&lt;br&gt;&lt;strong&gt;2.ResourceLoader&lt;/strong&gt;：该接口的实现类可以获得一个 Resource 的实例。&lt;br&gt;&lt;strong&gt;3.BeanDefinitionReader&lt;/strong&gt;： 根据指定的 Resource 加载bean definition. &lt;/p&gt;
&lt;p&gt;未完待续。。。。。。&lt;/p&gt;
&lt;p&gt;本来是想多整理一点的，但是。。。听说新一期RM主角是wuli光洙，这还能忍，滚去看RM了。。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;先请看下左上角，hiahia，新logo，si不si很漂酿，有个会设计的表哥就是好，又好又快，还不用钱。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yemengying.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>【Spring】Bean的生命周期</title>
    <link href="http://yemengying.com/2016/07/14/spring-bean-life-cycle/"/>
    <id>http://yemengying.com/2016/07/14/spring-bean-life-cycle/</id>
    <published>2016-07-14T13:35:53.000Z</published>
    <updated>2016-09-21T08:35:54.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;智商捉鸡🐔，实在没办法一下子理解Spring IoC和AOP的实现原理，看的闹心也不太懂，所以。。。决定拆成小的不能在小的一个个问题，一点点啃。今天先来看看Spring中Bean的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Spring Bean是Spring应用中最最重要的部分了。所以来看看Spring容器在初始化一个bean的时候会做那些事情，顺序是怎样的，在容器关闭的时候，又会做哪些事情。&lt;/p&gt;
&lt;h3 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;p&gt;git地址：&lt;br&gt;&lt;div id=&quot;badge-container-giraffe0813-giraffeInSpring-giraffeInSpring&quot; class=&quot;hexo-github&quot; style=&quot;width: 100%&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;/hexo-github/badge.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  loadStyle(&quot;/hexo-github/style.css&quot;);
  loadStyle(&quot;/hexo-github/octicons/octicons.css&quot;);
  new Badge(&quot;#badge-container-giraffe0813-giraffeInSpring-giraffeInSpring&quot;, &quot;giraffe0813&quot;, &quot;giraffeInSpring&quot;, &quot;giraffeInSpring&quot;, false);
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;spring版本：4.2.3.RELEASE&lt;br&gt;鉴于Spring源码是用gradle构建的，我也决定舍弃我大maven，尝试下&lt;a href=&quot;http://kevin.doyeden.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;洪菊&lt;/a&gt;推荐过的gradle。运行beanLifeCycle模块下的junit test即可在控制台看到如下输出，可以清楚了解Spring容器在创建，初始化和销毁Bean的时候依次做了那些事情。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Spring容器初始化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;=====================================&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用GiraffeService无参构造函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GiraffeService中利用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;方法设置属性值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanName:: Bean Name defined &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; context=giraffeService&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanClassLoader,ClassLoader Name = sun.misc.Launcher&lt;span class=&quot;variable&quot;&gt;$AppClassLoader&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanFactory,&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;BeanFactory:: giraffe bean singleton=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Environment&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ResourceLoader:: Resource File Name=spring-beans.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ApplicationEventPublisher&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ApplicationContext:: Bean Definition Names=[giraffeService, org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&lt;span class=&quot;comment&quot;&gt;#0, com.giraffe.spring.service.GiraffeServicePostProcessor#0]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行BeanPostProcessor的postProcessBeforeInitialization方法,beanName=giraffeService&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用PostConstruct注解标注的方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行InitializingBean接口的afterPropertiesSet方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行配置的init-method&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行BeanPostProcessor的postProcessAfterInitialization方法,beanName=giraffeService&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Spring容器初始化完毕&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;=====================================&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;从容器中获取Bean&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;giraffe Name=李光洙&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;=====================================&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用preDestroy注解标注的方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行DisposableBean接口的destroy方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行配置的destroy-method&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Spring容器关闭&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.journaldev.com/2637/spring-bean-life-cycle#comment-35644&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;life cycle management of a spring bean&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javabeat.net/life-cycle-management-of-a-spring-bean/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Bean Life Cycle&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Spring-Bean的生命周期&quot;&gt;&lt;a href=&quot;#Spring-Bean的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean的生命周期&quot;&gt;&lt;/a&gt;Spring Bean的生命周期&lt;/h3&gt;&lt;p&gt;先来看看，Spring在Bean从创建到销毁的生命周期中可能做得事情。&lt;/p&gt;
&lt;h4 id=&quot;initialization-和-destroy&quot;&gt;&lt;a href=&quot;#initialization-和-destroy&quot; class=&quot;headerlink&quot; title=&quot;initialization 和 destroy&quot;&gt;&lt;/a&gt;initialization 和 destroy&lt;/h4&gt;&lt;p&gt;有时我们需要在Bean属性值set好之后和Bean销毁之前做一些事情，比如检查Bean中某个属性是否被正常的设置好值了。Spring框架提供了多种方法让我们可以在Spring Bean的生命周期中执行initialization和pre-destroy方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.实现InitializingBean和DisposableBean接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这两个接口都只包含一个方法。通过实现InitializingBean接口的afterPropertiesSet()方法可以在Bean属性值设置好之后做一些操作，实现DisposableBean接口的destroy()方法可以在销毁Bean之前做一些操作。&lt;/p&gt;
&lt;p&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InitializingBean&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;DisposableBean&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行InitializingBean接口的afterPropertiesSet方法&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行DisposableBean接口的destroy方法&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种方法比较简单，但是不建议使用。因为这样会将Bean的实现和Spring框架耦合在一起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.在bean的配置文件中指定init-method和destroy-method方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring允许我们创建自己的init方法和destroy方法，只要在Bean的配置文件中指定init-method和destroy-method的值就可以在Bean初始化时和销毁之前执行一些操作。&lt;br&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过&amp;lt;bean&amp;gt;的destroy-method属性指定的销毁方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroyMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行配置的destroy-method&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过&amp;lt;bean&amp;gt;的init-method属性指定的初始化方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行配置的init-method&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置文件中的配置：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;giraffeService&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.giraffe.spring.service.GiraffeService&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;init-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;initMethod&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;destroy-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;destroyMethod&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是自定义的init-method和post-method方法可以抛异常但是不能有参数。&lt;br&gt;这种方式比较推荐，因为可以自己创建方法，无需将Bean的实现直接依赖于spring的框架。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.使用@PostConstruct和@PreDestroy注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了xml配置的方式，Spring也支持用&lt;code&gt;@PostConstruct&lt;/code&gt;和 &lt;code&gt;@PreDestroy&lt;/code&gt;注解来指定init和destroy方法。这两个注解均在&lt;code&gt;javax.annotation&lt;/code&gt;包中。&lt;br&gt;为了注解可以生效，需要在配置文件中定义&lt;code&gt;org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&lt;/code&gt;或&lt;code&gt;context:annotation-config&lt;/code&gt;&lt;br&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@PostConstruct&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initPostConstruct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行PostConstruct注解标注的方法&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@PreDestroy&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;preDestroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行preDestroy注解标注的方法&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置文件:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;实现-Aware接口-在Bean中使用Spring框架的一些对象&quot;&gt;&lt;a href=&quot;#实现-Aware接口-在Bean中使用Spring框架的一些对象&quot; class=&quot;headerlink&quot; title=&quot;实现*Aware接口 在Bean中使用Spring框架的一些对象&quot;&gt;&lt;/a&gt;实现*Aware接口 在Bean中使用Spring框架的一些对象&lt;/h4&gt;&lt;p&gt;有些时候我们需要在Bean的初始化中使用Spring框架自身的一些对象来执行一些操作，比如获取ServletContext的一些参数，获取ApplicaitionContext中的BeanDefinition的名字，获取Bean在容器中的名字等等。为了让Bean可以获取到框架自身的一些对象，Spring提供了一组名为*Aware的接口。&lt;br&gt;这些接口均继承于&lt;code&gt;org.springframework.beans.factory.Aware&lt;/code&gt;标记接口，并提供一个将由Bean实现的set*方法,Spring通过基于setter的依赖注入方式使相应的对象可以被Bean使用。&lt;br&gt;网上说，这些接口是利用观察者模式实现的，类似于servlet listeners，目前还不明白，不过这也不在本文的讨论范围内。&lt;br&gt;介绍一些重要的Aware接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ApplicationContextAware: 获得ApplicationContext对象,可以用来获取所有Bean definition的名字。&lt;/li&gt;
&lt;li&gt;BeanFactoryAware:获得BeanFactory对象，可以用来检测Bean的作用域。&lt;/li&gt;
&lt;li&gt;BeanNameAware:获得Bean在配置文件中定义的名字。&lt;/li&gt;
&lt;li&gt;ResourceLoaderAware:获得ResourceLoader对象，可以获得classpath中某个文件。&lt;/li&gt;
&lt;li&gt;ServletContextAware:在一个MVC应用中可以获取ServletContext对象，可以读取context中的参数。&lt;/li&gt;
&lt;li&gt;ServletConfigAware在一个MVC应用中可以获取ServletConfig对象，可以读取config中的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🌰如下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GiraffeService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt;   &lt;span class=&quot;title&quot;&gt;ApplicationContextAware&lt;/span&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;ApplicationEventPublisherAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;BeanClassLoaderAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;BeanFactoryAware&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;BeanNameAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;EnvironmentAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ImportAware&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;ResourceLoaderAware&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBeanClassLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ClassLoader classLoader)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setBeanClassLoader,ClassLoader Name = &quot;&lt;/span&gt; + classLoader.getClass().getName());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setBeanFactory,setBeanFactory:: giraffe bean singleton=&quot;&lt;/span&gt; +  beanFactory.isSingleton(&lt;span class=&quot;string&quot;&gt;&quot;giraffeService&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBeanName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setBeanName:: Bean Name defined in context=&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                + s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setApplicationContext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setApplicationContext:: Bean Definition Names=&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                + Arrays.toString(applicationContext.getBeanDefinitionNames()));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setApplicationEventPublisher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ApplicationEventPublisher applicationEventPublisher)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setApplicationEventPublisher&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setEnvironment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Environment environment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setEnvironment&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setResourceLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ResourceLoader resourceLoader)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Resource resource = resourceLoader.getResource(&lt;span class=&quot;string&quot;&gt;&quot;classpath:spring-beans.xml&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setResourceLoader:: Resource File Name=&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                + resource.getFilename());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setImportMetadata&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(AnnotationMetadata annotationMetadata)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行setImportMetadata&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;BeanPostProcessor&quot;&gt;&lt;a href=&quot;#BeanPostProcessor&quot; class=&quot;headerlink&quot; title=&quot;BeanPostProcessor&quot;&gt;&lt;/a&gt;BeanPostProcessor&lt;/h4&gt;&lt;p&gt;上面的*Aware接口是针对某个实现这些接口的Bean定制初始化的过程，&lt;br&gt;Spring同样可以针对容器中的所有Bean，或者某些Bean定制初始化过程，只需提供一个实现BeanPostProcessor接口的类即可。 该接口中包含两个方法，postProcessBeforeInitialization和postProcessAfterInitialization。 postProcessBeforeInitialization方法会在容器中的Bean初始化之前执行， postProcessAfterInitialization方法在容器中的Bean初始化之后执行。&lt;br&gt;🌰如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomerBeanPostProcessor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行BeanPostProcessor的postProcessBeforeInitialization方法,beanName=&quot;&lt;/span&gt; + beanName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bean;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;执行BeanPostProcessor的postProcessAfterInitialization方法,beanName=&quot;&lt;/span&gt; + beanName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bean;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要将BeanPostProcessor的Bean像其他Bean一样定义在配置文件中&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.giraffe.spring.service.CustomerBeanPostProcessor&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;所以。。。结合第一节控制台输出的内容，Spring Bean的生命周期是这样纸的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bean容器找到配置文件中Spring Bean的定义。&lt;/li&gt;
&lt;li&gt;Bean容器利用Java Reflection API创建一个Bean的实例。&lt;/li&gt;
&lt;li&gt;如果涉及到一些属性值 利用set方法设置一些属性值。&lt;/li&gt;
&lt;li&gt;如果Bean实现了BeanNameAware接口，调用setBeanName()方法，传入Bean的名字。&lt;/li&gt;
&lt;li&gt;如果Bean实现了BeanClassLoaderAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。&lt;/li&gt;
&lt;li&gt;如果Bean实现了BeanFactoryAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。&lt;/li&gt;
&lt;li&gt;与上面的类似，如果实现了其他*Aware接口，就调用相应的方法。&lt;/li&gt;
&lt;li&gt;如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessBeforeInitialization()方法&lt;/li&gt;
&lt;li&gt;如果Bean实现了InitializingBean接口，执行afterPropertiesSet()方法。&lt;/li&gt;
&lt;li&gt;如果Bean在配置文件中的定义包含&lt;code&gt;init-method&lt;/code&gt;属性，执行指定的方法。&lt;/li&gt;
&lt;li&gt;如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessAfterInitialization()方法&lt;/li&gt;
&lt;li&gt;当要销毁Bean的时候，如果Bean实现了DisposableBean接口，执行destroy()方法。&lt;/li&gt;
&lt;li&gt;当要销毁Bean的时候，如果Bean在配置文件中的定义包含&lt;code&gt;destroy-method&lt;/code&gt;属性，执行指定的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用图表示一下(&lt;a href=&quot;http://www.jianshu.com/p/d00539babca5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图来源&lt;/a&gt;)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/life.png&quot; alt=&quot;Spring BeanLifeCycle&quot;&gt;&lt;/p&gt;
&lt;p&gt;希望今晚能成功玩上pokemon go，好想抓精灵啊&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/li.jpg&quot; alt=&quot;啦啦啦&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论~~&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;智商捉鸡🐔，实在没办法一下子理解Spring IoC和AOP的实现原理，看的闹心也不太懂，所以。。。决定拆成小的不能在小的一个个问题，一点点啃。今天先来看看Spring中Bean的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yemengying.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://yemengying.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Keep Going</title>
    <link href="http://yemengying.com/2016/07/03/keep-going/"/>
    <id>http://yemengying.com/2016/07/03/keep-going/</id>
    <published>2016-07-03T13:31:34.000Z</published>
    <updated>2016-09-21T08:41:01.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;睡前看了眼Analysis的数据，比以前进步太多，发上来纪念一下，为什么呢？因为我知道。。。。。。下周。。。。。它就会。。。。降下去了😱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;不说废话，直接上图。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/data.png&quot; alt=&quot;Analysis Data&quot;&gt;&lt;/p&gt;
&lt;p&gt;这些数据安抚了我因为中午火锅而受伤的弱小心灵。。。。。千万别吐槽这数据其实挺low的，我才不会告诉你们以前都超不过20的。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/sad.jpg&quot; alt=&quot;sad&quot;&gt;&lt;/p&gt;
&lt;p&gt;要是周六看到这个数据就好了，周末肯定会写写写，就不会荒废了。。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/cat.jpg&quot; alt=&quot;cat&quot;&gt;&lt;/p&gt;
&lt;p&gt;看到种说法，人分为自燃型，助燃型和阻燃型，嗯，我应该就属于助燃型的吧~~ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/liguangzhu09.jpg&quot; alt=&quot;wuli光洙&quot;&gt;&lt;/p&gt;
&lt;p&gt;Keep going &amp;amp; 碎觉。。。。😂&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;睡前看了眼Analysis的数据，比以前进步太多，发上来纪念一下，为什么呢？因为我知道。。。。。。下周。。。。。它就会。。。。降下去了😱。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【译】如何给变量取个简短且无歧义的名字</title>
    <link href="http://yemengying.com/2016/06/25/cleanCode4naming/"/>
    <id>http://yemengying.com/2016/06/25/cleanCode4naming/</id>
    <published>2016-06-25T08:23:39.000Z</published>
    <updated>2016-09-21T08:31:56.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;湾区日报上分享的一篇文章，文章的作者在Google设计Dart语言，就变量命名方面给了4点建议，文中也列出了好变量名、坏变量名的对比。不管作者的看法与你实际中的命名习惯是否一致，看完这篇文章，相信可以在变量命名方面有一些新的思考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;原文地址（康桑阿米达）：&lt;a href=&quot;http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;google做的最明智的规定之一就是严格执行code review。每一个改动在上线之前，都要经过两种形式的review。首先，团队中的人会进行常规的review，以确保代码完成了它应该完成的功能。&lt;/p&gt;
&lt;p&gt;接下来还会进行可读性层面的review。顾名思义，它是为了确保代码是可读性高的：是否利于理解和维护？是否符合该编程语言的一些惯例？是否有良好的文档？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dartlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dart&lt;/a&gt;已经开始google内部使用，所以我有幸参与了n次上面类型的code review。作为该语言的设计者，这是一项令人着迷的工作。我可以直接看到人们是如何使用Dart的，这对语言的进一步发展很有帮助。在reivew的同时，我也能够清晰的了解到那些比较常见的错误和使用最多的特性，我就好像是一个记录本地居民生活的人类学者。&lt;/p&gt;
&lt;p&gt;当然，上面说的与本文的主旨无关，这并不是一篇关于Dart的文章。本文主要是想讨论我看到过的一些令人抓狂的代码：&lt;strong&gt;这些代码的变量命名实在是太尼玛的长了。。。。。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的，变量的名称可以很短。回到当C语言中外部标识符仅需要由前六个字符来唯一的区分; 自动补全功能还没有发明; 每次按键盘都像在雪地上坡一样艰难的时候,长的命名就会带来很多问题。不过幸运的是，我们现在生活的世界太美好了，键盘操作变得如此简单。&lt;/p&gt;
&lt;p&gt;但我们现在似乎走上了另一个极端，我们不应该做海明威，但我们也无需成为田纳西·威廉斯。代码中使用了超长的命名会影响代码的清晰性。同时，超长的变量命名会造成换行，这会影响代码的结构，不易于阅读。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长的类名会使开发者不易声明该类型的变量。&lt;/li&gt;
&lt;li&gt;长的方法命名会使它变得晦涩难懂.&lt;/li&gt;
&lt;li&gt;长的变量命名不利于代码重用，导致过长的方法链。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我曾见过超过60个字符的变量命名,你甚至可以写首诗。别慌，下面我们来看看如何解决这一问题。&lt;/p&gt;
&lt;h3 id=&quot;选择一个好的命名&quot;&gt;&lt;a href=&quot;#选择一个好的命名&quot; class=&quot;headerlink&quot; title=&quot;选择一个好的命名&quot;&gt;&lt;/a&gt;选择一个好的命名&lt;/h3&gt;&lt;p&gt;命名有两个目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清晰：你要知道该命名与什么有关&lt;/li&gt;
&lt;li&gt;精确：你要知道该命名与什么无关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个命名完成上面两个目标之后，其余的字符就是多余的了。下面是我在开发时的一些命名原则：&lt;/p&gt;
&lt;h4 id=&quot;命名中无需含有表示变量或参数类型的单词&quot;&gt;&lt;a href=&quot;#命名中无需含有表示变量或参数类型的单词&quot; class=&quot;headerlink&quot; title=&quot;命名中无需含有表示变量或参数类型的单词&quot;&gt;&lt;/a&gt;命名中无需含有表示变量或参数类型的单词&lt;/h4&gt;&lt;p&gt;如果使用如Java之类的静态类型语言, 开发者通常知道变量的类型. 由于方法的实现一般都比较简短, 所以即便是在查看一个需要推断才知道类型的本地变量, 或者在code review等静态分析器不可用的情况下, 我们也可以通过多看很少的几行代码就能知道变量的类型.&lt;/p&gt;
&lt;p&gt;所以将类型说明加入到变量名中是多余的. 我们应该舍弃&lt;a href=&quot;https://en.wikipedia.org/wiki/Hungarian_notation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;匈牙利命名法&lt;/a&gt;，如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不好的:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String nameString;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DockableModelessWindow dockableModelessWindow;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改进:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DockableModelessWindow window;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;特别是对于集合来说，最好使用名词的复数形式来描述其内容, 而不是使用名词的单数形式来描述. 如果开发者更在乎集合中存储的内容, 那么变量命名应当反映这一点。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不好的:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;DateTime&amp;gt; holidayDateList;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Map&amp;lt;Employee, Role&amp;gt; employeeRoleHashMap;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改进:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;DateTime&amp;gt; holidays;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Map&amp;lt;Employee, Role&amp;gt; employeeRoles;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一点也同样适用于方法的命名。方法名不需要描述它的参数及参数的类型–参数列表已经说明了这些。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不好的:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mergeTableCells(List&amp;lt;TableCell&amp;gt; cells)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sortEventsUsingComparator(List&amp;lt;Event&amp;gt; events,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Comparator&amp;lt;Event&amp;gt; comparator)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改进:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;merge(List&amp;lt;TableCell&amp;gt; cells)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sort(List&amp;lt;Event&amp;gt; events, Comparator&amp;lt;Event&amp;gt; comparator)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样可以帮助调用者更好的阅读：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mergeTableCells(tableCells);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sortEventsUsingComparator(events, comparator);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，这只是我个人的看法，欢迎大家一起讨论~~&lt;/p&gt;
&lt;h4 id=&quot;省略命名中不是用来消除歧义的单词&quot;&gt;&lt;a href=&quot;#省略命名中不是用来消除歧义的单词&quot; class=&quot;headerlink&quot; title=&quot;省略命名中不是用来消除歧义的单词&quot;&gt;&lt;/a&gt;省略命名中不是用来消除歧义的单词&lt;/h4&gt;&lt;p&gt;有些开发者倾向于将他们知道的有关这个变量的所有信息都塞到命名里。要记住，命名只是一个标识符：只是告诉你该变量是在哪定义的。并不是用来告诉阅读者所有他们想知道的有关这个对象的详细信息。这是定义应该做的事情的。 命名只是让你找到他的定义。&lt;/p&gt;
&lt;p&gt;当我看到一个叫&lt;code&gt;recentlyUpdatedAnnualSalesBid&lt;/code&gt;(最近更新的全年销售投标)的标识符时，我会问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在不是最近更新的全年销售投标么？&lt;/li&gt;
&lt;li&gt;存在没有被更新的最近的全年销售投标么？&lt;/li&gt;
&lt;li&gt;存在最近更新的非全年的销售投标么？&lt;/li&gt;
&lt;li&gt;存在最近更新的全年非销售的投标么？&lt;/li&gt;
&lt;li&gt;存在最近更新的全年销售非投标的东东吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面任何一个问题的回答是“不存在”，就意味着命名中引入了无用的单词。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不好的:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;finalBattleMostDangerousBossMonster;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;weaklingFirstEncounterMonster;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改进:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;boss;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;firstMonster;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，你可能会觉得这有一些过了。比如将第一个例子的标识符简化为&lt;code&gt;bid&lt;/code&gt;,会让人觉得有点模糊不清。但你可以放心大胆的这样做，如果在之后的开发中觉得该命名会造成冲突或不明确，可以添加些修饰词来完善它。反之，如果一开始就取了一个很长的命名，你是不可能在之后重新回来简化它的。&lt;/p&gt;
&lt;h4 id=&quot;省略命名中可以从上下文获取的单词&quot;&gt;&lt;a href=&quot;#省略命名中可以从上下文获取的单词&quot; class=&quot;headerlink&quot; title=&quot;省略命名中可以从上下文获取的单词&quot;&gt;&lt;/a&gt;省略命名中可以从上下文获取的单词&lt;/h4&gt;&lt;p&gt;我可以在文章中使用”我”，因为读者都知道这是一篇由Bob Nystrom所做的博客。我蠢萌的脸就挂在那，我无需不停的说我的名字。写代码也是一样，类中的方法/属性和方法中的变量，都是存在在上下文中的，无需重复。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bad:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _annualSaleRebate;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;promoteHolidaySale&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Better:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _rebate;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;promote&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上, 一个命名嵌套的层次越多, 它就有更多的相关的上下文，也就更简短。换句话说，一个变量的作用域越小，命名就越短。&lt;/p&gt;
&lt;h4 id=&quot;省略命名中无任何含义的单词&quot;&gt;&lt;a href=&quot;#省略命名中无任何含义的单词&quot; class=&quot;headerlink&quot; title=&quot;省略命名中无任何含义的单词&quot;&gt;&lt;/a&gt;省略命名中无任何含义的单词&lt;/h4&gt;&lt;p&gt;我常常在许多游戏开发中看到包含无任何含义的单词的命名，一些开发者喜欢在命名中添加一些看起来有点严肃的单词。我猜可能他们觉得这样做可以让他们的代码显得重要，或者说让他们觉得自己更重要。&lt;/p&gt;
&lt;p&gt;实际上，有一些词语并没有实际意义，只是一些套话。比如：data, state, amount, value, manager, engine, object, entity和instance。&lt;/p&gt;
&lt;p&gt;一个好的命名能够在阅读者的脑海中描画出一幅图画。而将某变量命名为”manager”并不能向读者传达任何有关该变量是做什么的信息. 它是用来做绩效评估的吗? 它是管理加薪的吗?&lt;/p&gt;
&lt;p&gt;在命名时可以问一下自己，把这个单词去掉含义是不是不变？如果是，那就果断把它剔除吧~~&lt;/p&gt;
&lt;h3 id=&quot;实际例子—华夫饼&quot;&gt;&lt;a href=&quot;#实际例子—华夫饼&quot; class=&quot;headerlink&quot; title=&quot;实际例子—华夫饼&quot;&gt;&lt;/a&gt;实际例子—华夫饼&lt;/h3&gt;&lt;p&gt;为了让大家了解以上的命名原则在实际中如何应用，这有个违法了以上所有原则的反例。这个例子和我实际上review过的一段代码一样令人心碎。。。。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 好吃的比利时华夫饼&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DeliciousBelgianWaffleObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnishDeliciousBelgianWaffleWithStrawberryList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      List&amp;lt;Strawberry&amp;gt; strawberryList) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先，通过参数列表我们可以知道方法是用来处理一个strawberry的列表，所以可以在方法命名中去掉：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DeliciousBelgianWaffleObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnishDeliciousBelgianWaffle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;Strawberry&amp;gt; strawberries) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除非程序中还包含不好吃的比利时华夫饼或者其他国家的华夫饼，不然我们可以将这些无用的形容词去掉：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WaffleObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnishWaffle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Strawberry&amp;gt; strawberries)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;方法是包含在&lt;code&gt;WaffleObject&lt;/code&gt;类中的，所以方法名中无需Waffle的说明：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WaffleObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Strawberry&amp;gt; strawberries)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很明显它是一个对象，任何事物都是一个对象，这也就是传说中的“面向对象”的含义，所以命名中无需带有&lt;code&gt;Object&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Waffle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;garnish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Strawberry&amp;gt; strawberries)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好了，这样看起来好多了。&lt;/p&gt;
&lt;p&gt;以上就是我总结的相当简洁的命名原则。可能有些人会觉得无需在命名上耗费太多的精力，但我认为命名是开发过程中最基本的任务之一。&lt;br&gt;————————————————–我是萌萌哒分界线—————————————————————-&lt;br&gt;感觉变量或者方法的命名，看似简单，实际很难，特别是想一个简洁明了可读性高的命名。自己也经常用什么&lt;code&gt;data&lt;/code&gt;,&lt;code&gt;xxxlist&lt;/code&gt;来命名，作者说的挺对的，前者没什么意义，后者又有点啰嗦。不过对于集合类型的变量，统一用名词复数命名容易混淆。举个例子对于Apple这个类来说，可能存在List&lt;apple&gt;和Map&lt;integer,apple&gt;两种集合类型的变量。个人觉得对List类型的变量可以采用名词复数来命名，Map类型的变量可以采用valueByKey格式来命名，比较容易区分。&lt;/integer,apple&gt;&lt;/apple&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论~~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;都看到这了，关注个公众号再走吧🙈&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/qrcode.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;湾区日报上分享的一篇文章，文章的作者在Google设计Dart语言，就变量命名方面给了4点建议，文中也列出了好变量名、坏变量名的对比。不管作者的看法与你实际中的命名习惯是否一致，看完这篇文章，相信可以在变量命名方面有一些新的思考。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Clean Code" scheme="http://yemengying.com/categories/Clean-Code/"/>
    
    
      <category term="翻译" scheme="http://yemengying.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>面试总结</title>
    <link href="http://yemengying.com/2016/06/05/interview/"/>
    <id>http://yemengying.com/2016/06/05/interview/</id>
    <published>2016-06-05T02:12:59.000Z</published>
    <updated>2016-09-21T08:33:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;从决定离职开始，前前后后面试了几家公司，把还能记得住的面试问题总结一下，帮小伙伴们查漏补缺吧，希望小伙伴们可以一举拿下offer。会简要写一下我觉得问题的关键点，不过有的可能并不是正确的答案，有的问题我到现在也还没明白。。。~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Java相关&quot;&gt;&lt;a href=&quot;#Java相关&quot; class=&quot;headerlink&quot; title=&quot;Java相关&quot;&gt;&lt;/a&gt;Java相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Java GC机制(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要从三个方面回答:GC是针对什么对象进行回收(可达性分析法)，什么时候开始GC(当新生代满了会进行Minor GC，升到老年代的对象大于老年代剩余空间时会进行Major GC)，GC做什么(新生代采用复制算法，老年代采用标记-清除或标记-整理算法)，感觉回答这些就差不多了，也可以补充一下可以调优的参数(-XX:newRatio,-Xms,-Xmx等等)。详细的可以看我另一篇博客(&lt;a href=&quot;http://yemengying.com/2016/05/13/jvm-GC/&quot;&gt;Java中的垃圾回收机制&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何线程安全的使用HashMap(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为Java程序员还是经常和HashMap打交道的，所以HashMap的一些原理还是搞搞清除比较好。这个问题感觉主要就是问HashMap，HashTable，ConcurrentHashMap，sychronizedMap的原理和区别。具体的可以看我另一篇博客(&lt;a href=&quot;http://yemengying.com/2016/05/07/threadsafe-hashmap/&quot;&gt;如何线程安全的使用HashMap&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashMap是如何解决冲突的(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实就是链接法，将索引值相同的元素存放到一个单链表里。但为了解决在频繁冲突时HashMap性能降低的问题，Java 8中做了一个小优化，在冲突的元素个数超过设定的值(默认为8)时，会使用平衡树来替代链表存储冲突的元素。具体的可以看我另一篇博客(&lt;a href=&quot;http://yemengying.com/2016/02/03/%E8%AF%91-Java%E4%B8%ADHashMap%E5%92%8CLinkedHashMap%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/&quot;&gt;Java 8中HashMap和LinkedHashMap如何解决冲突&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java创建对象有哪几种(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个问题还算好回答，大概有四种—new、工厂模式、反射和克隆，不过这个问题有可能衍生出关于设计模式，反射，深克隆，浅克隆等一系列问题。。。要做好准备~&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;https://www.gitbook.com/book/quanke/design-pattern-java/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计模式Java版&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/53eb4e16d00e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java反射详解&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/yxnchinahlj/archive/2010/09/20/1831615.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深克隆与浅克隆的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注解(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果简历中有提到过曾自定义过注解，还是了解清楚比较好。主要是了解在自定义注解时需要使用的两个主要的元注解@Retention和@Target。@Retention用来声明注解的保留策略，有CLASS，RUNTIME,SOURCE三种，分别表示注解保存在类文件，JVM运行时刻和源代码中。@Target用来声明注解可以被添加到哪些类型的元素上，如类型，方法和域等。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/cf-java-annotation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java注解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异常(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一道笔试题，代码如下，问返回值是什么。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Exception();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(Exception e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ret = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ret = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;主要的考点就是catch中的return在finally之后执行 但是会将return的值放到一个地方存起来，所以finally中的ret=2会执行，但返回值是1。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/hguisu/article/details/6155636&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Java异常处理机制&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.runoob.com/java/java-exceptions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java异常处理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;悲观锁和乐观锁区别，乐观锁适用于什么情况(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;悲观锁，就是总觉得有刁民想害朕，每次访问数据的时候都觉得会有别人修改它，所以每次拿数据时都会上锁，确保在自己使用的过程中不会被他人访问。乐观锁就是很单纯，心态好，所以每次拿数据的时候都不会上锁，只是在更新数据的时候去判断该数据是否被别人修改过。&lt;br&gt;大多数的关系数据库写入操作都是基于悲观锁，缺点在于如果持有锁的客户端运行的很慢，那么等待解锁的客户端被阻塞的时间就越长。Redis的事务是基于乐观锁的机制，不会在执行WATCH命令时对数据进行加锁，只是会在数据已经被其他客户端抢先修改了的情况下，通知执行WATCH命令的客户端。乐观锁适用于读多写少的情况，因为在写操作比较频繁的时候，会不断地retry，从而降低性能。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/1273&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于悲观锁和乐观锁的区别&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/guyufei/archive/2011/01/10/1931632.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;乐观锁和悲观锁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单例模式找错误(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;错误是没有将构造函数私有化，单例还是比较简单的，把它的饿汉式和懒汉式的两种实现方式看明白了就可以了。&lt;br&gt;&lt;a href=&quot;https://quanke.gitbooks.io/design-pattern-java/content/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-Singleton%20Pattern.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单例模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;__&lt;/p&gt;
&lt;h3 id=&quot;Spring相关&quot;&gt;&lt;a href=&quot;#Spring相关&quot; class=&quot;headerlink&quot; title=&quot;Spring相关&quot;&gt;&lt;/a&gt;Spring相关&lt;/h3&gt;&lt;p&gt;关于Spring的问题主要就是围绕着Ioc和AOP，它们真是Spring的核心啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring Bean的生命周期(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就不写我那么low的回答了，直接看参考资料吧。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/zrtqsk/p/3735273.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Bean的生命周期&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javarevisited.blogspot.jp/2011/09/spring-interview-questions-answers-j2ee.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Top 10 Spring Interview Questions Answers J2EE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring中用到的设计模式(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;工厂模式:IOC容器&lt;br&gt;代理模式:AOP&lt;br&gt;策略模式:在spring采取动态代理时，根据代理的类有无实现接口有JDK和CGLIB两种代理方式，就是采用策略模式实现的&lt;br&gt;单例模式:默认情况下spring中的bean只存在一个实例&lt;br&gt;只知道这四个。。。。&lt;br&gt;参考资料:&lt;br&gt;&lt;a href=&quot;https://premaseem.wordpress.com/2013/02/09/spring-design-patterns-used-in-java-spring-framework/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design Patterns Used in Java Spring Framework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲一讲Spring IoC和AOP(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IoC的核心是依赖反转，将创建对象和对象之间的依赖管理交给IoC容器来做，完成对象之间的解耦。&lt;br&gt;AOP主要是利用代理模式，把许多接口都要用的又和接口本身主要的业务逻辑无关的部分抽出来，写成一个切面，单独维护，比如权限验证。这样可以使接口符合“单一职责原则”，只关注主要的业务逻辑，也提高了代码的重用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AOP的应用场景(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;权限，日志，处理异常，事务等等，个人理解就是把许多接口都要用的又和接口本身主要的业务逻辑无关的部分抽出来，写成一个切面，单独维护，比如权限验证。这样可以使接口符合“单一职责原则”，只关注主要的业务逻辑，也提高了代码的重用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring中编码统一要如何做(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;配置一个拦截器就行了&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CharacterEncodingFilter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter-class&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;forceEncoding&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;init-param&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CharacterEncodingFilter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;filter-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据库相关&quot;&gt;&lt;a href=&quot;#数据库相关&quot; class=&quot;headerlink&quot; title=&quot;数据库相关&quot;&gt;&lt;/a&gt;数据库相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Mysql索引的内部结构(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;B+树，三层，真实的数据存储在叶子节点&lt;br&gt;参考资料:&lt;br&gt;&lt;a href=&quot;http://tech.meituan.com/mysql-index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL索引原理及慢查询优化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果一个SQL执行时间比较长怎么办(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以利用pt-query-digest等工具分析慢查询日志，也可以用explain查看SQL的执行计划。具体可看我的另一篇博客&lt;a href=&quot;http://yemengying.com/2016/05/24/mysql-tuning/&quot;&gt;MySQL调优&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果一张表中有上千万条数据应该怎么做分页(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;肯定不能直接limit,offset，主要就是要想办法避免在数据量大时扫描过多的记录。具体可看我的另一篇博客&lt;a href=&quot;http://yemengying.com/2016/05/28/optimized-pagiantion-mysql/&quot;&gt;【译】优化MySQL中的分页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么样的列适合加索引，如果一个列的值只有1和2，那么它适合加索引么(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在where从句，group by从句，order by从句，on从句中出现的列&lt;/li&gt;
&lt;li&gt;索引的字段越小越好&lt;/li&gt;
&lt;li&gt;在建立联合索引时，离散度大的列放大联合索引的前面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有1和2不适合建索引&lt;/p&gt;
&lt;h3 id=&quot;Redis相关&quot;&gt;&lt;a href=&quot;#Redis相关&quot; class=&quot;headerlink&quot; title=&quot;Redis相关&quot;&gt;&lt;/a&gt;Redis相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Redis提供哪几种数据结构(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一共有5种，字符串，散列，列表，集合，有序集合。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.redis.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis中文官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis支持集群么，从哪个版本开始支持集群的(重要程度:★★☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持集群，从3.0版本开始。当然面试时我也没记住版本。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis集群中，如何将一个对象映射到对应的缓存服务器(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般就是hash%N,就是用对象的hash值对缓存服务器的个数取余&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接上个问题，缓存集群中如果新增一台服务器，怎么才能不影响大部分缓存数据的命中？(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实就是一致性Hash算法。以前有看过，可惜面试的时候脑袋就空了，只记得一个环，果然还是要实践啊。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://blog.plasmaconduit.com/consistent-hashing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Consistent Hashing&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/cywosp/article/details/23397179&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;五分钟理解一致性哈希算法(consistent hashing)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目中具体是怎样使用Redis的(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据实际情况回答吧。。。。我是主要做权限控制时用到了Redis，将用户Id和权限Code拼接在一起作为一个key，放到Redis的集合中，在验证某一用户是否有指定权限时，只需验证集合中是否有用户Id和权限Code拼接的key即可&lt;/p&gt;
&lt;h3 id=&quot;算法相关&quot;&gt;&lt;a href=&quot;#算法相关&quot; class=&quot;headerlink&quot; title=&quot;算法相关&quot;&gt;&lt;/a&gt;算法相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;判断一个数字是否为快乐数字(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;leetcode第202题&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/happy-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给定一个乱序数组和一个目标数字 找到和为这个数字的两个数字 时间复杂度是多少(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;leetcode第一题&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/two-sum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何判断一个链表有没有环(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用快慢指针&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除字符串中的空格 只留一个(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个比较简单。。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二叉树层序遍历(重要程度:★★☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用队列就可以了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地铁票价是如何计算的(重要程度:★★☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不知道正确答案，感觉是图的最短路径算法相关的。&lt;/p&gt;
&lt;h3 id=&quot;Elasticsearch相关&quot;&gt;&lt;a href=&quot;#Elasticsearch相关&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch相关&quot;&gt;&lt;/a&gt;Elasticsearch相关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;为什么要用Elasticsearch(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实对Es的了解还是比较少的，因为没做多久就去写坑爹代理商了😖。个人觉得项目中用Es的原因一是可以做分词，二是Es中采用的是倒排索引所以性能比较好，三是Es是个分布式的搜索服务，对各个节点的配置还是很简单方便的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elasticsearch中的数据来源是什么，如何做同步(重要程度:★★★★☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据是来自其他部门的数据库，会在一开始写python脚本做全量更新，之后利用RabbitMQ做增量更新，就是数据更改之后，数据提供方将更改的数据插入到指定消息队列，由对应的消费者索引到Es中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接上个问题，利用消息队列是会对对方代码造成侵入的，还有没有别的方式(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还可以读MySQL的binlog&lt;/p&gt;
&lt;h3 id=&quot;发散思维的题&quot;&gt;&lt;a href=&quot;#发散思维的题&quot; class=&quot;headerlink&quot; title=&quot;发散思维的题&quot;&gt;&lt;/a&gt;发散思维的题&lt;/h3&gt;&lt;p&gt;以下题都是没有正确答案的，不知道是想考思维，还是压力面试，就只写题目，不写回答了。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;画一下心中房树人的关系(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;给你一块地建房如何规划(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;估计二号线有几辆车在运行(重要程度:★☆☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Thrift通信协议(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个问题被问了两遍，然而现在还是不知道。。。什么东西都不能停留在只会用的阶段啊~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git相关(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一些git相关的问题，比如如何做分支管理(git flow)，rebase和merge的区别(&lt;a href=&quot;http://blog.isming.me/2014/09/26/git-rebase-merge/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;merge操作会生成一个新的节点&lt;/a&gt;)等等。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何学习一门新技术(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;google+官网+stackoverflow+github&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比较爱逛的网站和爱看的书(重要程度:★★★☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据实际情况回答吧。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;了不了解微服务(重要程度:★★☆☆☆)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单了解过。。。&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/546ef242b6a3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于微服务的软件架构模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;针对简历中的项目问一些问题(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是根据简历上的项目问一些东西，比如权限控制是怎么做的，有没有碰到过比较难解决的问题之类的，不具体列举了，只要简历上的内容是真实的基本都没啥问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要离职(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;被问了n遍，挺不好回答的一个问题，毕竟不算实习期工作还没满一年，这个时候跳槽很容易让人觉得不安稳。。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对公司还有什么问题(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本每轮面试结束都会问的一个问题，一开始也没当回事，直到有家公司居然挂在四面的这个问题上，我也是蛮醉的😂，果然言多必失啊🌝。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在***公司最大的收获是什么(重要程度:★★★★★)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于我来说，觉得最大的收获就是对企业级的应用有了一个大致的了解，企业里的项目不像学校的课程作业，只要jdbc连接数据库完成功能就可以了，企业的项目要考虑很多东西，比如说为了提高可用性，要部署在多台服务器上，用nginx做负载均衡，还有就是用缓存，异步之类来提高接口性能。然后，也是第一次接触到SOA，这种面向服务的架构。也了解到一个好的应用，除了开发本身，一些自动化发布系统和监控系统也是必不可少的。当然，还认识了一群三观合的小伙伴~~~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试真真是件很心累的事情，每次面完都感觉被拔了层皮，希望两年内不要在面试了😂。后天就要入职了，想想还有点小紧张呢，去看学叔推荐的美剧压压惊。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;都看到这了，关注个公众号再走吧🙈&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/qrcode.jpg&quot; alt=&quot;Running Geek&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从决定离职开始，前前后后面试了几家公司，把还能记得住的面试问题总结一下，帮小伙伴们查漏补缺吧，希望小伙伴们可以一举拿下offer。会简要写一下我觉得问题的关键点，不过有的可能并不是正确的答案，有的问题我到现在也还没明白。。。~~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【译】优化MySQL中的分页</title>
    <link href="http://yemengying.com/2016/05/28/optimized-pagiantion-mysql/"/>
    <id>http://yemengying.com/2016/05/28/optimized-pagiantion-mysql/</id>
    <published>2016-05-28T01:45:42.000Z</published>
    <updated>2016-09-21T08:35:11.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;一道面试的问题，当MySQL表中有数据量很大的时候如何做分页。。。。当时只知道在数据量很大的时候可以分表，但不知道不分表时可以怎么做。。。。唉，谁让代理商就那么几条数据，一个简单的limit，offset就完全hold住了(捂脸🙈)。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;翻译一篇关于优化MySQL中的分页的文章，原文地址：&lt;a href=&quot;http://www.xarg.org/2011/10/optimized-pagination-using-mysql/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optimized Pagination using MySQL&lt;/a&gt;，谢谢，3Q，康桑阿米达~~~&lt;/p&gt;
&lt;p&gt;很多应用往往只展示最新或最热门的几条记录，但为了旧记录仍然可访问，所以就需要个分页的导航栏。然而，如何通过MySQL更好的实现分页，始终是比较令人头疼的问题。虽然没有拿来就能用的解决办法，但了解数据库的底层或多或少有助于优化分页查询。&lt;br&gt;我们先从一个常用但性能很差的查询来看一看。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个查询耗时0.00sec。So，这个查询有什么问题呢？实际上，这个查询语句和参数都没有问题，因为它用到了下面表的主键，而且只读取15条记录。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; city (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  city &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;真正的问题在于offset(分页偏移量)很大的时候，像下面这样：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的查询在有2M行记录时需要0.22sec，通过EXPLAIN查看SQL的执行计划可以发现该SQL检索了100015行，但最后只需要15行。大的分页偏移量会增加使用的数据，MySQL会将大量最终不会使用的数据加载到内存中。就算我们假设大部分网站的用户只访问前几页数据，但少量的大的分页偏移量的请求也会对整个系统造成危害。Facebook意识到了这一点，但Facebook并没有为了每秒可以处理更多的请求而去优化数据库，而是将重心放在将&lt;a href=&quot;http://highscalability.com/blog/2010/11/4/facebook-at-13-million-queries-per-second-recommends-minimiz.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;请求响应时间的方差变小&lt;/a&gt;。&lt;br&gt;对于分页请求，还有一个信息也很重要，就是总共的记录数。我们可以通过下面的查询很容易的获取总的记录数。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COUNT&lt;/span&gt;(*)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而，上面的SQL在采用InnoDB为存储引擎时需要耗费9.28sec。一个不正确的优化是采用&lt;code&gt;SQL_CALC_FOUND_ROWS&lt;/code&gt;,&lt;code&gt;SQL_CALC_FOUND_ROWS&lt;/code&gt;可以在能够在分页查询时事先准备好符合条件的记录数，随后只要执行一句&lt;code&gt;select FOUND_ROWS();&lt;/code&gt; 就能获得总记录数。但是在大多数情况下，查询语句简短并不意味着性能的提高。不幸的是，这种分页查询方式在许多主流框架中都有用到，下面看看这个语句的查询性能。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SQL_CALC_FOUND_ROWS&lt;/span&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个语句耗时20.02sec，是上一个的两倍。事实证明使用&lt;code&gt;SQL_CALC_FOUND_ROWS&lt;/code&gt;做分页是很糟糕的想法。&lt;br&gt;下面来看看到底如何优化。文章分为两部分，第一部分是如何获取记录的总数目，第二部分是获取真正的记录。&lt;/p&gt;
&lt;h3 id=&quot;高效的计算行数&quot;&gt;&lt;a href=&quot;#高效的计算行数&quot; class=&quot;headerlink&quot; title=&quot;高效的计算行数&quot;&gt;&lt;/a&gt;高效的计算行数&lt;/h3&gt;&lt;p&gt;如果采用的引擎是MyISAM，可以直接执行COUNT(*)去获取行数即可。相似的，在堆表中也会将行数存储到表的元信息中。但如果引擎是InnoDB情况就会复杂一些，因为InnoDB不保存表的具体行数。&lt;br&gt;我们可以将行数缓存起来，然后可以通过一个守护进程定期更新或者用户的某些操作导致缓存失效时，执行下面的语句：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COUNT&lt;/span&gt;(*)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt;(PRIMARY);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取记录&quot;&gt;&lt;a href=&quot;#获取记录&quot; class=&quot;headerlink&quot; title=&quot;获取记录&quot;&gt;&lt;/a&gt;获取记录&lt;/h3&gt;&lt;p&gt;下面进入这篇文章最重要的部分，获取分页要展示的记录。上面已经说过了，大的偏移量会影响性能，所以我们要重写查询语句。为了演示，我们创建一个新的表“news”，按照时事性排序(最新发布的在最前面)，实现一个高性能的分页。为了简单，我们就假设最新发布的新闻的Id也是最大的。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; news(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UNSIGNED&lt;/span&gt; PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; AUTO_INCREMENT,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   title &lt;span class=&quot;built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个比较高效的方式是基于用户展示的最后一个新闻Id。查询下一页的语句如下，需要传入当前页面展示的最后一个Id。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt; $last_id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; $perpage&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查询上一页的语句类似，只不过需要传入当前页的第一个Id，并且要逆序。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;gt; $last_id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ASC&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; $perpage&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的查询方式适合实现简易的分页，即不显示具体的页数导航，只显示“上一页”和“下一页”，例如博客中页脚显示“上一页”，“下一页”的按钮。但如果要实现真正的页面导航还是很难的,下面看看另一种方式。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, ((@cnt:= @cnt + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + $perpage - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) % $perpage cnt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; @cnt:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)T&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt; $last_id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; $perpage * $buttons&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)C&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过上面的语句可以为每一个分页的按钮计算出一个offset对应的id。这种方法还有一个好处。假设，网站上正在发布一片新的文章，那么所有文章的位置都会往后移一位，所以如果用户在发布文章时换页，那么他会看见一篇文章两次。如果固定了每个按钮的offset Id，这个问题就迎刃而解了。Mark Callaghan发表过一篇类似的&lt;a href=&quot;http://www.facebook.com/note.php?note_id=206034210932&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客&lt;/a&gt;，利用了组合索引和两个位置变量，但是基本思想是一致的。&lt;br&gt;如果表中的记录很少被删除、修改，还可以将记录对应的页码存储到表中，并在该列上创建合适的索引。采用这种方式，当新增一个记录的时候，需要执行下面的查询重新生成对应的页号。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; @p:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;UPDATE&lt;/span&gt; news &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; page=&lt;span class=&quot;keyword&quot;&gt;CEIL&lt;/span&gt;((@p:= @p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / $perpage) &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，也可以新增一个专用于分页的表，可以用个后台程序来维护。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;UPDATE&lt;/span&gt; pagination T&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;CEIL&lt;/span&gt;((@p:= @p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / $perpage) page&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)C&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; C.id = T.id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; T.page = C.page;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在想获取任意一页的元素就很简单了：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; news A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; pagination B &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; A.id=B.ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; page=$&lt;span class=&quot;keyword&quot;&gt;offset&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有另外一种与上种方法比较相似的方法来做分页，这种方式比较试用于数据集相对小，并且没有可用的索引的情况下—比如处理搜索结果时。在一个普通的服务器上执行下面的查询，当有2M条记录时，要耗费2sec左右。这种方式比较简单，创建一个用来存储所有Id的临时表即可(这也是最耗费性能的地方)。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TEMPORARY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; _tmp (&lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SORT&lt;/span&gt;(random))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;FLOOR&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;RAND&lt;/span&gt;() * &lt;span class=&quot;number&quot;&gt;0x8000000&lt;/span&gt;) random&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; city;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; _tmp &lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;OFFSET&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UNSIGNED&lt;/span&gt; PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; AUTO_INCREMENT, &lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SORT&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; random;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来就可以向下面一样执行分页查询了。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; _tmp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;OFFSET&lt;/span&gt; &amp;gt;= $&lt;span class=&quot;keyword&quot;&gt;offset&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;OFFSET&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; $perpage;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;——————————————–俺只是个分割线———————————————————-&lt;br&gt;简单来说，对于分页的优化就是。。。避免数据量大时扫描过多的记录。&lt;br&gt;博客比较长，所以翻译的有些粗糙。。。，之后会在好好检查一遍的。在自己做测试时，有些查询时间与作者有点不一致，不过作者这篇博客是写于2011年的，so~不要在意具体数据，领会精神吧~~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;国际惯例，wuli光洙结尾~~&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/liguangzhu06.gif&quot; alt=&quot;李光洙&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一道面试的问题，当MySQL表中有数据量很大的时候如何做分页。。。。当时只知道在数据量很大的时候可以分表，但不知道不分表时可以怎么做。。。。唉，谁让代理商就那么几条数据，一个简单的limit，offset就完全hold住了(捂脸🙈)。。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yemengying.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yemengying.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL调优</title>
    <link href="http://yemengying.com/2016/05/24/mysql-tuning/"/>
    <id>http://yemengying.com/2016/05/24/mysql-tuning/</id>
    <published>2016-05-24T13:16:33.000Z</published>
    <updated>2016-09-21T08:34:58.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;啦啦啦，啦啦啦，我是卖报的小行家~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先分享个脑洞打开的mv，coldplay新单up&amp;amp;up，看看会飞的海龟🐢，一点也不精彩，就看了30多遍而已😂。&lt;/p&gt;
&lt;embed src=&quot;http://player.video.qiyi.com/977853bfe26ef11b25e524a983e72c30/0/0/w_19rt2btvq9.swf-albumId=5831552909-tvId=5831552909-isPurchase=0-cnId=5&quot; allowfullscreen=&quot;true&quot; quality=&quot;high&quot; width=&quot;480&quot; height=&quot;350&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot;&gt;


&lt;p&gt;———————————-我是预示画风转变分割线————————————————————————-&lt;br&gt;根据视频(&lt;a href=&quot;http://www.imooc.com/learn/194&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;)整理。&lt;/p&gt;
&lt;h3 id=&quot;为什么要进行优化？&quot;&gt;&lt;a href=&quot;#为什么要进行优化？&quot; class=&quot;headerlink&quot; title=&quot;为什么要进行优化？&quot;&gt;&lt;/a&gt;为什么要进行优化？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免由数据库链接timeout产生页面5xx的错误&lt;/li&gt;
&lt;li&gt;避免由于慢查询造成页面无法加载&lt;/li&gt;
&lt;li&gt;避免由于阻塞造成数据无法提交&lt;/li&gt;
&lt;li&gt;优化用户体验&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;可以从哪几个方面进行数据库优化？&quot;&gt;&lt;a href=&quot;#可以从哪几个方面进行数据库优化？&quot; class=&quot;headerlink&quot; title=&quot;可以从哪几个方面进行数据库优化？&quot;&gt;&lt;/a&gt;可以从哪几个方面进行数据库优化？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/mysql.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;从图中可以看出，SQL及索引的优化是最重要的，成本最低效果最好。&lt;br&gt;下面分别来看看如何优化SQL和索引。&lt;/p&gt;
&lt;h3 id=&quot;SQL优化&quot;&gt;&lt;a href=&quot;#SQL优化&quot; class=&quot;headerlink&quot; title=&quot;SQL优化&quot;&gt;&lt;/a&gt;SQL优化&lt;/h3&gt;&lt;h4 id=&quot;慢查询日志配置&quot;&gt;&lt;a href=&quot;#慢查询日志配置&quot; class=&quot;headerlink&quot; title=&quot;慢查询日志配置&quot;&gt;&lt;/a&gt;慢查询日志配置&lt;/h4&gt;&lt;p&gt;可以使用慢查询日志对有效率问题的SQL进行监控。下面是关于如何开启慢查询日志和慢查询日志的一些配置。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;show variables like &lt;span class=&quot;string&quot;&gt;&#39;slow_query_log&#39;&lt;/span&gt;; //查看是否开启了慢查询&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; global slow_query_log_file=&lt;span class=&quot;string&quot;&gt;&#39;/home/mysql/sql_log/mysql-slow.log&#39;&lt;/span&gt;; //设置慢查询日志的位置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; global log_queries_not_using_indexes=ON; //是否记录未使用索引的查询&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; global long_query_time=1;//设置记录超过多长时间的SQL语句&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; global slow_query_log=ON;//设置慢查询日志是否开启&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;慢查询日志的格式：&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/mysql2.png&quot; alt=&quot;慢查询日志的格式&quot;&gt;&lt;br&gt;详细看一下每一行都是什么意思。&lt;br&gt;查询的执行时间 Time:140606 12:30:17&lt;br&gt;执行SQL的主机信息 User@Host:root[root] @ localhost []&lt;br&gt;SQL的执行信息 Query_time: 0.000024 Lock_time:0.000000 Rows_sent:0 Rows_examined: 0&lt;br&gt;SQL执行时间 SET timestamp=1402389328&lt;br&gt;SQL的内容:show tables&lt;/p&gt;
&lt;h4 id=&quot;分析慢查日志的工具&quot;&gt;&lt;a href=&quot;#分析慢查日志的工具&quot; class=&quot;headerlink&quot; title=&quot;分析慢查日志的工具&quot;&gt;&lt;/a&gt;分析慢查日志的工具&lt;/h4&gt;&lt;p&gt;1.mysqldumpslow&lt;br&gt;可以使用MySQL自带的慢查询分析工具&lt;code&gt;mysqldumpslow&lt;/code&gt;，可以通过&lt;code&gt;mysqldumpslow -h&lt;/code&gt;来查看具体的使用方法。&lt;br&gt;eg:mysqldumpslow -t 3 /path/to/mysql-slow-query.log | more&lt;br&gt;上面的命令会列出查询时间top 3的SQL语句，具体格式如下图，会列出SQL执行的次数，SQL来执行的时间，锁定的时间，发送的函数，由谁在哪个服务器上执行的和具体的SQL内容。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/mysql3.png&quot; alt=&quot;mysqldumpslow格式&quot;&gt;&lt;br&gt;mysqldumpslow是比较常用的慢查询日志分析工具，但是分析结果包含的信息比较少，对于SQL优化来说可能还不太够。下面看看另一种分析工具。&lt;/p&gt;
&lt;p&gt;2.pt-query-digest&lt;br&gt;&lt;code&gt;pt-query-digest&lt;/code&gt;支持将分析结果保存到文件或数据表中。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;输出到文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pt-query-digest slow.log &amp;gt; slow_log.report&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;输出到数据库表&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pt-query-digest slow.log -review \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;h=127.0.0.1,D=test,p=root,P=3306,u=root,t=query_review \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--creat-reviewtable \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--review-history t=hostname_slow&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;pt-query-digest --help&lt;/code&gt;可以查看具体的使用方式。&lt;br&gt;eg: pt-query-digest /home/mysql/data/mysql-slow.log | more&lt;br&gt;通过上面的命令，会列出慢查询日志的分析结果，分为三个部分。&lt;br&gt;第一部分中包含日志中有多少个SQL，多少个不同的SQL，SQL执行的时间范围，总的执行时间，最短的执行时间，最长的执行时间，平均执行时间，总锁定时间，总发送行数，总检索行数等等。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/pt1.png&quot; alt=&quot;pt-query-digest格式&quot;&gt;&lt;br&gt;第二部分包含关于  表和执行语句的统计，可以看到哪个表的哪个操作的实行时间是最多的，也可以看到对应的响应时间和调用次数。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/pt2.png&quot; alt=&quot;pt-query-digest格式&quot;&gt;&lt;br&gt;第三部分就是具体的SQL的分析，包括对应语句执行时间，锁定时间，发送行数，检索行数等等。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/pt3.png&quot; alt=&quot;pt-query-digest格式&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;定位有问题的SQL&quot;&gt;&lt;a href=&quot;#定位有问题的SQL&quot; class=&quot;headerlink&quot; title=&quot;定位有问题的SQL&quot;&gt;&lt;/a&gt;定位有问题的SQL&lt;/h4&gt;&lt;p&gt;通过上面的慢查询日志分析我们可以定位需要优化的SQL,通常有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询次数多且每次查询占用时间长的SQL：通常为pt-query-digest分析的前几个查询。&lt;/li&gt;
&lt;li&gt;IO大的SQL：注意pt-query-digest分析中的Rows examine项&lt;/li&gt;
&lt;li&gt;未命中索引的SQL： 注意pt-query-digest分析中Rows examine和Rows Send的对比。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;通过Explain查询和分析SQL的执行计划&quot;&gt;&lt;a href=&quot;#通过Explain查询和分析SQL的执行计划&quot; class=&quot;headerlink&quot; title=&quot;通过Explain查询和分析SQL的执行计划&quot;&gt;&lt;/a&gt;通过Explain查询和分析SQL的执行计划&lt;/h4&gt;&lt;p&gt;可以通过Explain查询SQL的执行计划，例子如下：&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/explain.png&quot; alt=&quot;Explain&quot;&gt;&lt;br&gt;explain返回的各列的含义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;列&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;table&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;显示查询是关于哪个表的&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;type&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;很重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index和ALL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;possible_keys&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;显示可能应用在这张表中的索引。如果为空，没有可能应用的索引&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;key&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;实际使用的索引。如果为NULL，则没有使用索引&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;key_len&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;使用的索引的长度。在不损失精确性的情况下，长度越短越好&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ref&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;显示索引的哪一列被使用了&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;rows&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MYSQL认为必须检查的用来返回请求的行数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;extra&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;当这一列的值是Using filesort或Using temporary时，说明查询需要优化了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;索引优化&quot;&gt;&lt;a href=&quot;#索引优化&quot; class=&quot;headerlink&quot; title=&quot;索引优化&quot;&gt;&lt;/a&gt;索引优化&lt;/h3&gt;&lt;h4 id=&quot;如何选择合适的列来建立索引&quot;&gt;&lt;a href=&quot;#如何选择合适的列来建立索引&quot; class=&quot;headerlink&quot; title=&quot;如何选择合适的列来建立索引&quot;&gt;&lt;/a&gt;如何选择合适的列来建立索引&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在where从句，group by从句，order by从句，on从句中出现的列&lt;/li&gt;
&lt;li&gt;索引的字段越小越好&lt;/li&gt;
&lt;li&gt;在建立联合索引时，离散度大的列放大联合索引的前面&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;如何维护和优化索引&quot;&gt;&lt;a href=&quot;#如何维护和优化索引&quot; class=&quot;headerlink&quot; title=&quot;如何维护和优化索引&quot;&gt;&lt;/a&gt;如何维护和优化索引&lt;/h4&gt;&lt;p&gt;要避免重复及冗余索引，重复索引是指相同的列以相同的顺序建立的同类型的索引。冗余索引是指多个索引的前缀列相同，或是在联合索引中包含了主键的索引。&lt;br&gt;可以使用&lt;code&gt;pt-duplicate-key-checker&lt;/code&gt;工具可以检查重复及冗余索引。&lt;br&gt;同时还要注意及时删除由于业务变更不再使用的索引。目前MySQL中还没有记录索引的使用情况，但在PerconMuSQL和MariaDB中可以通过INDEX_STATISTICS表来查看哪些索引未使用，在MySQL中目前只能通过慢查询日志配合pt-index-usage工具来进行索引的使用情况的分析。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎指正错误，欢迎一起讨论~~&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;啦啦啦，啦啦啦，我是卖报的小行家~~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yemengying.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yemengying.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>谈谈破窗理论</title>
    <link href="http://yemengying.com/2016/05/15/broken-window-theory/"/>
    <id>http://yemengying.com/2016/05/15/broken-window-theory/</id>
    <published>2016-05-15T06:02:14.000Z</published>
    <updated>2016-09-21T08:31:27.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在湾区日报上看到篇关于破窗理论(Broken Window Theory)的&lt;a href=&quot;http://blog.codinghorror.com/the-broken-window-theory/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=ios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;，真是颇有感触，所以决定写篇博客，结合这几个月开发代理商网站的心(keng)路(die)历程,谈谈为何不能忽视一点点糟糕的代码或者不好的设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;破窗理论&quot;&gt;&lt;a href=&quot;#破窗理论&quot; class=&quot;headerlink&quot; title=&quot;破窗理论&quot;&gt;&lt;/a&gt;破窗理论&lt;/h3&gt;&lt;p&gt;先简单解释下什么是“破窗理论”，“破窗理论”是指：如果有人打坏了一幢建筑物的窗户玻璃，而这扇窗户又得不到及时的维修，别人就可能受到某些暗示性的纵容去打烂更多的窗户。&lt;br&gt;&lt;img src=&quot;http://oduh99f02.bkt.clouddn.com/image/broken-window.jpg&quot; alt=&quot;破窗理论&quot;&gt;&lt;br&gt;湾区日报上的文章中是这样描述破窗理论的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t leave “broken windows” (bad designs, wrong decisions, or poor code) unrepaired. Fix each one as soon as it is discovered. If there is insufficient time to fix it properly, then board it up. Perhaps you can comment out the offending code, or display a “Not Implemented” message, or substitute dummy data instead. Take some action to prevent further damage and to show that you’re on top of the situation.&lt;br&gt;We’ve seen clean, functional systems deteriorate pretty quickly once windows start breaking. There are other factors that can contribute to software rot, and we’ll touch on some of them elsewhere, but neglect accelerates the rot faster than any other factor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单翻译一下就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要放任“破窗户”(不好的设计，错误的决定或糟糕的代码)不管。要尽量在发现时立刻修复。如果没有足够的时间进行适当的修复，就先把它保留起来。可以把出问题的代码放到注释中，或是显示“未实现”消息，也可用虚拟数据加以替代。总之，要采取一些措施，防止进一步的恶化。表明局势尚在掌控之中。有许多整洁良好的系统在出现“破窗”之后立马崩溃。虽然促使软件崩溃的原因还有其他因素（我们将在其他地方接触到），但对“破窗”置之不理，肯定会更快地加速系统崩溃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;亲身感受&quot;&gt;&lt;a href=&quot;#亲身感受&quot; class=&quot;headerlink&quot; title=&quot;亲身感受&quot;&gt;&lt;/a&gt;亲身感受&lt;/h3&gt;&lt;p&gt;先说说背景，故事要从三个月前开始讲起了，当时刚刚转去搜索组做部门内部的搜索，组内总共3个人。本以为可以远离业务代码，专心技术，可万万没想到Elasticsearch的书还没焐热就被部门leader叫去开会，说要做一个代理商系统，很紧急，是公司P0级别的项目，全公司的资源都要给我们让路(事实证明只是画饼，因为现在连一个固定前端都没了)。其实这个项目一听就是个深坑，从头发到脚都是拒绝的。因为主数据（餐厅，活动，订单）全在别的部门，85%的功能都依赖于其他部门的接口(si不si很神奇)，所以做这个项目主要工作就是。。。。。通过SOA或者Thrift调别人的接口。不过即便知道是坑也没办法，只有搜索组刚刚成立比较闲，只能我们做-_-|||。当时部门leader的要求是封闭开发一周半，拿出个可用的版本就行，一定要快！！。所以我们搜索组的三个人加上从别的组借调的两个实习生再加上两个前端就搬去了小黑屋，开始了近两周的封闭开发。&lt;/p&gt;
&lt;p&gt;好了，背景聊完了，进入正题，聊聊代理商是怎么变得越来越难维护的。代理商的开发leader是个搜索大牛，但没做过Web开发，对Java Web开发并不是十分了解。因为部门leader要求快快快，所以将许多必要的步骤省略了。比如定义方法参数命名规范，定义api规范，代码review等等。。。每天就是划分下接口，每人开发几个接口，和前端定义接口文档，就开始开发提测了。讲真，其实所有人都是有责任的，可能是对这个项目一开始就很反感，有抵触心理，所以从内心就没打算好好做，一些觉得可以改进的地方也就得过且过了。后面的事实证明，当觉得设计或规范有不合理的时候，一定要及时提出来，不能忍，忍的后果就是一次一次降低自己的底线，然后亲手造就一个难维护的系统，到时候即便有心想重构也是心有余力不足了。&lt;/p&gt;
&lt;p&gt;公司项目就不贴实际代码了，简单举几个例子，看看开发前定义必要的规范是多么的重要。由于代理商没有事先规定api的定义要符合RESTFul的规范，所以项目中api的风格有两种，符合RESTFul的和不符合的。比如获取餐厅信息的api定义是&lt;code&gt;GET /restaurant/{id}&lt;/code&gt;，而创建餐厅的api定义是&lt;code&gt;POST /restaurant/create&lt;/code&gt;，so。。。如果后面的人想设计更新餐厅信息的api是&lt;code&gt;PUT /restaurant/{id}&lt;/code&gt;还是&lt;code&gt;PUT /restaurant/update&lt;/code&gt;呢，真是一脸懵逼。接口的命名就更是五花八门了，因为大家是来自不同组，而且也没有定义统一的命名的规范，比如：一个简单的获取信息，获取餐厅信息的接口是&lt;code&gt;getRestaurant&lt;/code&gt;,获取活动信息是&lt;code&gt;activityInfo&lt;/code&gt;,获取代理商信息接口是&lt;code&gt;getAgentDto&lt;/code&gt;，获取订单信息又变成了&lt;code&gt;getOrderData&lt;/code&gt;,so。。。谁能告诉我之后想添加个获取信息的接口到底该叫什么。。。估计只能看当时的心情随便取了。。。还有就是项目中存在大量重复代码，获取餐厅管理员信息基本上每个人都写了一遍，因为管理员的信息在获取餐厅，活动信息时都用的到，由于没有代码review，所以一开始大家也不知道，就各写各的，也是蛮醉的。&lt;/p&gt;
&lt;p&gt;上面的例子只是一点点，实际还有很多很多很多的槽点，都是泪啊。由于第一版本为了压缩工时(至今也不明白为啥要那么急。。。)就这样草草交工，导致后面的几个迭代开发也随之变得越来越随意，随意命名，随意定义api，缺乏junit测试，越来越不上心。听说代理商要移交给BD组，但估计情况也只会越来越糟，因为没人愿意去整理一坨坨糟糕的代码，只会在出现问题的时候，随意的打补丁。。。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;其实也没啥好总结的，一句话，以后一定要写干净，整洁的代码，注意规范，不能忽视一点点糟糕的代码或者设计对项目带来的负面影响。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎一起讨论~~&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在湾区日报上看到篇关于破窗理论(Broken Window Theory)的&lt;a href=&quot;http://blog.codinghorror.com/the-broken-window-theory/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=ios&quot;&gt;文章&lt;/a&gt;，真是颇有感触，所以决定写篇博客，结合这几个月开发代理商网站的心(keng)路(die)历程,谈谈为何不能忽视一点点糟糕的代码或者不好的设计。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yemengying.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yemengying.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
